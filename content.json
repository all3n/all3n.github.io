{"meta":{"title":"all3n's blog","subtitle":"coding like r&b","description":null,"author":"all3n","url":"http://devhc.com","root":"/"},"pages":[{"title":"","date":"2024-06-24T03:58:21.683Z","updated":"2024-06-24T03:58:21.683Z","comments":true,"path":"404.html","permalink":"http://devhc.com/404.html","excerpt":"","text":"all3n's Blog-404页面"},{"title":"","date":"2014-01-12T06:11:00.000Z","updated":"2024-06-24T03:58:21.692Z","comments":true,"path":"about/index.html","permalink":"http://devhc.com/about/index.html","excerpt":"","text":"About MeI started programming in 2009, mainly focusing on PHP web development. From 2011 to 2013, I continued working with PHP, and then shifted to ETL for two years. Since 2016, I have been working in algorithm-related fields and enjoy experimenting with various technologies. 1just want coding like R&amp;B style!!&quot;); Skills Pragraming Languages java scala python C++ rust(learning) Big Data Framework Spring container docker&#x2F;k8s Deep Learning Web Vimer"},{"title":"","date":"2024-06-24T03:58:21.692Z","updated":"2024-06-24T03:58:21.692Z","comments":false,"path":"categories/index.html","permalink":"http://devhc.com/categories/index.html","excerpt":"","text":""},{"title":"Deep Learning","date":"2019-09-22T13:22:12.000Z","updated":"2024-06-24T03:58:21.692Z","comments":true,"path":"resource/deep-learning.html","permalink":"http://devhc.com/resource/deep-learning.html","excerpt":"","text":"CS231 计算机视觉课程网易云课堂 Andrew Ng深度学习(Autumn 2018)bilibili"},{"title":"resource","date":"2019-09-22T13:06:38.000Z","updated":"2024-06-24T03:58:21.693Z","comments":true,"path":"resource/index.html","permalink":"http://devhc.com/resource/index.html","excerpt":"","text":"MachineLearningDeepLearning"},{"title":"Machine Learning","date":"2019-09-22T13:22:12.000Z","updated":"2024-06-24T03:58:21.693Z","comments":true,"path":"resource/machine-learning.html","permalink":"http://devhc.com/resource/machine-learning.html","excerpt":"","text":"Google Machine Learninggoogle 机器学习 李宏毅机器学习讲解比较通俗易懂，中文授课Youtubebilibili 2017bilibili 2019 林轩田机器学习基石(国语)bilibili 网易云课堂汇总Andrew ng,李宏毅,cs231n,带字幕link MachineLearning CS229 Stanford Andrew Ng08年的经典视频，板书形式，偏公式推导，初学不易看懂，可以先看coursera版本再来看这个课程主页YoutubeBilibili Coursera比cs229 简化许多，比较易懂,适合入门link"},{"title":"","date":"2024-06-24T03:58:21.693Z","updated":"2024-06-24T03:58:21.693Z","comments":false,"path":"tags/index.html","permalink":"http://devhc.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"c++ stringview","slug":"cpp-stringview","date":"2023-05-23T03:38:25.000Z","updated":"2024-06-24T03:58:21.685Z","comments":true,"path":"cpp/lang/cpp-stringview/","permalink":"http://devhc.com/cpp/lang/cpp-stringview/","excerpt":"","text":"C++ StringView在 C++17 中，引入了 std::string_view 类型，它是一个轻量级的、不可变的字符串视图，可以用来代替 const char* 和 const std::string&amp;，并且提供了许多方便的方法来操作字符串。比如在一些新兴语言 rust 设计就直接支持&amp;str 切片 创建 StringView可以通过以下方式来创建 std::string_view： 12345678910// 从字符串字面量创建std::string_view sv1(&quot;Hello, world!&quot;);// 从 std::string 创建std::string str = &quot;Hello, world!&quot;;std::string_view sv2(str);// 从部分 std::string 创建std::string str2 = &quot;Hello, world!&quot;;std::string_view sv3(str2.c_str(), 5); // 只包含前五个字符 StringView 的基本操作获取字符串长度可以使用 size() 方法来获取字符串的长度： 12std::string_view sv(&quot;Hello, world!&quot;);std::cout &lt;&lt; sv.size() &lt;&lt; std::endl; // 输出 13 访问字符串中的字符可以使用 operator[] 或 at() 方法来访问字符串中的字符： 123std::string_view sv(&quot;Hello, world!&quot;);std::cout &lt;&lt; sv[0] &lt;&lt; std::endl; // 输出 &#x27;H&#x27;std::cout &lt;&lt; sv.at(1) &lt;&lt; std::endl; // 输出 &#x27;e&#x27; 截取字符串可以使用 substr() 方法来截取字符串： 123std::string_view sv(&quot;Hello, world!&quot;);std::string_view sv2 = sv.substr(0, 5); // 截取前五个字符std::cout &lt;&lt; sv2 &lt;&lt; std::endl; // 输出 &quot;Hello&quot; 查找子字符串可以使用 find() 方法来查找子字符串： 1234567std::string_view sv(&quot;Hello, world!&quot;);size_t pos = sv.find(&quot;world&quot;);if (pos != std::string_view::npos) &#123; std::cout &lt;&lt; &quot;Found at position &quot; &lt;&lt; pos &lt;&lt; std::endl;&#125; else &#123; std::cout &lt;&lt; &quot;Not found&quot; &lt;&lt; std::endl;&#125; 比较字符串可以使用 operator== 和 operator!= 来比较两个字符串是否相等： 1234567std::string_view sv1(&quot;Hello, world!&quot;);std::string_view sv2(&quot;Hello&quot;);if (sv1 == sv2) &#123; std::cout &lt;&lt; &quot;Equal&quot; &lt;&lt; std::endl;&#125; else &#123; std::cout &lt;&lt; &quot;Not equal&quot; &lt;&lt; std::endl;&#125; StringView 的优点使用 std::string_view 的好处在于它是一个轻量级的、不可变的字符串视图，可以避免不必要的内存分配和拷贝。在需要操作字符串的场合，使用 std::string_view 可以提高程序的性能和效率。 C++17 以下解决方案 absl::string_view tensorflow stringpiece 使用absl level db: Slice boost string_view brpc string_piece brpc 注释copy from chromium chromium sptring_piece 总结std::string_view 是一个轻量级的、不可变的字符串视图，可以用来代替 const char* 和 const std::string&amp;，并且提供了许多方便的方法来操作字符串。在需要操作字符串的场合，使用 std::string_view 可以提高程序的性能和效率。","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"lang","slug":"cpp/lang","permalink":"http://devhc.com/categories/cpp/lang/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"string","slug":"string","permalink":"http://devhc.com/tags/string/"}]},{"title":"mac a1398 升级ssd更换电池 添加变相片","slug":"mac-mac-upgrade-a1398","date":"2023-05-13T11:30:00.000Z","updated":"2024-06-24T03:58:21.687Z","comments":true,"path":"mac/mac-mac-upgrade-a1398/","permalink":"http://devhc.com/mac/mac-mac-upgrade-a1398/","excerpt":"","text":"家里一台老的mac book pro 由于时间旧发热严重，电池基本持续一个小时，循环次数600多，升级一下配件当做备用机 准备工作 电脑背面 确定A1398 ,关于本机 2013 latest mbp 准备usb 128 在淘宝购买 不到1k 三星980 1T m.2 nvme ssd 转接头 A1398 电池 拆机套装工具包 可选，电池一般会送螺丝刀 系统文件准备 download os: https://github.com/aeonme/gibMacOS12345git clone https://github.com/aeonme/gibMacOS.gitcd gibMacOS./gibMacOS.command选择需要下载的系统id./BuildmacOSInstallApp.command 制作安装包 将安装包脱到/Applications 格式化usb guid&#x2F;mac 日志格式 命名为macusb 根据 https://support.apple.com/en-us/HT201372 命令提示执行安装os到usb sudo &#x2F;Applications&#x2F;Install\\ macOS\\ Catalina.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia –volume &#x2F;Volumes&#x2F;macusb 电池更换 开始更换 关机，拆开后盖 10颗螺丝 第一件事情 断开电源,去下电源卡扣下面两颗螺丝 用铲子铲电池,从两边往中间铲，全部铲掉即可 换上电池,注意对齐两颗螺丝孔 连接电池，盖上盖子先不上螺丝 查看开机是否正常, 关于本机,循环次数1,关机, 上好固定螺丝，撕下电源粘胶 更新ssd 确保电源断开情况下 取下ssd固定螺丝，拔下ssd卡，将新买的nvme 980 插上转接头，放进去，注意要稍微用点力 按上固定螺丝，固定螺丝ssd卡买的时候会配和螺丝刀，盖上盖子 插上优盘,进去安装界面，格式化GUID&#x2F;APFS, 然后安装系统 安装之后用disk speed test 速度是没法跑到3k 由于这个机器比较老 接口速度受限 PCIE2.0 X 2, 只有5G&#x2F;s带宽, 但是是比之前快一倍，主要是容量的提升 清洗灰尘 贴 变相片 确保电源断开情况下 拆机工具帽可以买 带硅脂或者变相片套装 拆下风扇导热铜管左右固定螺丝,注意螺丝有可能是被橡胶帽盖住 拆下cpu扇热器固定4颗螺丝,用酒精片清洗旧硅脂 将变相片一边用送的贴纸撕下沾到散热器上,另一边也撕下，盖上上螺丝 灰层用清理套装小刷子轻轻刷下，我用吸尘器洗掉表面的灰 其他 由于很多开发相关工具都是需要brew安装 brew 已经放弃11以下系统支持 我又将系统升级bigsur 为了节省功耗，可以关闭mac特效，聚焦spotlight 关闭其他只保留应用,避免索引耗电 如果需要11以下系统 可以用mac ports 替换 brew 来作为包管理工具 降级时候如果出现不兼容的硬盘警告，表示格式化没有彻底，需要重新安装，先用mac journal日志格式化，然后在格式化成APFS","categories":[{"name":"mac","slug":"mac","permalink":"http://devhc.com/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://devhc.com/tags/mac/"}],"author":"wanghch"},{"title":"i3","slug":"tools-i3","date":"2023-05-11T11:45:00.000Z","updated":"2024-06-24T03:58:21.691Z","comments":true,"path":"linux/i3/tools-i3/","permalink":"http://devhc.com/linux/i3/tools-i3/","excerpt":"","text":"I3 WM 使用I3 WM是一个非常轻量平铺式linux桌面管理器，可自由定制可以几乎不需要鼠标在workspace,terminal 之间来回切换 OS: Ubuntu 22.04 1apt-get install i3 注销退出，在登录界面选择桌面 I3 进入提示生成默认配置，绑定Key 比如Win，配置生成 ~&#x2F;.config&#x2F;i3&#x2F;config大部分key binding 没有动注意 移动相关 默认 是 jkl; 不是hjkl mod 设置win 启动器dmenu改成rofi,dmenu 只能搜索path 不能执行desktop 设置picom 透明合成器 scrot 截图 分配特定软件Workspace 可选安装FontAwesome 默认配置 $mod 模式 Shift+$mod 模式 config123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188set $alt Mod1set $mod Mod4# Font for window titles. Will also be used by the bar unless a different font# is used in the bar &#123;&#125; block below.font pango:monospace 8tiling_drag modifier titlebar# This font is widely installed, provides lots of unicode glyphs, right-to-left# text rendering and scalability on retina/hidpi displays (thanks to pango).#font pango:DejaVu Sans Mono 8# Start XDG autostart .desktop files using dex. See also# https://wiki.archlinux.org/index.php/XDG_Autostartexec --no-startup-id dex --autostart --environment i3# The combination of xss-lock, nm-applet and pactl is a popular choice, so# they are included here as an example. Modify as you see fit.# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the# screen before suspend. Use loginctl lock-session to lock your screen.exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork# NetworkManager is the most popular way to manage wireless networks on Linux,# and nm-applet is a desktop environment-independent system tray GUI for it.exec --no-startup-id nm-applet# Use pactl to adjust volume in PulseAudio.set $refresh_i3status killall -SIGUSR1 i3statusbindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; $refresh_i3statusbindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; $refresh_i3statusbindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle &amp;&amp; $refresh_i3statusbindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle &amp;&amp; $refresh_i3statusbindsym $mod+$alt+l exec i3lock-fancy# Use Mouse+$mod to drag floating windows to their wanted positionfloating_modifier $mod#tiling_drag $mod titlebar#bindsym $mod+e exec --no-startup-id pcmanfm &amp;&amp; $refresh_i3status# start a terminalbindsym $mod+Return exec i3-sensible-terminal#bindsym $mod+Return exec alacritty# kill focused windowbindsym $mod+Shift+q kill#bindsym $mod+d exec --no-startup-id dmenu_runbindsym $mod+d exec &quot;rofi -modi drun,run -show drun&quot;# change focusbindsym $mod+j focus leftbindsym $mod+k focus downbindsym $mod+l focus upbindsym $mod+semicolon focus right# move focused windowbindsym $mod+Shift+j move leftbindsym $mod+Shift+k move downbindsym $mod+Shift+l move upbindsym $mod+Shift+semicolon move right# alternatively, you can use the cursor keys:bindsym $mod+Shift+Left move leftbindsym $mod+Shift+Down move downbindsym $mod+Shift+Up move upbindsym $mod+Shift+Right move right# split in horizontal orientationbindsym $mod+h split h# split in vertical orientationbindsym $mod+v split v# enter fullscreen mode for the focused containerbindsym $mod+f fullscreen toggle# change container layout (stacked, tabbed, toggle split)bindsym $mod+s layout stackingbindsym $mod+t layout tabbedbindsym $mod+w layout toggle split# toggle tiling / floatingbindsym $mod+Shift+space floating toggle# change focus between tiling / floating windowsbindsym $mod+space focus mode_toggle# focus the parent containerbindsym $mod+a focus parent# focus the child container#bindsym $mod+d focus child# Define names for default workspaces for which we configure key bindings later on.# We use variables to avoid repeating the names in multiple places.set $ws1 &quot;1:&quot;set $ws2 &quot;2:&quot;set $ws3 &quot;3:&quot;set $ws4 &quot;4&quot;set $ws5 &quot;5&quot;set $ws6 &quot;6&quot;set $ws7 &quot;7&quot;set $ws8 &quot;8&quot;set $ws9 &quot;9&quot;set $ws10 &quot;10&quot;# switch to workspacebindsym $mod+1 workspace number $ws1bindsym $mod+2 workspace number $ws2bindsym $mod+3 workspace number $ws3bindsym $mod+4 workspace number $ws4bindsym $mod+5 workspace number $ws5bindsym $mod+6 workspace number $ws6bindsym $mod+7 workspace number $ws7bindsym $mod+8 workspace number $ws8bindsym $mod+9 workspace number $ws9bindsym $mod+0 workspace number $ws10# move focused container to workspacebindsym $mod+Shift+1 move container to workspace number $ws1bindsym $mod+Shift+2 move container to workspace number $ws2bindsym $mod+Shift+3 move container to workspace number $ws3bindsym $mod+Shift+4 move container to workspace number $ws4bindsym $mod+Shift+5 move container to workspace number $ws5bindsym $mod+Shift+6 move container to workspace number $ws6bindsym $mod+Shift+7 move container to workspace number $ws7bindsym $mod+Shift+8 move container to workspace number $ws8bindsym $mod+Shift+9 move container to workspace number $ws9bindsym $mod+Shift+0 move container to workspace number $ws10# reload the configuration filebindsym $mod+Shift+c reload# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)bindsym $mod+Shift+r restart# exit i3 (logs you out of your X session)bindsym $mod+Shift+e exec &quot;i3-nagbar -t warning -m &#x27;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.&#x27; -B &#x27;Yes, exit i3&#x27; &#x27;i3-msg exit&#x27;&quot;mode &quot;resize&quot; &#123; bindsym h resize shrink width 10 px or 10 ppt bindsym j resize grow height 10 px or 10 ppt bindsym k resize shrink height 10 px or 10 ppt bindsym l resize grow width 10 px or 10 ppt bindsym Left resize shrink width 10 px or 10 ppt bindsym Down resize grow height 10 px or 10 ppt bindsym Up resize shrink height 10 px or 10 ppt bindsym Right resize grow width 10 px or 10 ppt bindsym Return mode &quot;default&quot; bindsym Escape mode &quot;default&quot; bindsym $mod+r mode &quot;default&quot;&#125;bindsym $mod+r mode &quot;resize&quot;bindsym $mod+e exec --no-startup-id nautilusbindsym $mod+c exec --no-startup-id google-chromebindsym $mod+shift+z exec --no-startup-id ~/bin/ranger-runbar &#123; id my_bar status_command i3status --config ~/.config/i3/i3status --transparency position top font pango:FontAwesome colors &#123; background #000000 statusline #00FF00 separator #B8F788 separator #00FFFF focused_workspace #B8F788 #000000AA active_workspace #FFFFFF #FFFFFFAA inactive_workspace #AAAAAA #000000AA #AAAAAA urgent_workspace #E57B85 #000000AA &#125;&#125;assign [class=&quot;i3-sensible-terminal&quot;] $ws1assign [class=&quot;Firefox&quot;] $ws2assign [class=&quot;google-chrome&quot;] $ws2assign [class=&quot;google-chrome-stable&quot;] $ws2assign [class=&quot;chrome&quot;] $ws2assign [class=&quot;jetbrains-idea&quot;] $ws3assign [class=&quot;code&quot;] $ws3exec_always --no-startup-id picom -bexec --no-startup-id &quot;bash $HOME/Pictures/backgrounds/wallpaper.sh -d &gt; $HOME/logs/wallpaper.log 2&gt;&amp;1&quot;bindsym --release $mod+z exec scrot -s &quot;$HOME/Pictures/screenshots/%F_%T_$wx$h.png&quot; -e &#x27;xclip -selection clipboard -target image/png -i $f&#x27; 其他技巧 如何获取应用class, 命令行执行xprop, 点击程序界面即可看到命令行输出 某个键的code: xev 获取code map映射: xmodmap -pk","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"i3","slug":"linux/i3","permalink":"http://devhc.com/categories/linux/i3/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"tools","slug":"tools","permalink":"http://devhc.com/tags/tools/"}]},{"title":"pycharm 支持tensorflow提示","slug":"tools-pycharm","date":"2019-12-15T06:10:11.000Z","updated":"2024-07-09T08:45:58.219Z","comments":true,"path":"tensorflow/pycharm/tools-pycharm/","permalink":"http://devhc.com/tensorflow/pycharm/tools-pycharm/","excerpt":"","text":"pycharm 支持tensorflow提示默认tensorflow package keras是通过_LazyLoader 方式延迟加载 导致pycharm 不能正常提示可以通过_typing.TYPE_CHECKING 判断是否类型检查直接import keras site-packages&#x2F;tensorflow&#x2F;init.py near line 387 左右 123456_keras_module = &quot;keras.api._v2.keras&quot;keras = _LazyLoader(&quot;keras&quot;, globals(), _keras_module)_module_dir = _module_util.get_parent_dir_for_name(_keras_module)if _module_dir: _current_module.__path__ = [_module_dir] + _current_module.__path__setattr(_current_module, &quot;keras&quot;, keras) 12345678910import typing as _typingif _typing.TYPE_CHECKING: from keras.api._v2 import keraselse: _keras_module = &quot;keras.api._v2.keras&quot; keras = _LazyLoader(&quot;keras&quot;, globals(), _keras_module) _module_dir = _module_util.get_parent_dir_for_name(_keras_module) if _module_dir: _current_module.__path__ = [_module_dir] + _current_module.__path__ setattr(_current_module, &quot;keras&quot;, keras)","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"pycharm","slug":"tensorflow/pycharm","permalink":"http://devhc.com/categories/tensorflow/pycharm/"}],"tags":[{"name":"pycharm","slug":"pycharm","permalink":"http://devhc.com/tags/pycharm/"},{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"}]},{"title":"JsonCpp Guide","slug":"cpp-libs-jsoncpp","date":"2019-10-11T02:06:12.000Z","updated":"2024-06-24T03:58:21.684Z","comments":true,"path":"cpp/libs/cpp-libs-jsoncpp/","permalink":"http://devhc.com/cpp/libs/cpp-libs-jsoncpp/","excerpt":"","text":"Github Documentation Official ApiDoc 新版用法 jsoncpp WikiBook 该文档是老版本写法 Install Build From Source12345mkdir buildcd buildcmake -DCMAKE_INSTALL_PREFIX=/opt/cpplibs ..makemake install 使用包管理工具 缺点不能灵活控制版本apt-get install libjsoncpp-dev Examplesjson_v1.cpp123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;json/json.h&gt;#include &lt;string&gt;using namespace std;int main(int argc, char* argv[])&#123; string jsonStr = &quot;&#123;\\&quot;name\\&quot;: \\&quot;xxx\\&quot;, \\&quot;array\\&quot;: [\\&quot;a\\&quot;, \\&quot;b\\&quot;, \\&quot;c\\&quot;], \\&quot;obj\\&quot;: &#123;\\&quot;k\\&quot; : \\&quot;v\\&quot;&#125;&#125;&quot;; Json::Reader reader; Json::Value value; if (reader.parse(jsonStr, value)) &#123; // read str field cout&lt;&lt;value[&quot;name&quot;].asString()&lt;&lt;endl; // read array field for(int i = 0; i &lt; value[&quot;array&quot;].size(); i++)&#123; cout&lt;&lt;i&lt;&lt;&quot;:&quot;&lt;&lt;value[&quot;array&quot;][i].asString()&lt;&lt;endl; &#125; // read obj field cout&lt;&lt;value[&quot;obj&quot;][&quot;k&quot;].asString()&lt;&lt;endl; &#125; return 0;&#125; compile:g++ -I&#x2F;opt&#x2F;cpplibs&#x2F;include&#x2F; -o json_v1 json_v1.cpp &#x2F;opt&#x2F;cpplibs&#x2F;lib&#x2F;libjsoncpp.a &amp;&amp; .&#x2F;json_v1 output 1234567891011121314json_v1.cpp: In function ‘int main(int, char**)’:json_v1.cpp:20:18: warning: ‘Reader’ is deprecated: Use CharReader and CharReaderBuilder instead [-Wdeprecated-declarations] Json::Reader reader; ^~~~~~In file included from /data/cpplibs/include/jsoncpp/json/json.h:11:0, from json_v1.cpp:10:/data/cpplibs/include/jsoncpp/json/reader.h:35:83: note: declared here class JSONCPP_DEPRECATED(&quot;Use CharReader and CharReaderBuilder instead&quot;) JSON_API Reader &#123; ^~~~~~xxx0:a1:b2:cv 注意这里使用老版本reader api会引起警告 Example New Apijson_v2.cpp1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;json/json.h&gt;#include &lt;string&gt;#include &lt;memory&gt;using namespace std;int main(int argc, char* argv[])&#123; string jsonStr = &quot;&#123;\\&quot;name\\&quot;: \\&quot;xxx\\&quot;, \\&quot;array\\&quot;: [\\&quot;a\\&quot;, \\&quot;b\\&quot;, \\&quot;c\\&quot;], \\&quot;obj\\&quot;: &#123;\\&quot;k\\&quot; : \\&quot;v\\&quot;&#125;&#125;&quot;; Json::Value value; // parse JSONCPP_STRING errs; Json::CharReaderBuilder readerBuilder; std::unique_ptr&lt;Json::CharReader&gt; const reader(readerBuilder.newCharReader()); bool res = reader-&gt;parse(jsonStr.c_str(), jsonStr.c_str() + jsonStr.length(), &amp;value, &amp;errs); if (res &amp;&amp; errs.empty()) &#123; // read str field cout&lt;&lt;value[&quot;name&quot;].asString()&lt;&lt;endl; // read array field for(int i = 0; i &lt; value[&quot;array&quot;].size(); i++)&#123; cout&lt;&lt;i&lt;&lt;&quot;:&quot;&lt;&lt;value[&quot;array&quot;][i].asString()&lt;&lt;endl; &#125; // read obj field cout&lt;&lt;value[&quot;obj&quot;][&quot;k&quot;].asString()&lt;&lt;endl; &#125;else&#123; cout&lt;&lt;&quot;json parse fail:&quot;&lt;&lt;errs&lt;&lt;endl; &#125; return 0;&#125; 源码方式g++ -I&#x2F;opt&#x2F;cpplibs&#x2F;include&#x2F; -o json_v2 json_v2.cpp &#x2F;opt&#x2F;cpplibs&#x2F;lib&#x2F;libjsoncpp.a &amp;&amp; .&#x2F;json_v2 如果使用包管理共享库方式编译g++ -I&#x2F;usr&#x2F;include&#x2F;jsoncpp -ljsoncpp -o json_v2 json_v2.cpp静态库方式编译g++ -I&#x2F;usr&#x2F;include&#x2F;jsoncpp -ljsoncpp -o json_v2 json_v2.cpp &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjsoncpp.a output 已经没有警告了 12345xxx0:a1:b2:cv Json::Value 判断类型 bool isXxx() isNull isBool isInt isInt64 isNumbeic isString isObject isArray 转换原生类型 asXxx() asInt asInt64 asBool asDouble 访问字段 [] 方式访问 val[“field”] key是否存在 isMember(“field”) 转成格式化字符串 String toStyledString() 流操作 读取: Json::parseFromStream 输出: writeString1234567Json::StreamWriterBuilder wbuilder; wbuilder[&quot;indentation&quot;] = &quot;\\t&quot;;std::string document = Json::writeString(wbuilder, root);Json::CharReaderBuilder rbuilder;rbuilder[&quot;collectComments&quot;] = false;std::string errs;bool ok = Json::parseFromStream(rbuilder, std::cin, &amp;root, &amp;errs);","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"libs","slug":"cpp/libs","permalink":"http://devhc.com/categories/cpp/libs/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"Tensorflow print","slug":"tensorflow-tf-print","date":"2019-09-27T11:39:10.000Z","updated":"2024-06-24T03:58:21.691Z","comments":true,"path":"tensorflow/framework/tensorflow-tf-print/","permalink":"http://devhc.com/tensorflow/framework/tensorflow-tf-print/","excerpt":"","text":"tf.Print 该op已经deprecated,目前已经不建议使用 以前大部分使用tf.Print 打印变量类似一下代码 1234some_op = ...some_op = tf.Print(some_op, [tf.shape(some_op), &quot;some_op:&quot;])...sess.run(some_op) 这个API已经在新的里面被移除了,使用小写tf.print代替,但是操作方式有点差异 tf.printtf.print没有是一个print operation 12345678910111213141516171819202122import tensorflow as tfimport sysprint_ops = []def print_op(*inputs , **kwargs): print_ops.append(tf.print(*inputs, **kwargs))x = tf.range(10)print_op(&quot;x&quot;, x)print_op(&quot;x_no_summarize&quot;, x, summarize = -1)print_op(&quot;x_output_stream&quot;, x, output_stream = sys.stdout)# tf1.13开始支持 文件 file:// 开头print_op(&quot;x_file&quot;, x, output_stream = &quot;file:///tmp/debug.log&quot;)with tf.Session() as sess: with tf.control_dependencies(print_ops): b = x * 3 print(sess.run(b)) x [0 1 2 … 7 8 9]x_no_summarize [0 1 2 3 4 5 6 7 8 9]x_output_stream [0 1 2 … 7 8 9][ 0 3 6 9 12 15 18 21 24 27] 12cat /tmp/debug.log x_file [0 1 2 ... 7 8 9] tf.print eager 模式 单个tensor 123tf.compat.v1.enable_eager_execution()tensor = tf.range(10)tf.print(tensor, output_stream=sys.stderr) 多个tensor 123tf.compat.v1.enable_eager_execution()tensor = tf.range(10)tf.print(&quot;tensors:&quot;, tensor, &#123;2: tensor * 2&#125;, output_stream=sys.stdout) 函数内 1234567891011import tensorflow as tfimport systf.enable_eager_execution()@tf.contrib.eager.defundef f(): tensor = tf.range(10) tf.print(&quot;debug:&quot;, tensor, output_stream=sys.stderr) return tensorrange_tensor = f()","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"framework","slug":"tensorflow/framework","permalink":"http://devhc.com/categories/tensorflow/framework/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"}]},{"title":"微积分","slug":"math-2019-09-26-calculas","date":"2019-09-26T15:14:54.000Z","updated":"2024-06-24T03:58:21.688Z","comments":true,"path":"math/math-2019-09-26-calculas/","permalink":"http://devhc.com/math/math-2019-09-26-calculas/","excerpt":"","text":"微积分3Blue1Brown 微积分的本质bilibili 极限和无穷小导数一个函数在某一点的导数描述了这个函数在这一点附近的变化率导数的本质是通过极限的概念对函数进行局部的线性逼近。当函数 ${\\displaystyle f}$ 的自变量在一点 ${\\displaystyle x_{0}} $上产生一个增量 ${\\displaystyle h}$ 时，函数输出值的增量与自变量增量 ${\\displaystyle h}$的比值在 ${\\displaystyle h}$趋于0时的极限如果存在，即为 ${\\displaystyle f}$在 ${\\displaystyle x_{0}}$处的导数，记作 ${\\displaystyle f’(x_{0})}$、 ${\\displaystyle {\\frac {\\mathrm {d} f}{\\mathrm {d} x}}(x_{0})}$或 $\\left.{\\frac {d f}{d x}}\\right|{x&#x3D;x_{0}}$ 导数的定义：f在x0点的导数$$ f’(x_0)&#x3D;\\lim_{x \\to x_0}\\frac{f(x)-f(x_0)}{x - x_0} $$ 几何意义：相当于曲线该点切线斜率 几何意义 P0点斜率为$\\alpha$,在微分中让x变化一个很小的一个值$\\Delta x$,y变化了$\\Delta y$, 当$\\Delta x$变的无穷小时候,$\\frac{\\Delta y}{\\Delta x}$就逼近该点的真实斜率$\\tan \\alpha&#x3D;\\lim_{\\Delta x \\to 0} \\tan \\varphi&#x3D;\\lim_{\\Delta x \\to 0} \\frac{f(x_0 + \\Delta x)-f(x_0)}{\\Delta x}$$$ \\Delta x\\to 0， \\varphi \\to \\alpha $$ 微分微分学主要研究的是在函数自变量变化时如何确定函数值的瞬时变化率（导数或微商）。换言之，计算 导数 的方法就叫 微分 积分积分是微分的逆运算，即从导数推算出原函数，又分为定积分与不定积分。 定积分: 几何意义等价函数下方面积 $\\int_a^b f(x),\\mathrm{d}x$ 不定积分 原函数 第一基本定理设 $ a,b\\in {\\mathbb {R}}$， $ {\\displaystyle f:[a,b]\\mapsto \\mathbb {R} }$为连续函数，对所有的 $ x\\in [a,b]$，定义函数 F 如下： ${\\displaystyle F(x)&#x3D;\\int _{a}^{x}f(t)dt}$则 F 在闭区间 [a,b] 连续，并在开区间 (a, b)可微， 且对所有在开区间 (a, b) 中的 x，有 $ F’(x)&#x3D;f(x)$ 第二基本定理：如果函数 x f是闭区间 [a,b] 上的连续函数，F 是 f 在 [a,b] 上的一个反导函数，那么有${\\displaystyle \\int _{a}^{b}f(x),\\mathrm {d} x&#x3D;F(b)-F(a)} $ Fundamental_theorem_of_calculus_(animation) 偏导数一个多变量的函数的偏导数（英语：partial derivative）是它关于其中一个变量的导数，而保持其他变量恒定（相对于全导数，在其中所有变量都允许变化）∂代表偏导符号,是一个弯曲的d，称为偏导数符号。为了把它与字母d区分，∂有时读作“der”、“del”、“dah”或“偏”，而不是“dee”函数f可以解释为y为自变量而x为常数的函数： $f(x,y) &#x3D; f_x(y) &#x3D; x^2 + xy + y^2$f在y方向上的变化： $\\frac {\\partial f}{\\partial y}(x,y)&#x3D;x+2y$ 符号 d: 微分学中的符号dx,dy等,是由莱布尼茨首先使用.d源自拉丁语中“差”(Differentia)的第一个字母 $\\int$: 积分符号亦由莱布尼茨所创,它是拉丁语”总和”(Summa)的第一个字母s的伸长(和Σ有相同的意义) 常见导数 幂函数的导数： $\\frac{d}{dx}x^{r}&#x3D;rx^{r-1}$ 指数函数导数 是它自 指数函数:$e^{x}$: $\\frac{d}{dx}e^x&#x3D;e^{x}$ 一般的指数函数:$\\frac{d}{dx}a^x &#x3D; \\ln(a)a^x$ 三角函数的导数:仍然是三角函数,或者由三角函数构成 $ \\frac {d}{dx}\\sin(x)&#x3D;\\cos(x) $ $ \\frac {d}{dx}\\cos(x)&#x3D;-\\sin(x)$ $ \\frac {d}{dx}\\tan(x)&#x3D;\\sec ^{2}(x)&#x3D;{\\frac {1}{\\cos ^{2}(x)}}&#x3D;1+\\tan ^{2}(x)$ $ \\frac {d }{d x}\\cot(x)&#x3D;-\\csc ^{2}(x)&#x3D;-{\\frac {1}{\\sin ^{2}(x)}} $ 链式法则 $(f\\circ g)’(x)&#x3D;f’(g(x))g’(x).$ 考虑函数z &#x3D; f(x, y)，其中x &#x3D; g(t)，y &#x3D; h(t)，g(t)和h(t)是可微函数，那么： ${\\ dz \\over dt}&#x3D;{\\partial z \\over \\partial x}{dx \\over dt}+{\\partial z \\over \\partial y}{dy \\over dt}.$ 应用泰勒级数$f(x)&#x3D;f(a)+{\\frac {f’(a)}{1!}}(x-a)+{\\frac {f^2(a)}{2!}}(x-a)^{2}+\\cdots +{\\frac {f^(a)}{n!}}(x-a)^{n}+R_{n}(x)$一般在机器学习中用到的是 一阶展开:(梯度下降) $f(x)&#x3D;f(a)+f’(a)(x-a)$ 二阶展开:(牛顿法) $f(x)&#x3D;f(a)+f’(a)(x-a)+{\\frac {f^2(a)}{2}}(x-a)^{2}$ 泰勒公式的目的是为了用一个多项式逼近一个函数让多项式每一阶导数和函数的导数相同拉格朗日型余项:$R_{n}(x)&#x3D;{\\frac {f^NaN(\\theta )}{(n+1)!}}(x-a)^NaN$","categories":[{"name":"math","slug":"math","permalink":"http://devhc.com/categories/math/"}],"tags":[{"name":"math","slug":"math","permalink":"http://devhc.com/tags/math/"}]},{"title":"install kubernetes in china","slug":"k8s-install-k8s","date":"2019-09-09T02:41:21.000Z","updated":"2024-06-24T03:58:21.686Z","comments":true,"path":"container/kubernetes/k8s-install-k8s/","permalink":"http://devhc.com/container/kubernetes/k8s-install-k8s/","excerpt":"","text":"install kubernets in china官方文档 1. 环境相关设置 关闭swap然后需要禁用swap文件，这是Kubernetes的强制步骤。实现它很简单，编辑&#x2F;etc&#x2F;fstab文件，注释掉引用swap的行 去掉开机挂载swap如果不重启 可以sudo swapoff -a 可以直接关掉对于禁用swap内存，主要是为了性能考虑，具体原因可以查看Github上的Issue：Kubelet&#x2F;Kubernetes should work with Swap Enabled。 关闭SELinux，修改SELINUX属性 #setenforce 0#vi &#x2F;etc&#x2F;sysconfig&#x2F;selinuxSELINUX&#x3D;disabled 设置iptables #vi &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.confnet.bridge.bridge-nf-call-ip6tables &#x3D; 1net.bridge.bridge-nf-call-iptables &#x3D; 1vm.swappiness&#x3D;0 同iptablessysctl –system 2. install dockeruse aliyun docker repo 1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 3. install kubelets kubeadm kubectl1234567891011121314install_dep()&#123; cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=1repo_gpgcheck=1gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF setenforce 0 yum install -y kubelet kubeadm kubectl systemctl enable kubelet &amp;&amp; systemctl start kubelet&#125; 4. 初始化master节点首选 配置pod network 1234567891011cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf&#123;&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;flannel&quot;,&quot;delegate&quot;: &#123;&quot;isDefaultGateway&quot;: true&#125;&#125;EOFmkdir /usr/share/oci-umount/oci-umount.d -pmkdir /run/flannel/cat &lt;&lt;EOF&gt; /run/flannel/subnet.envFLANNEL_NETWORK=10.244.0.0/16FLANNEL_SUBNET=10.244.0.1/24FLANNEL_MTU=1450FLANNEL_IPMASQ=trueEOF 初始化master集群注意在国内一定要设置 –image-repository 不然默认gcr.io 拉不下来推荐azure (支持gcr.io,quay.io) k8s.gcr.io微软azure镜像&#x3D; gcr.azk8s.cn&#x2F;google_containers&#x3D; registry.aliyuncs.com&#x2F;google_containers quay.ioquay.azk8s.cn gcr.io 镜像有几个 一个是阿里云，还有一个是微软azure(推荐azure) 1234567kubeadm init --pod-network-cidr=10.244.0.0/16 --image-repository gcr.azk8s.cn/google_containers --kubernetes-version v1.15.3 mkdir -p $HOME/.kubesudo cp -i -f /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config 安装网络pods 插件 有多种选择 这里使用是flannel 1kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/62e44c867a2846fefb68bd5f178daf4da3095ccb/Documentation/kube-flannel.yml 安装dashboard 1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml 执行完会有一个join的命令用于新node加入集群 可以记下来如果之后忘记可以在master节点执行 kubeadm token create –print-join-command 获得 执行kubectl get nodes 查看节点是否正常查看日志journalctl -f -u kubelet node在子节点安装kubeadm,kubectl,kubelet后执行master安装时候出现的join 命令kubeadm join ip:port –token YOU_TOKEN –discovery-token-ca-cert-hash sha256:YOU_TOKEN_HASH","categories":[{"name":"container","slug":"container","permalink":"http://devhc.com/categories/container/"},{"name":"kubernetes","slug":"container/kubernetes","permalink":"http://devhc.com/categories/container/kubernetes/"}],"tags":[{"name":"kubernetes","slug":"kubernetes","permalink":"http://devhc.com/tags/kubernetes/"}]},{"title":"Git","slug":"tools-git","date":"2019-03-20T08:31:22.000Z","updated":"2024-06-24T03:58:21.691Z","comments":true,"path":"linux/tools/git/tools-git/","permalink":"http://devhc.com/linux/tools/git/tools-git/","excerpt":"","text":"Git 技巧不同域名使用不同秘钥修改~&#x2F;.ssh&#x2F;config 12345Host example.com IdentityFile ~/.ssh/id_rsa_exampleHost github.com IdentityFile ~/.ssh/id_rsa_github git 多commit 支持区分公司commit信息和个人commit信息单独每次用git config 改很麻烦可以用git Include 条件引入小技巧达到比如公司git有强制commit信息要求 修改~&#x2F;.gitconfig 123456[include] path = /home/your_name/.gitconfig-default[includeIf &quot;gitdir:/home/your_name/workspaces/**&quot;] path = /home/your_name/.gitconfig-corp ~&#x2F;.gitconfig-default 保留默认commit配置~&#x2F;.gitconfig-corp workspaces 目录下面使用公司commit配置 1234567891011cat ~/.gitconfig-default[user] email = custom-email@xxxxx.com name = xxxxcat ~/.gitconfig-corp[user] email = xxxx@corp-xxx.com name = xxxx 给github单独设置代理 http&#x2F;https 代理 (自己有单独代理或公司代理)比如我自己已经有了科学上网代理 本地监听1080 socks5 代理修改~&#x2F;.gitconfig12345[github &quot;com.http&quot;] proxy = socks5://127.0.0.1:1080[github &quot;com.https&quot;] proxy = socks5://127.0.0.1:1080[ 如果是http代理 换成proxy &#x3D; http://host:port 即可 命令行git神器 lazygit使用 stash如果您需要在切换分支之前保存未提交的更改，可以使用 git stash 命令。这将把未提交的更改保存在一个堆栈中，以便稍后恢复。 示例： 12345678# 保存未提交的更改git stash# 恢复未提交的更改git stash apply# 从stash堆栈弹出(remove from stash list)git stash pop 使用 rebase使用 git rebase 命令可以将当前分支的更改应用到另一个分支上。这可以帮助您保持分支历史记录的整洁和有序。 示例： 123# 将当前分支的更改应用到另一个分支上git checkout another-branchgit rebase current-branch 使用 amend如果您需要修改最近一次提交的提交信息或者添加一些遗漏的文件，可以使用 git commit --amend 命令。 示例： 123456# 修改最近一次提交的提交信息git commit --amend -m &quot;New commit message&quot;# 添加遗漏的文件git add missed-filegit commit --amend 使用 reflog如果您不小心删除了一个分支或者提交，可以使用 git reflog 命令来查找并恢复它们。 示例： 12345# 查找删除的分支git reflog | grep deleted-branch# 恢复删除的分支git checkout -b recovered-branch HEAD@&#123;1&#125; 使用 tag使用 git tag 命令可以给特定的提交打上标签，以便稍后更容易地找到。 示例： 12# 给特定的提交打上标签git tag v1.0.0 使用 submodule如果您需要将一个 Git 仓库作为另一个 Git 仓库的一部分使用，可以使用 git submodule 命令。 示例： 12345# 添加一个子模块git submodule add https://github.com/user/repo.git# 更新子模块git submodule update --remote 使用 bisect如果您需要找到导致代码出现问题的提交，可以使用 git bisect 命令。这将帮助您快速缩小问题所在的提交范围。 示例： 1234567891011# 开始二分查找git bisect start# 标记当前提交为有问题的提交git bisect bad# 标记一个已知没有问题的提交git bisect good v1.0.0# 继续二分查找git bisect run test.sh 使用 cherry-pick如果您需要将一个提交应用到一个不同的分支上，可以使用 git cherry-pick 命令。 示例： 12# 将一个提交应用到当前分支上git cherry-pick abc123 使用 gitignore创建一个 .gitignore 文件，可以在提交时忽略特定的文件或目录，以保持代码库的整洁。gitignore.io 是一个在线生成ignore模板网站 示例： 12# 忽略所有 .log 文件*.log neovim git plugins gitsigns show file git status (in nvim-tree) toggle line blame","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"tools","slug":"linux/tools","permalink":"http://devhc.com/categories/linux/tools/"},{"name":"git","slug":"linux/tools/git","permalink":"http://devhc.com/categories/linux/tools/git/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"tools","slug":"tools","permalink":"http://devhc.com/tags/tools/"},{"name":"git","slug":"git","permalink":"http://devhc.com/tags/git/"}]},{"title":"JPA JOIN","slug":"spring-jpa","date":"2019-03-08T10:10:00.000Z","updated":"2024-06-24T03:58:21.691Z","comments":true,"path":"spring/spring-jpa/","permalink":"http://devhc.com/spring/spring-jpa/","excerpt":"","text":"JPA中的Join操作在使用JPA进行数据查询时，经常需要使用到Join操作，以获取相关联的数据。JPA中提供了三种Join类型：INNER JOIN、LEFT JOIN和RIGHT JOIN。本文将介绍这三种Join类型的语法，以及在Spring中如何使用JPA进行Join操作。 Join类型INNER JOININNER JOIN是最常用的Join类型，它只返回两个表中都存在的数据。语法如下： 1234SELECT *FROM table1INNER JOIN table2ON table1.column = table2.column; 在JPA中，INNER JOIN可以使用JOIN或INNER JOIN关键字进行表示。例如，假设我们有两个实体类Department和Employee，它们之间的关系是一对多，即一个部门拥有多个员工。我们可以使用以下代码进行INNER JOIN操作： 123456@Repositorypublic interface DepartmentRepository extends JpaRepository&lt;Department, Long&gt; &#123; @Query(&quot;SELECT d, e FROM Department d JOIN d.employees e&quot;) List&lt;Object[]&gt; findDepartmentAndEmployee();&#125; 在上面的代码中，我们使用了JOIN关键字将Department和Employee进行关联，查询结果是一个Object[]数组，其中第一个元素是Department对象，第二个元素是Employee对象。 LEFT JOINLEFT JOIN返回左表中所有的数据，以及右表中与左表匹配的数据。如果右表中没有匹配的数据，则返回NULL。语法如下： 1234SELECT *FROM table1LEFT JOIN table2ON table1.column = table2.column; 在JPA中，LEFT JOIN可以使用LEFT JOIN或LEFT OUTER JOIN关键字进行表示。例如，假设我们有两个实体类Customer和Order，它们之间的关系是一对多，即一个顾客可以下多个订单。我们可以使用以下代码进行LEFT JOIN操作： 123456@Repositorypublic interface CustomerRepository extends JpaRepository&lt;Customer, Long&gt; &#123; @Query(&quot;SELECT c, o FROM Customer c LEFT JOIN c.orders o&quot;) List&lt;Object[]&gt; findCustomerAndOrder();&#125; 在上面的代码中，我们使用了LEFT JOIN关键字将Customer和Order进行关联，查询结果是一个Object[]数组，其中第一个元素是Customer对象，第二个元素是Order对象。 RIGHT JOINRIGHT JOIN返回右表中所有的数据，以及左表中与右表匹配的数据。如果左表中没有匹配的数据，则返回NULL。语法如下： 1234SELECT *FROM table1RIGHT JOIN table2ON table1.column = table2.column; 在JPA中，RIGHT JOIN可以使用RIGHT JOIN或RIGHT OUTER JOIN关键字进行表示。例如，假设我们有两个实体类Order和Product，它们之间的关系是多对一，即多个订单对应一个产品。我们可以使用以下代码进行RIGHT JOIN操作： 123456@Repositorypublic interface OrderRepository extends JpaRepository&lt;Order, Long&gt; &#123; @Query(&quot;SELECT o, p FROM Order o RIGHT JOIN o.product p&quot;) List&lt;Object[]&gt; findOrderAndProduct();&#125; 在上面的代码中，我们使用了RIGHT JOIN关键字将Order和Product进行关联，查询结果是一个Object[]数组，其中第一个元素是Order对象，第二个元素是Product对象。 在Spring中使用JPA进行Join操作在Spring中使用JPA进行Join操作非常容易，只需要在Repository中定义一个带有@Query注解的方法即可。例如，假设我们有两个实体类Department和Employee，它们之间的关系是一对多，即一个部门拥有多个员工。我们可以使用以下代码进行INNER JOIN操作： 123456@Repositorypublic interface DepartmentRepository extends JpaRepository&lt;Department, Long&gt; &#123; @Query(&quot;SELECT d, e FROM Department d JOIN d.employees e&quot;) List&lt;Object[]&gt; findDepartmentAndEmployee();&#125; 在上面的代码中，我们使用了@Query注解定义了一个查询方法，其中的查询语句是一个使用JOIN关键字进行关联的语句。查询结果是一个Object[]数组，其中第一个元素是Department对象，第二个元素是Employee对象。 除了使用JOIN关键字进行关联外，我们还可以使用LEFT JOIN和RIGHT JOIN关键字进行关联。例如，假设我们有两个实体类Customer和Order，它们之间的关系是一对多，即一个顾客可以下多个订单。我们可以使用以下代码进行LEFT JOIN操作： 123456@Repositorypublic interface CustomerRepository extends JpaRepository&lt;Customer, Long&gt; &#123; @Query(&quot;SELECT c, o FROM Customer c LEFT JOIN c.orders o&quot;) List&lt;Object[]&gt; findCustomerAndOrder();&#125; 在上面的代码中，我们使用了@Query注解定义了一个查询方法，其中的查询语句是一个使用LEFT JOIN关键字进行关联的语句。查询结果是一个Object[]数组，其中第一个元素是Customer对象，第二个元素是Order对象。 类似地，我们还可以使用RIGHT JOIN关键字进行关联。例如，假设我们有两个实体类Order和Product，它们之间的关系是多对一，即多个订单对应一个产品。我们可以使用以下代码进行RIGHT JOIN操作： 123456@Repositorypublic interface OrderRepository extends JpaRepository&lt;Order, Long&gt; &#123; @Query(&quot;SELECT o, p FROM Order o RIGHT JOIN o.product p&quot;) List&lt;Object[]&gt; findOrderAndProduct();&#125; 在上面的代码中，我们使用了@Query注解定义了一个查询方法，其中的查询语句是一个使用RIGHT JOIN关键字进行关联的语句。查询结果是一个Object[]数组，其中第一个元素是Order对象，第二个元素是Product对象。 使用Criteria Query进行Join操作除了使用JPQL语句进行Join操作外，我们还可以使用Criteria Query进行Join操作。Criteria Query是JPA提供的一种类型安全的查询API，它可以在不使用字符串的情况下构建查询语句。例如，假设我们有两个实体类Department和Employee，它们之间的关系是一对多，即一个部门拥有多个员工。我们可以使用以下代码进行INNER JOIN操作： 123456789101112@Repositorypublic interface DepartmentRepository extends JpaRepository&lt;Department, Long&gt; &#123; default List&lt;Object[]&gt; findDepartmentAndEmployee() &#123; CriteriaBuilder builder = getEntityManager().getCriteriaBuilder(); CriteriaQuery&lt;Object[]&gt; query = builder.createQuery(Object[].class); Root&lt;Department&gt; department = query.from(Department.class); Join&lt;Department, Employee&gt; employee = department.join(&quot;employees&quot;); query.select(builder.array(department, employee)); return getEntityManager().createQuery(query).getResultList(); &#125;&#125; 在上面的代码中，我们使用了Criteria Query API构建了一个INNER JOIN操作，其中的join方法表示进行关联操作，select方法表示查询结果的类型为一个Object[]数组。 类似地，我们还可以使用Criteria Query API进行LEFT JOIN和RIGHT JOIN操作。例如，假设我们有两个实体类Customer和Order，它们之间的关系是一对多，即一个顾客可以下多个订单。我们可以使用以下代码进行LEFT JOIN操作： 123456789101112@Repositorypublic interface CustomerRepository extends JpaRepository&lt;Customer, Long&gt; &#123; default List&lt;Object[]&gt; findCustomerAndOrder() &#123; CriteriaBuilder builder = getEntityManager().getCriteriaBuilder(); CriteriaQuery&lt;Object[]&gt; query = builder.createQuery(Object[].class); Root&lt;Customer&gt; customer = query.from(Customer.class); Join&lt;Customer, Order&gt; order = customer.join(&quot;orders&quot;, JoinType.LEFT); query.select(builder.array(customer, order)); return getEntityManager().createQuery(query).getResultList(); &#125;&#125; 在上面的代码中，我们使用了Criteria Query API构建了一个LEFT JOIN操作，其中的JoinType.LEFT表示进行左连接操作。 类似地，我们还可以使用Criteria Query API进行RIGHT JOIN操作。例如，假设我们有两个实体类Order和Product，它们之间的关系是多对一，即多个订单对应一个产品。我们可以使用以下代码进行RIGHT JOIN操作： 123456789101112@Repositorypublic interface OrderRepository extends JpaRepository&lt;Order, Long&gt; &#123; default List&lt;Object[]&gt; findOrderAndProduct() &#123; CriteriaBuilder builder = getEntityManager().getCriteriaBuilder(); CriteriaQuery&lt;Object[]&gt; query = builder.createQuery(Object[].class); Root&lt;Order&gt; order = query.from(Order.class); Join&lt;Order, Product&gt; product = order.join(&quot;product&quot;, JoinType.RIGHT); query.select(builder.array(order, product)); return getEntityManager().createQuery(query).getResultList(); &#125;&#125; 在上面的代码中，我们使用了Criteria Query API构建了一个RIGHT JOIN操作，其中的JoinType.RIGHT表示进行右连接操作。 总结JPA中提供了三种Join类型：INNER JOIN、LEFT JOIN和RIGHT JOIN。在Spring中，我们可以使用JPQL语句或Criteria Query API进行Join操作。无论是哪种方式，都可以轻松地进行多表查询，以获取相关联的数据。","categories":[{"name":"spring","slug":"spring","permalink":"http://devhc.com/categories/spring/"}],"tags":[{"name":"jpa","slug":"jpa","permalink":"http://devhc.com/tags/jpa/"},{"name":"spring","slug":"spring","permalink":"http://devhc.com/tags/spring/"}],"author":"wanghch"},{"title":"Tensorflow Hdfs 支持","slug":"tensorflow-tf-hdfs","date":"2019-03-07T10:19:10.000Z","updated":"2024-07-09T08:45:11.136Z","comments":true,"path":"tensorflow/framework/tensorflow-tf-hdfs/","permalink":"http://devhc.com/tensorflow/framework/tensorflow-tf-hdfs/","excerpt":"","text":"tensorflow 支持hdfs2.6 开始需要引入 tensorflow io 才能支持viewfs 从 2.6.0 版本开始，您需要将 tensorflow_io 与 tensorflow 一起导入： 12安装方式： pip install tensorflow-io 复制 12import tensorflow as tf import tensorflow_io as tfio HDFS环境变量支持 LD_LIBRARY_PATH必须支持检索到libjvm.so,libhdfs.so CLASSPATH 必须是glob方式才可以 12export CLASSPATH=$(hadoop classpath --glob)export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/amd64/server/:$HADOOP_HOME/native libhdfs 编译以hadoop-2.6.0-src 为例 vim hadoop-common-project&#x2F;hadoop-annotations&#x2F;pom.xml 修改 1.7 改成1.8 mvn -Pdist,native clean package -DskipTests -Dmaven.javadoc.skip&#x3D;true hadoop-2.6.0-src&#x2F;hadoop-common-project&#x2F;hadoop-common&#x2F;pom.xml 找到javahClassName 写入a.txt 1234567891011121314151617&lt;javahClassName&gt;org.apache.hadoop.io.compress.zlib.ZlibCompressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.zlib.ZlibDecompressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.bzip2.Bzip2Compressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.security.JniBasedUnixGroupsMapping&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.nativeio.NativeIO&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.snappy.SnappyCompressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.snappy.SnappyDecompressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.lz4.Lz4Compressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.io.compress.lz4.Lz4Decompressor&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.crypto.OpensslCipher&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.crypto.random.OpensslSecureRandom&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.util.NativeCrc32&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.net.unix.DomainSocket&lt;/javahClassName&gt;&lt;javahClassName&gt;org.apache.hadoop.net.unix.DomainSocketWatcher&lt;/javahClassName&gt; 12cat a.txt|grep -E -o &quot;org.[^&lt;]+&quot; &gt; class.txt class.txt 如下 1234567891011121314151617org.apache.hadoop.io.compress.zlib.ZlibCompressororg.apache.hadoop.io.compress.zlib.ZlibDecompressororg.apache.hadoop.io.compress.bzip2.Bzip2Compressororg.apache.hadoop.io.compress.bzip2.Bzip2Decompressororg.apache.hadoop.security.JniBasedUnixGroupsMappingorg.apache.hadoop.io.nativeio.NativeIOorg.apache.hadoop.io.nativeio.SharedFileDescriptorFactoryorg.apache.hadoop.security.JniBasedUnixGroupsNetgroupMappingorg.apache.hadoop.io.compress.snappy.SnappyCompressororg.apache.hadoop.io.compress.snappy.SnappyDecompressororg.apache.hadoop.io.compress.lz4.Lz4Compressororg.apache.hadoop.io.compress.lz4.Lz4Decompressororg.apache.hadoop.crypto.OpensslCipherorg.apache.hadoop.crypto.random.OpensslSecureRandomorg.apache.hadoop.util.NativeCrc32org.apache.hadoop.net.unix.DomainSocketorg.apache.hadoop.net.unix.DomainSocketWatcher 1cat class.txt |xargs javah -d javah -classpath $(hadoop classpath) 1234cd hadoop-hdfs-project/hadoop-hdfs/src/mkdir build cd buildcmake -DCMAKE_INSTALL_PREFIX=$HOME/hdfs-native -DGENERATED_JAVAH=../javah -DJVM_ARCH_DATA_MODEL=64 -DREQUIRE_LIBWEBHDFS=OFF -DREQUIRE_FUSE=OFF .. 1234libhdfs.sotarget/usr/local/lib/libhdfs.soheader:main/native/libhdfs/hdfs.h libhdfs.so api说明： https://archive.cloudera.com/cdh4/cdh/4/hadoop-2.0.0-cdh4.6.0/hadoop-project-dist/hadoop-hdfs/LibHdfs.html 12345678910111213141516171819#include &lt;cstdio&gt;#include &quot;hdfs.h&quot;int main(int argc, char **argv) &#123; hdfsFS fs = hdfsConnect(&quot;default&quot;, 0); const char* writePath = &quot;/tmp/testfile.txt&quot;; hdfsFile writeFile = hdfsOpenFile(fs, writePath, O_WRONLY|O_CREAT, 0, 0, 0); if(!writeFile) &#123; fprintf(stderr, &quot;Failed to open %s for writing!\\n&quot;, writePath); exit(-1); &#125; char* buffer = &quot;Hello, World!&quot;; tSize num_written_bytes = hdfsWrite(fs, writeFile, (void*)buffer, strlen(buffer)+1); if (hdfsFlush(fs, writeFile)) &#123; fprintf(stderr, &quot;Failed to &#x27;flush&#x27; %s\\n&quot;, writePath); exit(-1); &#125; hdfsCloseFile(fs, writeFile);&#125; 12gcc -o main -Wl,-rpath=&#x27;$ORIGIN/lib&#x27; -Iinclude -Llib main.c -lhdfsCLASSPATH=$(hadoop classpath --glob) ./main","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"framework","slug":"tensorflow/framework","permalink":"http://devhc.com/categories/tensorflow/framework/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"},{"name":"hdfs","slug":"hdfs","permalink":"http://devhc.com/tags/hdfs/"}]},{"title":"ssh 跳板机,Socket 代理","slug":"tools-ssh-proxy","date":"2018-07-15T07:11:55.000Z","updated":"2024-06-24T03:58:21.692Z","comments":true,"path":"linux/ssh/tools-ssh-proxy/","permalink":"http://devhc.com/linux/ssh/tools-ssh-proxy/","excerpt":"SSH Agent forwardingssh -A user@host需要先ssh-add ~&#x2F;.ssh&#x2F;id_rsa 或者修改 ~&#x2F;.ssh&#x2F;config 123Host * ForwardAgent yes ForwardX11 yes 登录之后目标服务器 env会有SSH_AUTH_SOCK 变量记录与本地key通信的socket","text":"SSH Agent forwardingssh -A user@host需要先ssh-add ~&#x2F;.ssh&#x2F;id_rsa 或者修改 ~&#x2F;.ssh&#x2F;config 123Host * ForwardAgent yes ForwardX11 yes 登录之后目标服务器 env会有SSH_AUTH_SOCK 变量记录与本地key通信的socket SSH ProxyCommand 跳板机123mkdir -p ~/.ssh/sockets/ssh-add ~/.ssh/id_rsassh-copy-id 跳板机用户@跳板机服务器 配置~&#x2F;.ssh&#x2F;config 1234567Host *.xxx.com user YOU_SSH_USER ForwardAgent yes ControlMaster auto ControlPath ~/.ssh/sockets/%r@%h-%p ControlPersist 600 ProxyCommand ssh -q -W %h:%p 跳板机用户@跳板机地址 SSH Tunnel Socket5 代理 网页代理ssh -fTND LOCAL_PROXY_PORT 代理服务器用户@代理服务器地址 然后 SwitchyOmega 配置 LOCAL_PROXY_PORT socket5 代理服务 就可以将web 流量通过socket5 转向代理服务器 SSH 跳板访问mysql等其他服务比如mysql 服务器是 1.2.3.4:3306 本地不能 访问但是代理服务器可以访问 ssh -fN -L3306:1.2.3.4:3306 代理服务器用户@代理服务器地址 查看端口情况: lsof -i:3306 host 要写127.0.0.1mysql -P3306 -h127.0.0.1 -uusername -ppassword","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"ssh","slug":"linux/ssh","permalink":"http://devhc.com/categories/linux/ssh/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"ssh","slug":"ssh","permalink":"http://devhc.com/tags/ssh/"}]},{"title":"socket http","slug":"cpp-socket","date":"2018-06-25T10:00:11.000Z","updated":"2024-06-24T03:58:21.685Z","comments":true,"path":"cpp/socket/cpp-socket/","permalink":"http://devhc.com/cpp/socket/cpp-socket/","excerpt":"httpdsocket server &#x3D; socket(PF_INET, SOCK_STREAM, 0) memset struct sockaddr_in name; name.sin_family &#x3D; AF_INET; name.sin_port &#x3D; htons(port); name.sin_addr.s_addr &#x3D; htonl(INADDR_ANY); setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on))) &lt; 0","text":"httpdsocket server &#x3D; socket(PF_INET, SOCK_STREAM, 0) memset struct sockaddr_in name; name.sin_family &#x3D; AF_INET; name.sin_port &#x3D; htons(port); name.sin_addr.s_addr &#x3D; htonl(INADDR_ANY); setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on))) &lt; 0 bind(server,(struct sockaddr *)&amp;name, &amp; namelen) port 如果为0 会sin_port 设置随机端口 listen(server,backlog) while accept client socket pthread_create client socket processs close(server) http 协议 RFC2616","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"socket","slug":"cpp/socket","permalink":"http://devhc.com/categories/cpp/socket/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"socket","slug":"socket","permalink":"http://devhc.com/tags/socket/"}]},{"title":"pthread","slug":"cpp-pthread","date":"2018-06-25T09:12:01.000Z","updated":"2024-06-24T03:58:21.685Z","comments":true,"path":"cpp/thread/cpp-pthread/","permalink":"http://devhc.com/cpp/thread/cpp-pthread/","excerpt":"#pthread 头文件函数声明 123#include&lt;pthread.h&gt;int pthread_create(pthread_t *tidp,const pthread_attr_t *attr,(void*)(*start_rtn)(void*),void *arg);","text":"#pthread 头文件函数声明 123#include&lt;pthread.h&gt;int pthread_create(pthread_t *tidp,const pthread_attr_t *attr,(void*)(*start_rtn)(void*),void *arg); ##编译链接参数-lpthread 返回值若线程创建成功，则返回0。若线程创建失败，则返回出错编号，并且*thread中的内容是未定义的。返回成功时，由tidp指向的内存单元被设置为新创建线程的线程ID。attr参数用于指定各种不同的线程属性。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个万能指针参数arg，如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。linux下用C语言开发多线程程序，Linux系统下的多线程遵循POSIX线程接口，称为pthread。 参数第一个参数为指向线程标识符的指针。第二个参数用来设置线程属性。第三个参数是线程运行函数的起始地址。最后一个参数是运行函数的参数。 注意事项因为pthread并非Linux系统的默认库，而是POSIX线程库。在Linux中将其作为一个库来使用，因此加上 -lpthread（或-pthread）以显式链接该库。函数在执行错误时的错误信息将作为返回值返回，并不修改系统全局变量errno，当然也无法使用perror()打印错误信息。","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"thread","slug":"cpp/thread","permalink":"http://devhc.com/categories/cpp/thread/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"cpp Compile Issues","slug":"cpp-cpp-compile-issues","date":"2018-06-25T08:11:01.000Z","updated":"2024-06-24T03:58:21.684Z","comments":true,"path":"uncategorized/cpp-cpp-compile-issues/","permalink":"http://devhc.com/uncategorized/cpp-cpp-compile-issues/","excerpt":"cpp compile issuesundefined reference to &#96;clock_gettime’1. add -lrt (glibc &lt; 2.17 ldd --version 查看) 1. 如果glibc &gt; 2.17 可以省略","text":"cpp compile issuesundefined reference to &#96;clock_gettime’1. add -lrt (glibc &lt; 2.17 ldd --version 查看) 1. 如果glibc &gt; 2.17 可以省略","categories":[],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"AutoKey 实现自动化输入","slug":"linux-autokey","date":"2018-06-16T10:32:00.000Z","updated":"2024-06-24T03:58:21.687Z","comments":true,"path":"linux/autokey/linux-autokey/","permalink":"http://devhc.com/linux/autokey/linux-autokey/","excerpt":"","text":"AutoKey 实现自动化输入,操作 在linux经常需要按快捷键自动化输入密码或者执行某个命令,可以使用AutoKey这个工具，非常好用 从release 页面下载deb安装 我选择是autokey-gtk_xxxx.all.deb 安装123VERSION=&quot;0.x.x&quot;sudo dpkg --install autokey-common_$&#123;VERSION&#125;_all.deb autokey-gtk_$&#123;VERSION&#125;_all.debsudo apt --fix-broken install 使用autokey自动生成动态码比如更具钥匙串 SECRETS 中 all3n 记录的 oath 秘钥生成动态码发送到输入中比如自动输入谷歌动态码 1234先keyring 设置SECRETSkeyring set [service] [username]例如keyring set SECRETS all3n 新建script 比如 vpn_code 12345import keyringimport oathtoolsecret = keyring.get_password(&quot;SECRETS&quot;, &quot;all3n&quot;)code = oathtool.generate_otp(secret)keyboard.send_keys(code) 右边设置HotKey 比如 alt-shift-] 这样我按快捷键自动输入动态码,其他密码都可以类似操作","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"autokey","slug":"linux/autokey","permalink":"http://devhc.com/categories/linux/autokey/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://devhc.com/tags/shell/"},{"name":"autokey","slug":"autokey","permalink":"http://devhc.com/tags/autokey/"}]},{"title":"Tensorflow Variable 变量","slug":"tensorflow-tf-val","date":"2018-06-14T11:14:13.000Z","updated":"2024-06-24T03:58:21.691Z","comments":true,"path":"tensorflow/framework/tensorflow-tf-val/","permalink":"http://devhc.com/tensorflow/framework/tensorflow-tf-val/","excerpt":"Create tf.get_variable 提供名称 和 shape my_variable &#x3D; tf.get_variable(“my_variable”, [1, 2, 3]) 指定初始化方法 my_int_variable &#x3D; tf.get_variable(“my_int_variable”, [1, 2, 3], dtype&#x3D;tf.int32, initializer&#x3D;tf.zeros_initializer) 1. 通过tensor 初始化，不要指定形状 1. other_variable &#x3D; tf.get_variable(“other_variable”, dtype&#x3D;tf.int32, initializer&#x3D;tf.constant([23, 42]))","text":"Create tf.get_variable 提供名称 和 shape my_variable &#x3D; tf.get_variable(“my_variable”, [1, 2, 3]) 指定初始化方法 my_int_variable &#x3D; tf.get_variable(“my_int_variable”, [1, 2, 3], dtype&#x3D;tf.int32, initializer&#x3D;tf.zeros_initializer) 1. 通过tensor 初始化，不要指定形状 1. other_variable &#x3D; tf.get_variable(“other_variable”, dtype&#x3D;tf.int32, initializer&#x3D;tf.constant([23, 42])) 变量集合1. 程序未链接时候创建 tf.Variable 1. collections 1. tf.GraphKeys.GLOBAL_VARIABLES 多个设备共享 1. tf.GraphKeys.TRAINABLE_VARIABLES 将计算梯度的变量 1. 如果不想参加训练 可以以下两种方式 1. my_local = tf.get_variable(&quot;my_local&quot;, shape=(), collections&#x3D;[tf.GraphKeys.LOCAL_VARIABLES]) 1. my_non_trainable &#x3D; tf.get_variable(“my_non_trainable”, shape&#x3D;(), trainable&#x3D;False) 1. 添加 不需要显示创建 1. tf.add_to_collection(“my_collection_name”, my_local) 1. 获取集合变量 1. tf.get_collection(“my_collection_name”) 指定变量放置设备1. 放在第2快GPU上 12with tf.device(&quot;/device:GPU:1&quot;): v = tf.get_variable(&quot;v&quot;, [1]) 1. 分布式 1234567cluster_spec = &#123; &quot;ps&quot;: [&quot;ps0:2222&quot;, &quot;ps1:2222&quot;], &quot;worker&quot;: [&quot;worker0:2222&quot;, &quot;worker1:2222&quot;, &quot;worker2:2222&quot;] &#125;with tf.device(tf.train.replica_device_setter(cluster=cluster_spec)): v = tf.get_variable(&quot;v&quot;, shape=[20, 20]) 变量初始化 变量必须初始化才能使用 显式初始化(自己创建图和会话) session.run(tf.global_variables_initializer()) 初始化 tf.GraphKeys.GLOBAL_VARIABLES tf.contrib.slim,tf.estimator.Estimator,Keras 等高级框架会自动初始化 初始化指定变量 session.run(my_variable.initializer) 查询未初始化 print(session.run(tf.report_uninitialized_variables())) Variable &amp;&amp; get_variable Variable 会处理冲突，get_variable 不会1 .Variable 每次会重新创建对象 reuse 无关，get_variable 会之前对象返回 Scope tf.variable_scope 可以让变量有相同的命名，包括tf.get_variable得到的变量，还有tf.Variable的变量 tf.name_scope 为了管理变量 可以让变量有相同的命名，只是限于tf.Variable的变量 get_variable 会忽略name_scope","categories":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"framework","slug":"tensorflow/framework","permalink":"http://devhc.com/categories/tensorflow/framework/"}],"tags":[{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"}]},{"title":"Maven 使用技巧","slug":"java-maven-tips","date":"2018-05-30T06:13:55.000Z","updated":"2024-06-24T03:58:21.686Z","comments":true,"path":"java/tools/java-maven-tips/","permalink":"http://devhc.com/java/tools/java-maven-tips/","excerpt":"Maven 使用技巧 多module,分stage 分开打包 目录结构 (a,b 依赖common) assembly commont a b pom.xml assembly&#x2F;pom.xml 通过参数-Ddeploy.app&#x3D;a 控制哪个模块","text":"Maven 使用技巧 多module,分stage 分开打包 目录结构 (a,b 依赖common) assembly commont a b pom.xml assembly&#x2F;pom.xml 通过参数-Ddeploy.app&#x3D;a 控制哪个模块 1234567891011121314151617181920212223242526272829303132333435 &lt;properties&gt; &lt;deploy.app&gt;a&lt;/deploy.app&gt; &lt;deploy.stage&gt;test&lt;/deploy.stage&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.xxx&lt;/groupId&gt; &lt;artifactId&gt;xxxx-$&#123;deploy.app&#125;&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;descriptor&gt;src/main/assembly/$&#123;deploy.app&#125;.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;outputDirectory&gt;$&#123;project.parent.basedir&#125;/target&lt;/outputDirectory&gt; &lt;finalName&gt;xxxx-$&#123;deploy.app&#125;-assembly-$&#123;project.parent.version&#125;&lt;/finalName&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;assembly-deploy-package&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 1. src/main/assembly/xx.xml 123456789101112131415161718192021222324252627282930313233343536373839&lt;assembly&gt; &lt;id&gt;deploy&lt;/id&gt; &lt;formats&gt; &lt;format&gt;tar.gz&lt;/format&gt; &lt;/formats&gt; &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt; &lt;dependencySets&gt; &lt;dependencySet&gt; &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt; &lt;includes&gt; &lt;include&gt;com.xxxx:xxx-$&#123;deploy.app&#125;&lt;/include&gt; &lt;/includes&gt; &lt;/dependencySet&gt; &lt;/dependencySets&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/common&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/$&#123;deploy.app&#125;/common&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/$&#123;deploy.app&#125;/$&#123;deploy.stage&#125;&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt; &lt;fileMode&gt;0755&lt;/fileMode&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/$&#123;deploy.app&#125;/src/main/scripts&lt;/directory&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;outputDirectory&gt;/libs&lt;/outputDirectory&gt; &lt;directory&gt;$&#123;project.parent.basedir&#125;/$&#123;deploy.app&#125;/target/lib&lt;/directory&gt; &lt;/fileSet&gt; &lt;/fileSets&gt;&lt;/assembly&gt; 1. 需要在module pom.xml plugin 加上 123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-dependencies&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;phase&gt;prepare-package&lt;/phase&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt; &lt;includeScope&gt;runtime&lt;/includeScope&gt; &lt;excludeScope&gt;test,provided&lt;/excludeScope&gt; &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt; &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt; &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; 1. 编译a test 包:mvn clean package -am -pl assembly -Ddeploy.app=a -Ddeploy.stage=test 1. 编译b prod 包:mvn clean package -am -pl assembly -Ddeploy.app=b -Ddeploy.stage=prod","categories":[{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://devhc.com/tags/maven/"},{"name":"compile","slug":"compile","permalink":"http://devhc.com/tags/compile/"}]},{"title":"Linux 使用davmail thunderbird 连接 outlook exchange","slug":"tools-davmail-setup","date":"2018-05-30T06:01:12.000Z","updated":"2024-06-24T03:58:21.691Z","comments":true,"path":"linux/tools/tools-davmail-setup/","permalink":"http://devhc.com/linux/tools/tools-davmail-setup/","excerpt":"davmail 配置官网DavMail 是一个Java 编写Exchange 的代理gateway软件,让一般smtp+imap&#x2F;pop3 客户端可以通过这个代理收发邮件","text":"davmail 配置官网DavMail 是一个Java 编写Exchange 的代理gateway软件,让一般smtp+imap&#x2F;pop3 客户端可以通过这个代理收发邮件 davmail 安装davmail download unzip -d davmailxxx.zip -d &#x2F;opt&#x2F;davmail davmail 配置 创建&#x2F;opt&#x2F;davmail&#x2F;davmail.properties 拷贝官方实例配置 Official Config 如果是服务器注意修改davmail.url 为内部服务器地址 修改davmail.logFilePath&#x3D;&#x2F;opt&#x2F;davmail&#x2F;davmail.log 将davmail 注册到本地服务 useradd davmail sudo chown -R davmail:davmail &#x2F;opt&#x2F;davmail sudo vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;davmail.service 12345678910[Unit]Description=davmail proxy for exchange[Service]User=davmailGroup=davmailType=simpleExecStart=/opt/davmail/davmail.sh /opt/davmail/davmail.propertiesPIDFile=/var/run/davmail.pid[Install]WantedBy=multi-user.target graphical.target systemctl enable davmail systemctl start davmail ps aux|grep davmail 检查服务是否正常 可以通过直接运行 &#x2F;opt&#x2F;davmail&#x2F;davmail.sh &#x2F;opt&#x2F;davmail&#x2F;davmail.properties 查看错误信息 修改&#x2F;opt&#x2F;davmail&#x2F;davmail.sh123456#!/bin/bashBASE=`dirname $0`BASE=/opt/davmailfor i in $BASE/lib/*; do export CLASSPATH=$CLASSPATH:$i; doneJAVA=`which java`$JAVA -Xmx512M -Dsun.net.inetaddr.ttl=60 -cp $BASE/davmail.jar:$CLASSPATH davmail.DavGateway $1 Thunder bird 配置 STMP Server:localhost Port:1025 UserName: you namee Connection security:Non Authentication Method:Password ,transmitted insecureity IMAP: Server:localhost Port:1143 UserName: you name Connection security:None Authentication Method:Password ,transmitted insecureity","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"tools","slug":"linux/tools","permalink":"http://devhc.com/categories/linux/tools/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"tools","slug":"tools","permalink":"http://devhc.com/tags/tools/"}]},{"title":"使用JRebel 对java 应用热部署开发","slug":"java-jrebel-hot-deploy","date":"2018-05-30T04:01:12.000Z","updated":"2024-06-24T03:58:21.686Z","comments":true,"path":"java/tools/java-jrebel-hot-deploy/","permalink":"http://devhc.com/java/tools/java-jrebel-hot-deploy/","excerpt":"使用JRebel 对java 应用热部署开发 Java 热更新Java 开发Web Server 相关经常被人吐槽修改代码需要重启服务器，非常不方便,JRebel 是一个非常方便的热更新部署插件. JRebel安装 下载jrebel:https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij unzip -d &#x2F;opt jrebel-xxxx-nosetup.zip (xxxx 替换下载版本) java -jar &#x2F;opt&#x2F;jrebel&#x2F;jrebel.jar -set-remote-password 12345678","text":"使用JRebel 对java 应用热部署开发 Java 热更新Java 开发Web Server 相关经常被人吐槽修改代码需要重启服务器，非常不方便,JRebel 是一个非常方便的热更新部署插件. JRebel安装 下载jrebel:https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij unzip -d &#x2F;opt jrebel-xxxx-nosetup.zip (xxxx 替换下载版本) java -jar &#x2F;opt&#x2F;jrebel&#x2F;jrebel.jar -set-remote-password 12345678 Jrebel 激活 Activate Code: 通过Facebook 登录 https://my.jrebel.com/ 获取 LisenceServer(By iLanyu) docker run -d -p 8888:8888 ilanyu&#x2F;golang-reverseproxy IntelJ Idea 安装插件并激活插件 jntelj 安装jrebel 插件:File-Setting-Plugins 安装Jrebel(安装慢可以设置代理下载) 激活Help-&gt;Jrebel-Activation-&gt;LisenceServer http://localhost:8888/uuid-your-gen (uuid 可以https://www.uuidgenerator.net/ 生成) 配置JRebel插件 添加File-Setting-Jrebel-RemoteServer,添加remote server 点击+,name:model-server,url:http://localhost:8000 Server Auth:填写12345678 打开Views -&gt; TopWindow -&gt;Jrebel 视图,勾上热部署模块 在启动脚本加上参数 类似 java -agentpath:&#x2F;opt&#x2F;jrebel&#x2F;lib&#x2F;libjrebel64.so -Drebel.remoting_plugin&#x3D;true -Drebel.remoting_port&#x3D;8000 foo.bar.MyApp 启动Server,在项目修改代码，编译后会自动加载 配置保存自动编译加载 Auto Compile 默认代码保存不会自动加载需要右键编译或者快捷键(Ctrl&#x2F;Cmd+Shift+F9) 开启保存编译IntelJ Auto Compile","categories":[{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"}],"tags":[{"name":"java","slug":"java","permalink":"http://devhc.com/tags/java/"},{"name":"hotdeploy","slug":"hotdeploy","permalink":"http://devhc.com/tags/hotdeploy/"}]},{"title":"pyspark 解析thrift lzo","slug":"spark-pyspark-process-thrift","date":"2018-05-17T11:12:11.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"bigdata/spark/spark-pyspark-process-thrift/","permalink":"http://devhc.com/bigdata/spark/spark-pyspark-process-thrift/","excerpt":"PySpark 解析Thrift Lzo 类型数据 包依赖 libs elephant-bird-core-4.6.jar elephant-bird-hadoop-compat-4.6.jar libthrift-0.x.x.jar (x.x 换成你的版本) python依赖 pkg 依赖文件 gen_py thrift 生成(如果有注释中文需要在生成代码头部加上 #-*- coding: utf-8 -* ) six.py (Copy From python site-package) thrift (Copy From python site-package) 将python依赖打成zip 方便加载 zip -r ..&#x2F;pkg.zip .","text":"PySpark 解析Thrift Lzo 类型数据 包依赖 libs elephant-bird-core-4.6.jar elephant-bird-hadoop-compat-4.6.jar libthrift-0.x.x.jar (x.x 换成你的版本) python依赖 pkg 依赖文件 gen_py thrift 生成(如果有注释中文需要在生成代码头部加上 #-*- coding: utf-8 -* ) six.py (Copy From python site-package) thrift (Copy From python site-package) 将python依赖打成zip 方便加载 zip -r ..&#x2F;pkg.zip . python 脚本利用elephantbird RawMultiInputFormat 获取thrift bytes内容然后通过python thrift deserialize 转换成python 对象 12345678910111213from pyspark import SparkConf, SparkContextimport thriftfrom gen_py.xxx.ttypes import ThriftObjfrom thrift.TSerialization import deserializeconf = SparkConf()sc = SparkContext(conf = conf)logpath=&quot;/youhdfspath/xxx.thrift.lzo&quot;log = sc.newAPIHadoopFile(logpath,&#x27;com.twitter.elephantbird.mapreduce.input.RawMultiInputFormat&#x27;,&#x27;org.apache.hadoop.io.LongWritable&#x27;,&#x27;com.twitter.elephantbird.mapreduce.io.BinaryWritable&#x27;)rdd = log.map(lambda x:deserialize(ThriftObj(),x[1]))rdd.saveAsTextFile(&quot;testfile&quot;) shell 脚本 123456789101112131415161718192021export SCRIPT_HOME=$(cd &quot;`dirname $0`/&quot;; pwd)NAME=testOUTPUT=testfileLIBS=`ls $SCRIPT_HOME/libs/*`LIBSTR=&quot;&quot;for lib in $LIBS;do LIBSTR=&quot;$LIBSTR,$lib&quot;doneLIBSTR=$&#123;LIBSTR:1&#125;hadoop fs -rm -r -f $OUTPUTspark-submit \\ --master yarn \\ --deploy-mode cluster \\ --jars $LIBSTR \\ --py-files $SCRIPT_HOME/pkg.zip \\ --name &quot;[pyspark][$NAME]&quot; \\ $NAME.py","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://devhc.com/categories/bigdata/"},{"name":"spark","slug":"bigdata/spark","permalink":"http://devhc.com/categories/bigdata/spark/"}],"tags":[{"name":"spark","slug":"spark","permalink":"http://devhc.com/tags/spark/"},{"name":"pyspark","slug":"pyspark","permalink":"http://devhc.com/tags/pyspark/"},{"name":"thrift","slug":"thrift","permalink":"http://devhc.com/tags/thrift/"}]},{"title":"cpp 常用命令","slug":"cpp-cpp-basic","date":"2018-04-20T06:22:41.000Z","updated":"2024-06-24T03:58:21.684Z","comments":true,"path":"cpp/lang/cpp-cpp-basic/","permalink":"http://devhc.com/cpp/lang/cpp-cpp-basic/","excerpt":"cpp 常用命令basic compile g++ -c -o a.o a.cpp -I includeDir -L libraryDir -lxx sharead xx library lxx static xx library","text":"cpp 常用命令basic compile g++ -c -o a.o a.cpp -I includeDir -L libraryDir -lxx sharead xx library lxx static xx library create static library ar ru libxxx.a a.o b.o c.o create shared library Linux: g++ –shared -fPIC -o libxxx.so a.o b.o c.o MacOs: g++ -dynamiclib -fPIC -o libxxx.dylib a.o b.o c.o show lib dependency Linux:ldd MacOs:otool -L include path:echo | g++ -v -x c++ -E - &#x2F;etc&#x2F;ld.so.conf ldconfig -p","categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"lang","slug":"cpp/lang","permalink":"http://devhc.com/categories/cpp/lang/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"}]},{"title":"pig basic","slug":"bigdata-pig-pig-basic","date":"2018-03-18T03:31:22.000Z","updated":"2024-06-24T03:58:21.684Z","comments":true,"path":"bigdata/pig/bigdata-pig-pig-basic/","permalink":"http://devhc.com/bigdata/pig/bigdata-pig-pig-basic/","excerpt":"","text":"Pig BasicPig 官网Apache Pig 是一个高级过程语言，适合于使用 Hadoop 和 MapReduce 平台来查询大型半结构化数据集。通过允许对分布式数据集进行类似 SQL 的查询，Pig 可以简化 Hadoop 的使用pig 语法关键字是不分大小写 Pig启动模式 local mapreduce spark通过 pig -x local xxx.pig 指定 本地测试本地一个目录先创建一个文件比如data.txt data.txt123w,10,6h,12,2h,14,1 pig -x local 进入交互模式 (下面省略中间执行日志) 1234567grunt&gt; DATA = LOAD &#x27;data.txt&#x27; USING PigStorage(&#x27;,&#x27;) AS (name: chararray, age:int, num: float);grunt&gt; DUMP DATA;(w,10,6.0)(h,12,2.0)(h,14,1.0)grunt&gt; describe DATA;DATA: &#123;name: chararray,age: int,num: float&#125; 执行参数 Properties通过-D:等价设置环境变量PIG_OPTS, export PIG_OPTS&#x3D;–Dmapreduce.task.profile&#x3D;true或者通过文件pig -P mypig.properties 常见mapreduce参数设置 hadoop相关配置 1pig -Dmapreduce.job.cache.files=&quot;/user/hadoop/dict.txt#dict.txt&quot; xxx.pig 变量 -p -param 替换pig文件中变量pig -p INPUT&#x3D;”data.txt” xx.pig log4j 配置默认是INFO 日志特别多，可以通过log4j文件改成ERROR pig-log4j.properties1234log4j.rootLogger=ERROR,stdoutlog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n pig -log4jconf .&#x2F;pig-log4j.properties -x local set 主要用于job名称 job并行度 等job相关设置 12SET job.name &#x27;my job&#x27;;SET default_parallel 100; PigLatinpig 文件是使用PigLatin语法描述注意pig里 字符串都是 单引号 结构 tuple 有序字段集合 (name, 18) bag tuple 的组合 map key&#x2F;value pair [ key#value &lt;, key#value …&gt; ] [name#John,phone#5551212] 引入包1REGISTER &#x27;hdfs://hadoop/piglibs/*.jar&#x27;; 加载数据pig记载数据通过Loader方式 apache内置多种Loader TextLoaderload 一行为一个字段默认TextLoader是文本TSV分割数据(支持gzip,bzip)TSV: 分割A &#x3D; LOAD ‘student’ USING PigStorage(‘\\t’) AS (name: chararray, age:int, gpa: float); JsonLoader 官方这个不是太好用 不支持 深层次jsona &#x3D; load ‘a.json’ using JsonLoader(‘a0:int,a1:{(a10:int,a11:chararray)},a2:(a20:double,a21:bytearray),a3:[chararray]’); 第三方Loadertwitter elephantbird sequenceFileLoader 1234567pairs = LOAD &#x27;$INPUT&#x27; USING com.twitter.elephantbird.pig.load.SequenceFileLoader (&#x27;-c com.twitter.elephantbird.pig.util.IntWritableConverter&#x27;,&#x27;-c com.twitter.elephantbird.pig.util.TextConverter&#x27;) as (key: int,value: chararray); Thrift Lzo(Block&#x2F;Base64) 12DATA = LOAD &#x27;$INPUT&#x27; USING com.twitter.elephantbird.pig.load.ThriftPigLoader(&#x27;com.xxx.ThriftClasss&#x27;); Protobuf 12DATA = LOAD &#x27;$INPUT&#x27; USING com.twitter.elephantbird.pig.load.ProtobufPigLoader(&#x27;com.xxx.protobufClass&#x27;); Json (elephant 版本支持嵌套) 12DATA = LOAD &#x27;$INPUT&#x27; USING com.twitter.elephantbird.pig.load.JsonLoader(&#x27;-nestedLoad&#x27;); 注意 等号 左右 要有一个空格 不然会语法错误 1INPUT_LOG = LOAD &#x27;$XXX_LOG&#x27; USING org.apache.parquet.pig.ParquetLoader(); 遍历数据1INPUT_LOG = FOREACH INPUT_LOG GENERATE time, uid; 过滤数据1FILTERED_LOG = FILTER INPUT_LOG BY isValid == 1; join 数据 inner joinalias &#x3D; JOIN alias BY {expression|’(‘expression [, expression …]’)’} (, alias BY {expression|’(‘expression [, expression …]’)’} …) [USING ‘replicated’ | ‘bloom’ | ‘skewed’ | ‘merge’ | ‘merge-sparse’] [PARTITION BY partitioner] [PARALLEL n]; inner join 和sql inner join一样只有两边都有 才保留 12345678910111213141516171819grunt&gt; DATA = LOAD &#x27;data.txt&#x27; USING PigStorage(&#x27;,&#x27;) as (name:chararray, age: int);grunt&gt; DUMP DATA;(jake,10)(lily,12)(john,14)(kite,13)grunt&gt; WEIGHT = LOAD &#x27;weight.txt&#x27; USING PigStorage(&#x27;,&#x27;) as (name:chararray, weight: int);grunt&gt; DUMP WEIGHT;(jake,40)(lily,42)(john,54)(mike,64)grunt&gt; JOIN_DATA = JOIN DATA BY name,WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(lily,12,lily,42)grunt&gt; DESCRIBE JOIN_DATA;JOIN_DATA: &#123;DATA::name: chararray,DATA::age: int,WEIGHT::name: chararray,WEIGHT::weight: int&#125; outer joinalias &#x3D; JOIN left-alias BY left-alias-column [LEFT|RIGHT|FULL] [OUTER], right-alias BY right-alias-column [USING ‘replicated’ | ‘bloom’ | ‘skewed’ | ‘merge’] [PARTITION BY partitioner] [PARALLEL n]; out join和sql outer join概念类似分LEFT,RIGHT,FULL分别是保留左边全部，保留右边全部，保留两边全部LEFT,RIGHT,FULL [OUTER] OUTER 可以省略 123456789101112131415161718192021grunt&gt; JOIN_DATA = JOIN DATA BY name RIGHT, WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(lily,12,lily,42)(,,mike,64)grunt&gt; JOIN_DATA = JOIN DATA BY name LEFT, WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(kite,13,,)(lily,12,lily,42)grunt&gt; JOIN_DATA = JOIN DATA BY name FULL, WEIGHT BY name;grunt&gt; DUMP JOIN_DATA;(jake,10,jake,40)(john,14,john,54)(kite,13,,)(lily,12,lily,42)(,,mike,64) group 数据alias &#x3D; GROUP alias { ALL | BY expression} [, alias ALL | BY expression …] [USING ‘collected’ | ‘merge’] [PARTITION BY partitioner] [PARALLEL n]; ALL, group ALL to one groupB &#x3D; GROUP A ALL; FieldB &#x3D; GROUP A BY f1; TupleB &#x3D; GROUP A BY (f1, f2); 1234567891011121314A = load &#x27;student&#x27; AS (name:chararray,age:int,gpa:float);DESCRIBE A;A: &#123;name: chararray,age: int,gpa: float&#125;DUMP A;(John,18,4.0F)(Mary,19,3.8F)(Bill,20,3.9F)(Joe,18,3.8F)B = GROUP A BY age;DESCRIBE B;B: &#123;group: int, A: &#123;name: chararray,age: int,gpa: float&#125;&#125; 存储STORE alias INTO ‘directory’ [USING function];和加载数据类似分隔符 tsv: PigStorageAvroStorage 第三方:twitterelephant bird store LzoJsonStorage SequenceFileStorage LzoThriftBlockPigStorage LzoThriftB64LinePigStorage LzoProtobufBlockPigStorage LzoProtobufB64LinePigStorage STORE D INTO ‘mysortedcount’ USING PigStorage(); 其他 查看描述： DESCRIBE DATA; 打印（只建议在少数据量时候使用，大数据建议先LIMIT再DUMP） DUMP DATA; LIMIT alis &#x3D; LIMIT alias n; 排序 alias &#x3D; ORDER alias BY { * [ASC|DESC] | field_alias [ASC|DESC] [, field_alias [ASC|DESC] …] } [PARALLEL n]; X &#x3D; ORDER A BY age DESC; 采样 SAMPLE alias size; size 0~1 X &#x3D; SAMPLE A 0.01; 常见函数UDF 用户自定义函数全称 User Defined Functions 第三方实用 UDF： DATAFU 自定义UDF","categories":[{"name":"bigdata","slug":"bigdata","permalink":"http://devhc.com/categories/bigdata/"},{"name":"pig","slug":"bigdata/pig","permalink":"http://devhc.com/categories/bigdata/pig/"}],"tags":[{"name":"pig","slug":"pig","permalink":"http://devhc.com/tags/pig/"}]},{"title":"cpp-primer-1:cpp quick start","slug":"read-notes-cpp-primer-cpp-primer-1-start","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.689Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-1-start/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-1-start/","excerpt":"Start第一个C++ 程序 hello-world.cpp","text":"Start第一个C++ 程序 hello-world.cpp 123456#include &lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl; return 0;&#125; 入口函数为main，前面int代表返回类型，return 0 代表程序成功执行 #include 预处理器指示符 using namespace std代表使用std命名空间 C++ 每一条语句后面都是需要加分号; cout 写出到标准输出 cout 是在std 命名空间下的 编译执行 编译: g++ -o hello-word hello-world.cpp 执行程序: .&#x2F;hello-world 结果如下 hello world! 预处理指示符 使用**#**开头 #define 定义常量 #define XX 1 避免include 被重复引入 比如在a.h加入 在首次引入之后A_H就会被定义，第二次引入ifndef A_H 条件就会为false 1234#ifndef A_H#define A_H...#endif 其他常量 LINE 当前行 FILE 当前文件名 注释 注释对 &#x2F;* *&#x2F; 行注释 &#x2F;&#x2F; 输入输出 iostream 库提供 cout 终端输入：标准输入 cin 终端输出：标准输出 回车,TAB,空格 会被当做结束标识 cerr 标准错误输出 endl 换行符 ‘\\n’ 操作符 &lt;&lt; 将一个值导向输出流cout&#x2F;cerr &gt;&gt; 从一个流输出一个变量上 文件流操作 fstream 提供 操作与标准输出类似 文件输出流 ofstream(“filename”) 文件输入流 ifstream(“filename”)","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-2:data-types","slug":"read-notes-cpp-primer-cpp-primer-2-data-types","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.689Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-2-data-types/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-2-data-types/","excerpt":"基本数据类型常量 文字常量 不可寻址 nonaddressable 整数型文字常量 20 &#x2F;&#x2F;十进制 020 &#x2F;&#x2F;八进制 0x14 &#x2F;&#x2F;十六进制 缺省 默认有符号int 其他符号 l&#x2F;L long u&#x2F;U unsigned f&#x2F;F float e&#x2F;E 科学计数法 1E-2","text":"基本数据类型常量 文字常量 不可寻址 nonaddressable 整数型文字常量 20 &#x2F;&#x2F;十进制 020 &#x2F;&#x2F;八进制 0x14 &#x2F;&#x2F;十六进制 缺省 默认有符号int 其他符号 l&#x2F;L long u&#x2F;U unsigned f&#x2F;F float e&#x2F;E 科学计数法 1E-2 布尔常量 true false 字符常量 ‘a’ ‘2’ null 空字符 特殊字符 需要加\\转义 \\n 换行 \\t 制表符 \\r 回车 &#39; 单引号 \\“ 双引号 字符前面加L代表宽字符 L”a” 变量 变量是数据的名字的内存存储区，可以通过程序对其进行读写和处理。 变量可寻址的 addressable 左值(lvalue)：地址 位置值 (location value) 右值(rvalue)：被读取的值 (read value) 定义 类型 变量名字 变量名 标识符 identifier 特殊keyword 不能用作变量名 定义变量 是未初始化的，值是未定义是一个随机结果，一般建议初始化提供一个初始值。 内置数据类型支持构造函数 int ival &#x3D; int(); 指针类型 指针中存有另一个对象的地址 使用*标识 123int *pi = 0;int pv = 3;pi = &amp;pv; 特殊支持 void * 不关心类型 只关心地址 void *p &#x3D; pi; 获取指向内容 *p 字符串类型 c style string:const char * 使用c style string function: #include &lt;cstring&gt; c++ style string #include &lt;string&gt; init string a &#x3D; “xxx”; string a(“xxx”); string b(a); &#x2F;&#x2F;copy a string b &#x3D; a; 操作 连接 1string c = a+b; 获取c style 字符串 1const char * str = s.c_str(); 判断空 12if(s.empty())&#123;&#125; 获取大小 s.size() 替换 1replace(s.begin(),s.end(),&#x27;,&#x27;,&#x27; &#x27;) const 限定修饰符 定义变量不可改变 1const char * XXX_BUF_SIZE = 512; const 对象只能赋给 const 对象指针 引用类型 引用类型 reference 有时候又称为别名 alias 12int ival = 1024;int &amp;ival2 = ival; const 引用可以使用不同类型变量初始化 一般用在函数参数上 布尔类型 true&#x2F;false 布尔类型可以隐式转换为int 1&#x2F;0，算数值也可以，0或者空指针可以转换为false,其他类型的值可以转化为true 枚举类型 一些列值的集合的类型 比如XXX类型只能有3种类型值A,B,C1enum XXX&#123;A,B,C&#125;; 缺省情况 每个枚举值都被默认赋值 从0开始赋值 A&#x3D;0,B&#x3D;1,C&#x3D;2 也可以在声明是否制定其值 数组类型 下标访问&#x2F;索引访问 (下标从0开始) 声明 int a[10]; 显示指定 可以不写维度 int a[] &#x3D; {0,1,2}; 字符串类型数组 const char c1[] &#x3D; {‘c’,’p’,’p’}; const char c2[] &#x3D; “cpp”; c1,c2 不等价 c2 包含一个终止空字符 初始化 不能引用数组 [X] int &amp; iar[] &#x3D; {a,b,c}; 不能数组初始化另一个数组 int arr[] &#x3D; ar; 多维数组 int a[2][3] 用大括号方式初始化 其值都是0 数组 与 指针关系 int ia[] &#x3D; {1，2，3，4}； ia 就是数组第一个元素地址 &amp;ia[0] vector 容器类型 include&lt;vector&gt; 定义指定长度vector vector&lt;int&gt; ivec(10); vector&lt;int&gt; ivec(10 ,-1); &#x2F;&#x2F;初始化10个元素 每个元素为-1 vector 遍历 1234567891011121314151617181920212223242526 if(ivec.empty())&#123; return; &#125; for(int ix = 0; ix &lt; ivec.size(); i++ )&#123; cout &lt;&lt; ivec[i] &lt;&lt;endl; &#125; for(vector&lt;int&gt;::iterator it = ivec.iterator(); it != ivec.end(); i++ )&#123; cout &lt;&lt; * it &lt;&lt;endl; &#125; ``` ## complex 复数1. #include \\&lt;complex&gt;2. complex&lt;double&gt; p(0,7); //0+7i## typedef 名字1. 重新定义类型用于助记 typedef double score;typedef vector vec_int; 1234## [volatile](http://en.cppreference.com/w/cpp/language/cv)1. 当一个对象会在编译器控制或检测之外被改变时候，如被系统时钟更新的变量，那么该对象应该被申明成volatile，编译器的优化不能应用在volatile的对象 volatile int xxx; &#96;&#96;&#96; pair #include &lt;utility&gt; pair&lt;string,string&gt; author(“name”,”xxxx”); map 的元素","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-3:expression","slug":"read-notes-cpp-primer-cpp-primer-3-express","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.689Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-3-express/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-3-express/","excerpt":"表达式定义 由一个或多个操作数构成，应用在操作数是叫做操作符 在一个操作数上交一元操作符（&amp;，*），作用在两个操作数上的叫做2元操作符（+，-）","text":"表达式定义 由一个或多个操作数构成，应用在操作数是叫做操作符 在一个操作数上交一元操作符（&amp;，*），作用在两个操作数上的叫做2元操作符（+，-） 算术操作符 操作符 功能 用法 * 乘 a*b &#x2F; 除 a&#x2F;b % 求余 a%b + 加 a+b - 减 a-b 关系操作符 操作符 功能 用法 ! 非 !a &lt; 小于 a&lt;b &lt;&#x3D; 小于等于 a&lt;&#x3D;b &gt; 大于 a&gt;b &gt;&#x3D; 大于等于 a&gt;&#x3D;b &#x3D;&#x3D; 等于 a &#x3D;&#x3D; b !&#x3D; 不等于 a!&#x3D;b &amp;&amp; 逻辑与 a &amp;&amp; b || 逻辑或 a||b 关系操作符的结果都是布尔值 赋值操作符 &#x3D;12int a = 123;a = 5; 高精度转低精度会进行隐式类型转换，会损失精度复合赋值 a+&#x3D;b 递增 ++ 递减 – a++ 返回a a值加1 &#x2F;&#x2F; ++ 在后 返回原结果 ++a 返回a+1 a值加1 &#x2F;&#x2F; ++ 在前 返回结算后结果 条件操作符1bool isEqual = !strcmp(str1,str2)? true : false; sizeof 操作符 返回字节长度 用法 object 时候可以省掉括号 sizeof (type) sizeof (object) sizeof object 示例 123int ia[] = &#123;0,1,2&#125;;size_t array_size = sizeof ia;size_t ele_size = array_size / sizeof(int); 注意: size(ptr) 返回是指针长度 而不是指针指向的长度 string 类型 sizeof 与内容无关 new&#x2F;delete 操作符 系统为每个程序运行时候提供可用的内存池，这个被称为空闲存储区(free store)或堆(heap) new 分配对象 返回对象指针 delete 作用在对象指正上，如果在对数组类型需要加[] 1234int * p = new int[10];int * pi = new int(100);delete [] p;delete pi; 逗号操作符 从左往右计算 结果为最右边表达式的值 位操作符 操作符 功能 用法 ~ 按位非 ~a &lt;&lt; 左移 a &lt;&lt; b &gt;&gt; 右移 a &gt;&gt; b &amp; 按位与 a &amp; b | 按位或 a | b ^ 异或 a &#x3D;&#x3D; b &amp;&#x3D; 按位与等于 a&amp;&#x3D;b |&#x3D; 按位或等于 a |&#x3D; b ^&#x3D; 按位异或等于 a^&#x3D;b 类型转换 显式类型转换(强制转换) static_cast int ival &#x3D; static_cast(4.14) dynamic_cast const_cast reinterpret_cast 隐式类型转换 算术转换 小类型可以提升大类型 int-&gt;double 高精度转低精度 会有警告 不支持舍入 double-&gt;int 3.14L + ‘a’ &#x2F;&#x2F; ‘a’会转成asic 码","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-4:statement","slug":"read-notes-cpp-primer-cpp-primer-4-statment","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-4-statment/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-4-statment/","excerpt":"Statement 语句简单语句 空语句 ; 声明语句 int ival; 可以同时声明多个 int ival &#x3D;1,ival2 &#x3D; 3; 建议按类型分组声明","text":"Statement 语句简单语句 空语句 ; 声明语句 int ival; 可以同时声明多个 int ival &#x3D;1,ival2 &#x3D; 3; 建议按类型分组声明 IF 建议if语句用括号括起来 避免歧义 12345if( condition )&#123; statement&#125;else&#123; statement&#125; switch 注意执行case 直到遇见break为止 for while","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-5:abstract container","slug":"read-notes-cpp-primer-cpp-primer-5-abstact-container","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-5-abstact-container/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-5-abstact-container/","excerpt":"抽象容器list &amp;&amp; vector vector 连续内存 顺序容器 随机访问快 list 非连续 基于连表 删除，插入节点方便 使用","text":"抽象容器list &amp;&amp; vector vector 连续内存 顺序容器 随机访问快 list 非连续 基于连表 删除，插入节点方便 使用 set multiset 允许重复 map multimap 允许一个key下多个value","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-6-function","slug":"read-notes-cpp-primer-cpp-primer-6-function","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-6-function/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-6-function/","excerpt":"Function function type funname(type arg1,…) 函数指针 函数名就是函数指针 12345int ab(int x);int (*p)(int) *p = ab;typedef int (*p_ab)(int);p(12);(*p)(12);","text":"Function function type funname(type arg1,…) 函数指针 函数名就是函数指针 12345int ab(int x);int (*p)(int) *p = ab;typedef int (*p_ab)(int);p(12);(*p)(12); 函数指针数组 int (*p[5])(int) *parr;","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-8:exception","slug":"read-notes-cpp-primer-cpp-primer-8-exception","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-8-exception/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-8-exception/","excerpt":"exception 异常处理1234567try&#123; xxxx throw X_Exception(&quot;&quot;);&#125;catch(E_Exception &amp;e)&#123; cout&lt;&lt;e.what()&lt;&lt;endl;&#125;","text":"exception 异常处理1234567try&#123; xxxx throw X_Exception(&quot;&quot;);&#125;catch(E_Exception &amp;e)&#123; cout&lt;&lt;e.what()&lt;&lt;endl;&#125;","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-9:template","slug":"read-notes-cpp-primer-cpp-primer-9-template","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-9-template/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-9-template/","excerpt":"template 示例 1234template &lt;class TYPE&gt;TYPE min(TYPE a,TYPE b)&#123; return a &lt; b ? a : b;&#125;","text":"template 示例 1234template &lt;class TYPE&gt;TYPE min(TYPE a,TYPE b)&#123; return a &lt; b ? a : b;&#125; 模板参数 模板类型参数 class 或者typename 加一个标识符 模板非类型参数 由普通参数声明构成，代表常量表达式 12template &lt;typename Type, int size&gt;Type min(Type (&amp;r_array)[size])&#123;&#125; 显式模板 vector&lt;int&gt;","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"cpp-primer-7:class","slug":"read-notes-cpp-primer-cpp-primer-7-classs","date":"2017-04-20T06:01:00.000Z","updated":"2024-06-24T03:58:21.690Z","comments":true,"path":"read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-7-classs/","permalink":"http://devhc.com/read-notes/cpp-primer/read-notes-cpp-primer-cpp-primer-7-classs/","excerpt":"类 Class定义类定义之后必须接一个分号或者声明 12345class ClassName&#123;&#125;;class ClassName&#123;&#125; a b;","text":"类 Class定义类定义之后必须接一个分号或者声明 12345class ClassName&#123;&#125;;class ClassName&#123;&#125; a b; 数据成员默认都是非静态，不能显式初始化静态可以初始化(类共享) 12345class A&#123; int a; string b; static const int _SIZE = 100;&#125;; 成员函数类中定义函数声明，也可以函数定义 1234567class A&#123; void hello(); void hello2()&#123; cout&lt;&lt;&quot;hello&quot;&lt;&lt;endl; &#125;&#125; 访问 public 12345A a;a.name;A * pa = new A;pa-&gt;name; 12//访问静态A::static_field; private 类私有 protected 派生类共享 友元函数 friend 不受 public,private,protected 影响 使得某个函数可以访问 声明 class A; &#x2F;&#x2F;只声明没有定义 构造函数 没有返回类型构造函数不能为const或者volatile 1234567891011121314class Screen&#123;public: Screen(int h=8, int w=12,xx=&quot;afd&quot;): _height(h), _width(8)&#123; &#125;&#125;使用缺省构造函数不需要括号// error Screen a(); 编辑器会认为返回Screen的函数Screen a; const volatile const 定义了就不可以修改 类成员函数const 不可以修改成员 123class A&#123; void xxx() const;&#125;; volatile 编译器无法控制或者监测的 this 指针 指向对象本身 在需要返回对象自身时候使用 返回引用 return *this; 返回指针 return this; 静态成员 没有this指针 类定义时候初始化 A::field 访问 类成员指针 指向类成员a的short 指针 1short Screen::* p = &amp;Screen::height; 静态成员指针 类似普通指针 union1234union &#123; int ival; char cval;&#125; uv; 嵌套类 Tree 嵌套Node, Tree::Node 12345class Tree&#123;public: class Node&#123;&#125; Node * tree;&#125;; 拷贝构造函数 区分普通类型和对象指针类型拷贝 析构函数 ~ClassName(); 无返回类型 delete 相关new开辟的空间 delete 时候不需要判断 是否!&#x3D;0编辑器隐式执行 不会删除不指向认为对象的指针 操作符重载 istream &amp; operator &gt;&gt; (istream &amp;,string &amp;); 左值 右值 类操作符 省略左值","categories":[{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"}]},{"title":"matlab 常用命令","slug":"matlab-matlab-octave","date":"2016-03-20T05:11:15.000Z","updated":"2024-06-24T03:58:21.689Z","comments":true,"path":"matlab/matlab-matlab-octave/","permalink":"http://devhc.com/matlab/matlab-matlab-octave/","excerpt":"matlab &amp; ocatve index 从1开始 length 长度 io data &#x3D; open(“data.file”);","text":"matlab &amp; ocatve index 从1开始 length 长度 io data &#x3D; open(“data.file”); cmd clear ; close all; clc clc：清除命令窗口的内容，对工作环境中的全部变量无任何影响 close：关闭当前的Figure窗口 close all:关闭所有的Figure窗口 clear：清除工作空间的所有变量 clear all：清除工作空间的所有变量，函数，和MEX文 fprintf(‘hello world \\n’) % comment convension X (m,n + 1) y (m,1) theta (n+1,1) matrix Utility 列用;分割 行用,分割 a &#x3D; [1;2;3] X &#x3D; data(:,1) 取第一列 X &#x3D; data(:,[1,2]) 取1,2 列 获取非0序号 Find pos &#x3D; find(y&#x3D;&#x3D;1) size [m , n] &#x3D; size(X) X &#x3D; [ones(m, 1) X]; 全0矩阵 zeros(x,y) 全1矩阵 ones(x,y) 单位矩阵 I &#x3D; eye(n) Identity Martix 矩阵赋值：assignment X(i,y) &#x3D; n gen linspace (BASE, LIMIT, N)123linspace(1,4,5)ans =1.0000 1.7500 2.5000 3.2500 4.0000 logspace(-2, 3, 5)123logspace(-2, 3, 5)ans = 1.0000e-02 1.7783e-01 3.1623e+00 5.6234e+01 1.0000e+03 logic for123for i = 1:n do_something...end plot figure; % open a new figure window plot 3D:surf(X,Y,V) 等高线: contour(X,Y,V,logspace(-2,3,20)) minimizers options &#x3D; optimset(‘GradObj’, ‘on’, ‘MaxIter’, 400); [theta, cost] &#x3D; fminunc(@(t)(costFunction(t, X, y)), initial_theta, options);","categories":[{"name":"matlab","slug":"matlab","permalink":"http://devhc.com/categories/matlab/"}],"tags":[{"name":"matlab","slug":"matlab","permalink":"http://devhc.com/tags/matlab/"}]},{"title":"使用 commons-daemon 管理daemon 服务","slug":"java-Commons-Daemon","date":"2015-05-07T03:12:00.000Z","updated":"2024-06-24T03:58:21.686Z","comments":true,"path":"java/tools/java-Commons-Daemon/","permalink":"http://devhc.com/java/tools/java-Commons-Daemon/","excerpt":"","text":"简单介绍一下 Commons Daemon 可将一个普通的 Java 应用变成系统的一个后台服务。 &nbsp; JSVC Jsvc is a set of libraries and applications for making Java applications run on UNIX more easily.Jsvc allows the application (e.g. Tomcat) to perform some privileged operations as root (e.g. bind to a port &lt; 1024), and then switch identity to a non-privileged user. 安装： 介绍地址：http://commons.apache.org/proper/commons-daemon/jsvc.html wget http://apache.01link.hk//commons/daemon/source/commons-daemon-1.0.15-src.zip unzip commons-daemon-1.0.15-src.zip cd commons-daemon-1.0.15-src/src/native/unix ./configure --with-java=/usr/lib/jvm/java make sudo cp jsvc /usr/bin/ &nbsp; java server 如果是maven 项目 添加 &lt;dependency&gt; &lt;groupId&gt;commons-daemon&lt;/groupId&gt; &lt;artifactId&gt;commons-daemon&lt;/artifactId&gt; &lt;version&gt;1.0.15&lt;/version&gt; &lt;/dependency&gt; 创建server Daemon 入口 入口 public class Launcher implements Daemon { private Logger logger = LoggerFactory.getLogger(\"Launcher\"); @Override public void init(DaemonContext context) throws DaemonInitException, Exception { logger.info(\"init\"); } @Override public void start() throws Exception { logger.info(\"start\"); //....start your server } @Override public void stop() throws Exception { //.... stop your server logger.info(\"stop\"); } @Override public void destroy() { logger.info(\"destroy\"); } } 4.start your daemon server &#x2F;usr&#x2F;bin&#x2F;jsvc -debug jar-with-deps.jar Laucher -debug 帮助调试查看 实际可去掉 &nbsp; &nbsp; 5.add service sudo vim &#x2F;etc&#x2F;init.d&#x2F;xxx #!/bin/sh # # xxxx-server # # chkconfig: 2345 90 60 # description: xxxx JOB_PATH=/data/deploy/xxx EXEC=/usr/bin/jsvc CLASS_PATH=$JOB_PATH/xxx-server-0.0.1-SNAPSHOT.jar #LOG_OUT=$JOB_PATH/logs/job.log LOG_OUT=/dev/null #LOG_ERR=$JOB_PATH/logs/error.log LOG_ERR=/dev/null PID_FILE=$JOB_PATH/pid/server.pid #DEBUG=\"-debug\" MAIN_CLASS=com.xx.MainClass do_exec(){ $EXEC \\ -cp $CLASS_PATH \\ -outfile $LOG_OUT \\ -home /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/ \\ -errfile $LOG_ERR \\ -pidfile $PID_FILE \\ $1 \\ $DEBUG \\ $MAIN_CLASS } case \"$1\" in start) do_exec ;; stop) do_exec \"-stop\" ;; restart) do_exec \"-stop\" do_exec ;; *) echo \"usage: {start|stop|restart}\" &gt;&amp;2 exit 3 ;; esac &nbsp; chmod +x &#x2F;etc&#x2F;init.d&#x2F;xxx 启动服务 service xxx start 关闭服务 service xxx stop 重启服务 service xxx restart &nbsp; 添加到系统启动运行 注意 # chkconfig: 2345 90 60 # description: xxxx 这个是必须要有的 不然会报 service xxx does not support chkconfig xxx服务必须在运行级2，3，4，5下被启动或关闭，启动的优先级是90，关闭的优先级是60, 对于运行级说明如下 0：关机 1：单用户模式 2：无网络支持的多用户模式 3：有网络支持的多用户模式 4：保留，未使用 5：有网络支持有X-Window支持的多用户模式 6：重新引导系统，即重启 &nbsp; chkconfig –add xxx 就 ok 了 这样服务就可以开机启动 &nbsp; chkconfig –list 可以看到 xxx &nbsp; &nbsp;","categories":[{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"}],"tags":[],"author":"wanghch"},{"title":"使用mutt + msmtp 配置 发送邮件","slug":"tools-mutt-sendmail","date":"2014-11-17T06:11:12.000Z","updated":"2024-06-24T03:58:21.692Z","comments":true,"path":"linux/tools/tools-mutt-sendmail/","permalink":"http://devhc.com/linux/tools/tools-mutt-sendmail/","excerpt":"","text":"msmtp + mutt 是一个非常好用的命令行发邮件工具 mutt 相当于 命令行 命令行 邮件客户端端 真正发送邮件由msmtp发送 msmtp 官方地址：http://sourceforge.jp/projects/sfnet_msmtp/ wget http://nchc.dl.sourceforge.net/sourceforge/msmtp/msmtp-1.4.17.tar.bz2 tar -jxvf msmtp-1.4.17.tar.bz2 cd msmtp-1.4.17 ./configure --prefix=/usr/local/msmtp make make install cd /usr/local/msmtp/ mkdir etc cd etc vim msmtprc 根据smtp 邮箱 配置 account default host smtp.xxxx.com port 465 timeout 30 auth on user xxx password xxxx logfile /var/log/msmtp.log auto_from off from xxx@xxx.com tls on tls_starttls off tls_certcheck off echo “test” | &#x2F;usr&#x2F;local&#x2F;msmtp&#x2F;bin&#x2F;msmtp &#x79;&#111;&#x75;&#101;&#109;&#97;&#x69;&#108;&#64;&#x78;&#120;&#120;&#120;&#x2e;&#x63;&#111;&#x6d; 测试msmtp 配置 是否正常 &nbsp; 安装mutt yum install mutt vim &#x2F;etc&#x2F;Muttrc 其中修改几个地方 &nbsp; set sendmail&#x3D;”&#x2F;usr&#x2F;local&#x2F;msmtp&#x2F;bin&#x2F;msmtp” set from&#x3D;”&#120;&#120;&#x78;&#64;&#x78;&#x78;&#120;&#46;&#99;&#x6f;&#x6d;“ 这个可以是和 msmtp配置的不一样的 set realname&#x3D;”xxx mail” 可以给from 起名称 set editor&#x3D;”vim” set charset&#x3D;”utf-8” set rfc2047_parameters&#x3D;yes &nbsp; 发送带主题和附件的 echo “test mutt”|mutt -s “test subject 和中文 “ &#x78;&#120;&#x78;&#x40;&#x78;&#x78;&#120;&#x2e;&#x63;&#111;&#109; -a ~attach file 如果你发送的内容在文件中可以这样 mutt -s “test subject 和中文 “ &#120;&#120;&#x78;&#x40;&#x78;&#x78;&#x78;&#46;&#x63;&#111;&#x6d; -a ~attach file &lt; mail_content_file &nbsp;","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"tools","slug":"linux/tools","permalink":"http://devhc.com/categories/linux/tools/"}],"tags":[{"name":"mail","slug":"mail","permalink":"http://devhc.com/tags/mail/"}],"author":"wanghch"},{"title":"CURL 投票PHP script","slug":"php-php-curl-votes","date":"2014-11-14T08:11:13.000Z","updated":"2024-06-24T03:58:21.689Z","comments":true,"path":"php/php-php-curl-votes/","permalink":"http://devhc.com/php/php-php-curl-votes/","excerpt":"","text":"今天有人问我curl相关，我就找到好几年前写的帮别人写的刷票一段代码，代码比较简单粗暴。 其中url 我删了 不方便写上。 &lt;?php $url = \"某公司 bbs 投票页\"; $post = array( 'xx' =&gt;xx, 'xx'=&gt;'xxx' ); $userAgent = getUserAgent(); $headers = array(); $headers['CLIENT-IP'] = getRandomIp(); $headers['X-FORWARDED-FOR'] = getRandomIp(); $headerArr = array(); foreach( $headers as $n =&gt; $v ) { $headerArr[] = $n .':' . $v; } $ch = curl_init(); $options = array( CURLOPT_URL =&gt; $url, CURLOPT_POST =&gt; 1, CURLOPT_RETURNTRANSFER =&gt; true, CURLOPT_POSTFIELDS =&gt; $post , CURLOPT_HTTPHEADER =&gt;$headerArr, CURLOPT_USERAGENT=&gt;$userAgent ); curl_setopt_array($ch, $options); $t = curl_exec($ch); curl_close($ch); $url = \"某公司bbs 帖子页 是为了刷访问 保证 投票 数和访问是一个级别\"; $userAgent = getUserAgent(); $headers = array(); $headers['CLIENT-IP'] = getRandomIp(); $headers['X-FORWARDED-FOR'] = getRandomIp(); $headerArr = array(); foreach( $headers as $n =&gt; $v ) { $headerArr[] = $n .':' . $v; } $ch = curl_init(); $options = array( CURLOPT_URL =&gt; $url, CURLOPT_POST =&gt; 1, CURLOPT_RETURNTRANSFER =&gt; true, CURLOPT_HTTPHEADER =&gt;$headerArr, CURLOPT_USERAGENT=&gt;$userAgent ); curl_setopt_array($ch, $options); $t = curl_exec($ch); curl_close($ch); function getRandomIp(){ $ip_long = array( array('607649792', '608174079'), //36.56.0.0-36.63.255.255 array('1038614528', '1039007743'), //61.232.0.0-61.237.255.255 array('1783627776', '1784676351'), //106.80.0.0-106.95.255.255 array('2035023872', '2035154943'), //121.76.0.0-121.77.255.255 array('2078801920', '2079064063'), //123.232.0.0-123.235.255.255 array('-1950089216', '-1948778497'), //139.196.0.0-139.215.255.255 array('-1425539072', '-1425014785'), //171.8.0.0-171.15.255.255 array('-1236271104', '-1235419137'), //182.80.0.0-182.92.255.255 array('-770113536', '-768606209'), //210.25.0.0-210.47.255.255 array('-569376768', '-564133889'), //222.16.0.0-222.95.255.255 ); $rand_key = mt_rand(0, 9); $ip= long2ip(mt_rand($ip_long[$rand_key][0], $ip_long[$rand_key][1])); return $ip; } function getUserAgent(){ $userAgentsList = array( \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11\",//taobao \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER\",//liebao \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400) \",//QQ \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; 360SE) \",//360 \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\",// \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0\",//sougou \"Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5\",//ipad \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)\", \"Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\" ); return $userAgentsList[rand(0,count($userAgentsList)-1)]; } &nbsp;","categories":[{"name":"php","slug":"php","permalink":"http://devhc.com/categories/php/"}],"tags":[{"name":"php","slug":"php","permalink":"http://devhc.com/tags/php/"}],"author":"wanghch"},{"title":"Shell 实用Tips","slug":"linux-shell-tips","date":"2014-08-26T06:13:00.000Z","updated":"2024-06-24T03:58:21.687Z","comments":true,"path":"linux/shell/linux-shell-tips/","permalink":"http://devhc.com/linux/shell/linux-shell-tips/","excerpt":"","text":"获取script所在目录1JOB_PATH=$(cd &quot;$(dirname &quot;$0&quot;)&quot;; pwd) 根据名称kill script1ps aux|grep $name|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;|xargs kill -s 9 根据参数获取当前日期，默认当天12345if [ -z &quot;$1&quot; ]; then date=`date +&quot;%Y-%m-%d&quot;`;else date=`date -d &quot;$1&quot; +&quot;%Y-%m-%d&quot;`;fi 获取其他script输出赋给变量12a=`php -r &quot;echo 1;&quot;`echo $a 获取内存占用前10进程1bash ps aux|sort -k4r|head -n 10 查看一个目录下总文件大小和1bash du -sh . 环境变量设置 系统 &#x2F;etc&#x2F;profile &#x2F;etc&#x2F;bashrc 个人 ~&#x2F;.bash_profile ~&#x2F;.bashrc 推荐：&#x2F;etc&#x2F;profile.d&#x2F; 比如新增hive加入path 建立一个&#x2F;etc&#x2F;profile.d&#x2F;hive.sh 12export HIVE_HOME=/opt/hivePATH=$HIVE_HOME/bin:$PATH shell实用快捷键 Ctrl + a 光标切换到行首（经常用） Ctrl + e 光标切换到行尾 cd - 切换到上次目录 !! 上次命令（一般使用 针对忘记打sudo，下面打sudo !!即可） Ctrl ＋l 清屏 Ctrl + f &#x2F; Ctrl +b 等同左右箭頭 Ctrl + k 剪切光標后 Ctrl + u 剪切光標前 Ctrl + y 粘贴shell剪切板 （注意这三个命令和系统剪切板不共享） 统计目录各文件夹大小 123for dir in `ls`; do du -sh $dir;done 搜索一个目录下文件 含有关键字 keyword的文件 1find . -type f |xargs grep keyword","categories":[{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"shell","slug":"linux/shell","permalink":"http://devhc.com/categories/linux/shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"http://devhc.com/tags/shell/"}]},{"title":"capistrano使用","slug":"tools-Capistrano","date":"2013-11-21T04:12:11.000Z","updated":"2024-06-24T03:58:21.692Z","comments":true,"path":"tools/tools-Capistrano/","permalink":"http://devhc.com/tools/tools-Capistrano/","excerpt":"先简单介绍下Capistrano Capistrano是一种在多台服务器上运行脚本的开源工具，它主要用于部署web应用。它自动完成多台服务器上新版本的同步更新，包括数据库的改变。Capistrano最初由Jamis Buck用Ruby开发，并用RubyGems部署渠道部署。现在Capistrano不仅限于应用Ruby on Rails的 web应用框架，而且可以用于部署用其他框架的web应用程序，比如用PHP开发的。Capistran最初是用来应用于bash指令行。现在Ruby on Rails框架的用于也可以使用它的新特性，例如，对当前web应用部署改变使其更新版本，或者使其回滚到之前的旧版本。 如何使用 Capistrano最新版本是v3，但是v3暂时只支持git协议，如果想使用svn等其他协议可以用v2，所以下面主要是针对v2. 1.安装： gem install capistrano（需要先安装ruby） 装完后会有两个工具脚本加入环境变量 1.cap 调用capistrano task 2.capify 初始化目录","text":"先简单介绍下Capistrano Capistrano是一种在多台服务器上运行脚本的开源工具，它主要用于部署web应用。它自动完成多台服务器上新版本的同步更新，包括数据库的改变。Capistrano最初由Jamis Buck用Ruby开发，并用RubyGems部署渠道部署。现在Capistrano不仅限于应用Ruby on Rails的 web应用框架，而且可以用于部署用其他框架的web应用程序，比如用PHP开发的。Capistran最初是用来应用于bash指令行。现在Ruby on Rails框架的用于也可以使用它的新特性，例如，对当前web应用部署改变使其更新版本，或者使其回滚到之前的旧版本。 如何使用 Capistrano最新版本是v3，但是v3暂时只支持git协议，如果想使用svn等其他协议可以用v2，所以下面主要是针对v2. 1.安装： gem install capistrano（需要先安装ruby） 装完后会有两个工具脚本加入环境变量 1.cap 调用capistrano task 2.capify 初始化目录 2.初始化部署脚本 mkdir capProject cd capProject capify . Capfile 部署脚本入口文件 config 配置目录 &nbsp; deploy.rb配置 https://github.com/capistrano/capistrano/wiki/2.x-Significant-Configuration-Variables 1.配置版本控制使用git管理代码set :scm, :git使用svn管理代码set :scm, :subversion 2.设置版本控制用户名密码 set :scm_username,’xx’set :scm_password,’xx’ 3.设置repository地址 set :repository, “https://xxxx.git“ 4.设置web服务器地址 多个逗号分隔，注释掉:role app和:role db在php部署中不需要 role :web, “devhc.com” 多台服务器 role :web, “devhc.com”,”devhc1.com” 5.设置ssh密码（如果设置sshkey nopassword方式访问则不填写） set :username,’xx’set :password,’xx’ 6.设置部署目标位置 set :deploy_to,”&#x2F;var&#x2F;www&#x2F;#{application}” 这里是引用了application的名字，若application名称为blog，则部署位置为&#x2F;var&#x2F;www&#x2F;blog 7.杂项设置（可选） 非ruby项目该值都设为false，不然会提示public文件夹不存在 set :normalize_asset_timestamps,false 设置需要共享的目录 默认是： %w(public&#x2F;system log tmp&#x2F;pids) 没有就设空set :shared_children,%w() 如yii框架中assets和protected&#x2F;runtime需要共享 set :shared_children, %w(assets protected&#x2F;runtime protected&#x2F;config) 保持最新release个数 set :keep_releases,5 &nbsp; 设置current_path，即当前版本目录，其实是一个软连接，执行release中最新版本代码,如果是apache为服务器，则为其web目录,默认则为 deploy_path&#x2F;current,如果使用默认的话需要改下apache配置指向这里 set current_path,’&#x2F;var&#x2F;www&#x2F;xxx’ &nbsp; 实例配置如下： set :application, \"xxx\" set :repository, \"https://xxxx.git\" set :normalize_asset_timestamps,false set :deploy_to,\"/var/www/#{application}\" set :scm,:git set :username,'xx' set :password,'xx' set :use_sudo,true set :keep_releases,5 set :shared_children, %w(assets protected/runtime) role :web, \"devhc.com\" &nbsp; 部署脚本使用 cap deploy:setup 初始化目录 release，shared目录 &nbsp; cap deploy 执行部署 &nbsp; 多环境部署 通常项目部署有sandbox,ready,production等环境，分别一一设置部署比较麻烦，通过capistrano就很方便解决这个问题。 1.使用Multistage Extension扩展 通过gem安装capistrano-ext扩展 mkdir config&#x2F;deploy 新建stages配置目录 #deploy.rb中引入扩展和配置stages set :stages, %w(production sandbox) set :default_stage, \"sandbox\" require 'capistrano/ext/multistage' #config&#x2F;deploy&#x2F;production.rb role :web, \"devhc.com\" set :deploy_to, \"/var/www/#{application}-production/\" #config&#x2F;deploy&#x2F;sandbox.rb role :web, \"sandbox.devhc.com\" set :deploy_to, \"/var/www/#{application}-sandbox/\" cap sandbox deploy #部署沙盒cap production deploy #部署线上 不使用Multistage Extension实现多环境部署set :application, 'example-website' task :production do role :web, “devhc.com” set :deploy_to, “&#x2F;var&#x2F;www&#x2F;#{application}-production&#x2F;“ set :deploy_via, :remote_cacheend task :sandbox do role :web, “localhost” set :deploy_to, “&#x2F;var&#x2F;www&#x2F;#{application}-sandbox&#x2F;“ set :deploy_via, :copyend&nbsp;","categories":[{"name":"tools","slug":"tools","permalink":"http://devhc.com/categories/tools/"}],"tags":[{"name":"deploy","slug":"deploy","permalink":"http://devhc.com/tags/deploy/"}]},{"title":"ios 打开其他应用","slug":"ios-ios-open-app","date":"2013-10-23T03:08:00.000Z","updated":"2024-06-24T03:58:21.686Z","comments":true,"path":"ios/ios-ios-open-app/","permalink":"http://devhc.com/ios/ios-ios-open-app/","excerpt":"[[UIApplication sharedApplication] openURL:[NSURL URLWithString:appString]]; 1、打开系统应用打电话：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”tel:&#x2F;&#x2F;123456”]]; 打开浏览器：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”","text":"[[UIApplication sharedApplication] openURL:[NSURL URLWithString:appString]]; 1、打开系统应用打电话：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”tel:&#x2F;&#x2F;123456”]]; 打开浏览器：[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@”","categories":[{"name":"ios","slug":"ios","permalink":"http://devhc.com/categories/ios/"}],"tags":[{"name":"ios","slug":"ios","permalink":"http://devhc.com/tags/ios/"}],"author":"wanghch"}],"categories":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/categories/cpp/"},{"name":"lang","slug":"cpp/lang","permalink":"http://devhc.com/categories/cpp/lang/"},{"name":"mac","slug":"mac","permalink":"http://devhc.com/categories/mac/"},{"name":"linux","slug":"linux","permalink":"http://devhc.com/categories/linux/"},{"name":"i3","slug":"linux/i3","permalink":"http://devhc.com/categories/linux/i3/"},{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/categories/tensorflow/"},{"name":"pycharm","slug":"tensorflow/pycharm","permalink":"http://devhc.com/categories/tensorflow/pycharm/"},{"name":"libs","slug":"cpp/libs","permalink":"http://devhc.com/categories/cpp/libs/"},{"name":"framework","slug":"tensorflow/framework","permalink":"http://devhc.com/categories/tensorflow/framework/"},{"name":"math","slug":"math","permalink":"http://devhc.com/categories/math/"},{"name":"container","slug":"container","permalink":"http://devhc.com/categories/container/"},{"name":"kubernetes","slug":"container/kubernetes","permalink":"http://devhc.com/categories/container/kubernetes/"},{"name":"tools","slug":"linux/tools","permalink":"http://devhc.com/categories/linux/tools/"},{"name":"git","slug":"linux/tools/git","permalink":"http://devhc.com/categories/linux/tools/git/"},{"name":"spring","slug":"spring","permalink":"http://devhc.com/categories/spring/"},{"name":"ssh","slug":"linux/ssh","permalink":"http://devhc.com/categories/linux/ssh/"},{"name":"socket","slug":"cpp/socket","permalink":"http://devhc.com/categories/cpp/socket/"},{"name":"thread","slug":"cpp/thread","permalink":"http://devhc.com/categories/cpp/thread/"},{"name":"autokey","slug":"linux/autokey","permalink":"http://devhc.com/categories/linux/autokey/"},{"name":"java","slug":"java","permalink":"http://devhc.com/categories/java/"},{"name":"tools","slug":"java/tools","permalink":"http://devhc.com/categories/java/tools/"},{"name":"bigdata","slug":"bigdata","permalink":"http://devhc.com/categories/bigdata/"},{"name":"spark","slug":"bigdata/spark","permalink":"http://devhc.com/categories/bigdata/spark/"},{"name":"pig","slug":"bigdata/pig","permalink":"http://devhc.com/categories/bigdata/pig/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/categories/read-notes/"},{"name":"cpp-primer","slug":"read-notes/cpp-primer","permalink":"http://devhc.com/categories/read-notes/cpp-primer/"},{"name":"matlab","slug":"matlab","permalink":"http://devhc.com/categories/matlab/"},{"name":"php","slug":"php","permalink":"http://devhc.com/categories/php/"},{"name":"shell","slug":"linux/shell","permalink":"http://devhc.com/categories/linux/shell/"},{"name":"tools","slug":"tools","permalink":"http://devhc.com/categories/tools/"},{"name":"ios","slug":"ios","permalink":"http://devhc.com/categories/ios/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://devhc.com/tags/cpp/"},{"name":"string","slug":"string","permalink":"http://devhc.com/tags/string/"},{"name":"mac","slug":"mac","permalink":"http://devhc.com/tags/mac/"},{"name":"linux","slug":"linux","permalink":"http://devhc.com/tags/linux/"},{"name":"tools","slug":"tools","permalink":"http://devhc.com/tags/tools/"},{"name":"pycharm","slug":"pycharm","permalink":"http://devhc.com/tags/pycharm/"},{"name":"tensorflow","slug":"tensorflow","permalink":"http://devhc.com/tags/tensorflow/"},{"name":"math","slug":"math","permalink":"http://devhc.com/tags/math/"},{"name":"kubernetes","slug":"kubernetes","permalink":"http://devhc.com/tags/kubernetes/"},{"name":"git","slug":"git","permalink":"http://devhc.com/tags/git/"},{"name":"jpa","slug":"jpa","permalink":"http://devhc.com/tags/jpa/"},{"name":"spring","slug":"spring","permalink":"http://devhc.com/tags/spring/"},{"name":"hdfs","slug":"hdfs","permalink":"http://devhc.com/tags/hdfs/"},{"name":"ssh","slug":"ssh","permalink":"http://devhc.com/tags/ssh/"},{"name":"socket","slug":"socket","permalink":"http://devhc.com/tags/socket/"},{"name":"shell","slug":"shell","permalink":"http://devhc.com/tags/shell/"},{"name":"autokey","slug":"autokey","permalink":"http://devhc.com/tags/autokey/"},{"name":"maven","slug":"maven","permalink":"http://devhc.com/tags/maven/"},{"name":"compile","slug":"compile","permalink":"http://devhc.com/tags/compile/"},{"name":"java","slug":"java","permalink":"http://devhc.com/tags/java/"},{"name":"hotdeploy","slug":"hotdeploy","permalink":"http://devhc.com/tags/hotdeploy/"},{"name":"spark","slug":"spark","permalink":"http://devhc.com/tags/spark/"},{"name":"pyspark","slug":"pyspark","permalink":"http://devhc.com/tags/pyspark/"},{"name":"thrift","slug":"thrift","permalink":"http://devhc.com/tags/thrift/"},{"name":"pig","slug":"pig","permalink":"http://devhc.com/tags/pig/"},{"name":"cpp-primer","slug":"cpp-primer","permalink":"http://devhc.com/tags/cpp-primer/"},{"name":"read-notes","slug":"read-notes","permalink":"http://devhc.com/tags/read-notes/"},{"name":"matlab","slug":"matlab","permalink":"http://devhc.com/tags/matlab/"},{"name":"mail","slug":"mail","permalink":"http://devhc.com/tags/mail/"},{"name":"php","slug":"php","permalink":"http://devhc.com/tags/php/"},{"name":"deploy","slug":"deploy","permalink":"http://devhc.com/tags/deploy/"},{"name":"ios","slug":"ios","permalink":"http://devhc.com/tags/ios/"}]}