<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>all3n&#39;s blog</title>
  
  <subtitle>coding like r&amp;b</subtitle>
  <link href="http://devhc.com/atom.xml" rel="self"/>
  
  <link href="http://devhc.com/"/>
  <updated>2024-06-24T03:58:21.685Z</updated>
  <id>http://devhc.com/</id>
  
  <author>
    <name>all3n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++ stringview</title>
    <link href="http://devhc.com/cpp/lang/cpp-stringview/"/>
    <id>http://devhc.com/cpp/lang/cpp-stringview/</id>
    <published>2023-05-23T03:38:25.000Z</published>
    <updated>2024-06-24T03:58:21.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-StringView"><a href="#C-StringView" class="headerlink" title="C++ StringView"></a>C++ StringView</h1><p>在 C++17 中，引入了 <code>std::string_view</code> 类型，它是一个轻量级的、不可变的字符串视图，可以用来代替 <code>const char*</code> 和 <code>const std::string&amp;</code>，并且提供了许多方便的方法来操作字符串。<br>比如在一些新兴语言 rust 设计就直接支持<a href="https://doc.rust-lang.org/book/ch04-03-slices.html">&amp;str 切片</a></p><h2 id="创建-StringView"><a href="#创建-StringView" class="headerlink" title="创建 StringView"></a>创建 StringView</h2><p>可以通过以下方式来创建 <code>std::string_view</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从字符串字面量创建</span></span><br><span class="line"><span class="function">std::string_view <span class="title">sv1</span><span class="params">(<span class="string">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 std::string 创建</span></span><br><span class="line">std::string str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="function">std::string_view <span class="title">sv2</span><span class="params">(str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从部分 std::string 创建</span></span><br><span class="line">std::string str2 = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="function">std::string_view <span class="title">sv3</span><span class="params">(str2.c_str(), <span class="number">5</span>)</span></span>; <span class="comment">// 只包含前五个字符</span></span><br></pre></td></tr></table></figure><h2 id="StringView-的基本操作"><a href="#StringView-的基本操作" class="headerlink" title="StringView 的基本操作"></a>StringView 的基本操作</h2><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><p>可以使用 <code>size()</code> 方法来获取字符串的长度：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string_view <span class="title">sv</span><span class="params">(<span class="string">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; sv.<span class="built_in">size</span>() &lt;&lt; std::endl; <span class="comment">// 输出 13</span></span><br></pre></td></tr></table></figure><h3 id="访问字符串中的字符"><a href="#访问字符串中的字符" class="headerlink" title="访问字符串中的字符"></a>访问字符串中的字符</h3><p>可以使用 <code>operator[]</code> 或 <code>at()</code> 方法来访问字符串中的字符：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string_view <span class="title">sv</span><span class="params">(<span class="string">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class="line">std::cout &lt;&lt; sv[<span class="number">0</span>] &lt;&lt; std::endl; <span class="comment">// 输出 &#x27;H&#x27;</span></span><br><span class="line">std::cout &lt;&lt; sv.<span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt; std::endl; <span class="comment">// 输出 &#x27;e&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><p>可以使用 <code>substr()</code> 方法来截取字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string_view <span class="title">sv</span><span class="params">(<span class="string">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class="line">std::string_view sv2 = sv.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>); <span class="comment">// 截取前五个字符</span></span><br><span class="line">std::cout &lt;&lt; sv2 &lt;&lt; std::endl; <span class="comment">// 输出 &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><p>可以使用 <code>find()</code> 方法来查找子字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string_view <span class="title">sv</span><span class="params">(<span class="string">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="type">size_t</span> pos = sv.<span class="built_in">find</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != std::string_view::npos) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Found at position &quot;</span> &lt;&lt; pos &lt;&lt; std::endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Not found&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h3><p>可以使用 <code>operator==</code> 和 <code>operator!=</code> 来比较两个字符串是否相等：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string_view <span class="title">sv1</span><span class="params">(<span class="string">&quot;Hello, world!&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">std::string_view <span class="title">sv2</span><span class="params">(<span class="string">&quot;Hello&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (sv1 == sv2) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Equal&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Not equal&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StringView-的优点"><a href="#StringView-的优点" class="headerlink" title="StringView 的优点"></a>StringView 的优点</h2><p>使用 <code>std::string_view</code> 的好处在于它是一个轻量级的、不可变的字符串视图，可以避免不必要的内存分配和拷贝。在需要操作字符串的场合，使用 <code>std::string_view</code> 可以提高程序的性能和效率。</p><h2 id="C-17-以下解决方案"><a href="#C-17-以下解决方案" class="headerlink" title="C++17 以下解决方案"></a>C++17 以下解决方案</h2><ol><li><a href="https://github.com/abseil/abseil-cpp/blob/master/absl/strings/string_view.h">absl::string_view</a></li><li><a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tsl/platform/stringpiece.h">tensorflow stringpiece</a> 使用absl</li><li><a href="https://github.com/google/leveldb/blob/main/include/leveldb/slice.h">level db: Slice</a></li><li><a href="https://www.boost.org/doc/libs/1_67_0/boost/utility/string_view.hpp">boost string_view</a></li><li><a href="https://github.com/apache/brpc/blob/master/src/butil/strings/string_piece.h">brpc string_piece</a> brpc 注释copy from chromium</li><li><a href="https://chromium.googlesource.com/chromium/src/base/+/master/strings/string_piece.h">chromium sptring_piece</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>std::string_view</code> 是一个轻量级的、不可变的字符串视图，可以用来代替 <code>const char*</code> 和 <code>const std::string&amp;</code>，并且提供了许多方便的方法来操作字符串。在需要操作字符串的场合，使用 <code>std::string_view</code> 可以提高程序的性能和效率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-StringView&quot;&gt;&lt;a href=&quot;#C-StringView&quot; class=&quot;headerlink&quot; title=&quot;C++ StringView&quot;&gt;&lt;/a&gt;C++ StringView&lt;/h1&gt;&lt;p&gt;在 C++17 中，引入了 &lt;code&gt;std::s</summary>
      
    
    
    
    <category term="cpp" scheme="http://devhc.com/categories/cpp/"/>
    
    <category term="lang" scheme="http://devhc.com/categories/cpp/lang/"/>
    
    
    <category term="cpp" scheme="http://devhc.com/tags/cpp/"/>
    
    <category term="string" scheme="http://devhc.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>mac a1398 升级ssd更换电池 添加变相片</title>
    <link href="http://devhc.com/mac/mac-mac-upgrade-a1398/"/>
    <id>http://devhc.com/mac/mac-mac-upgrade-a1398/</id>
    <published>2023-05-13T11:30:00.000Z</published>
    <updated>2024-06-24T03:58:21.687Z</updated>
    
    <content type="html"><![CDATA[<p>家里一台老的mac book pro 由于时间旧发热严重，电池基本持续一个小时，循环次数600多，升级一下配件当做备用机</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>电脑背面 确定A1398 ,关于本机 2013 latest mbp</li><li>准备usb 128</li><li>在淘宝购买 不到1k<ol><li>三星980 1T</li><li>m.2 nvme ssd 转接头</li><li>A1398 电池</li><li>拆机套装工具包 可选，电池一般会送螺丝刀</li></ol></li></ol><h3 id="系统文件准备"><a href="#系统文件准备" class="headerlink" title="系统文件准备"></a>系统文件准备</h3><ol><li>download os: <a href="https://github.com/aeonme/gibMacOS">https://github.com/aeonme/gibMacOS</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/aeonme/gibMacOS.git</span><br><span class="line">cd gibMacOS</span><br><span class="line">./gibMacOS.command</span><br><span class="line">选择需要下载的系统id</span><br><span class="line">./BuildmacOSInstallApp.command 制作安装包 将安装包脱到/Applications</span><br></pre></td></tr></table></figure></li><li>格式化usb guid&#x2F;mac 日志格式 命名为macusb</li><li>根据 <a href="https://support.apple.com/en-us/HT201372">https://support.apple.com/en-us/HT201372</a> 命令提示执行安装os到usb</li><li>sudo &#x2F;Applications&#x2F;Install\ macOS\ Catalina.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia –volume &#x2F;Volumes&#x2F;macusb</li></ol><h3 id="电池更换"><a href="#电池更换" class="headerlink" title="电池更换"></a>电池更换</h3><ol><li>开始更换<ol><li>关机，拆开后盖 10颗螺丝</li><li>第一件事情 断开电源,去下电源卡扣下面两颗螺丝</li><li>用铲子铲电池,从两边往中间铲，全部铲掉即可  <img src="/mac/mac-mac-upgrade-a1398/a1398/after-battery.webp" class=""></li><li>换上电池,注意对齐两颗螺丝孔</li><li>连接电池，盖上盖子先不上螺丝 查看开机是否正常, 关于本机,循环次数1,关机, 上好固定螺丝，撕下电源粘胶</li></ol></li><li>更新ssd<ol><li>确保电源断开情况下</li><li>取下ssd固定螺丝，拔下ssd卡，将新买的nvme 980 插上转接头，放进去，注意要稍微用点力</li><li>按上固定螺丝，固定螺丝ssd卡买的时候会配和螺丝刀，盖上盖子</li><li>插上优盘,进去安装界面，格式化GUID&#x2F;APFS, 然后安装系统</li><li>安装之后用disk speed test 速度是没法跑到3k 由于这个机器比较老 接口速度受限 PCIE2.0 X 2, 只有5G&#x2F;s带宽, 但是是比之前快一倍，主要是容量的提升 <img src="/mac/mac-mac-upgrade-a1398/a1398/after-ssd.webp" class=""></li></ol></li><li>清洗灰尘 贴 变相片 <ol><li>确保电源断开情况下</li><li>拆机工具帽可以买 带硅脂或者变相片套装</li><li>拆下风扇导热铜管左右固定螺丝,注意螺丝有可能是被橡胶帽盖住</li><li>拆下cpu扇热器固定4颗螺丝,用酒精片清洗旧硅脂 <img src="/mac/mac-mac-upgrade-a1398/a1398/clean-cpu.webp" class=""></li><li>将变相片一边用送的贴纸撕下沾到散热器上,另一边也撕下，盖上上螺丝</li><li>灰层用清理套装小刷子轻轻刷下，我用吸尘器洗掉表面的灰 </li></ol></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>由于很多开发相关工具都是需要brew安装</li><li>brew 已经放弃11以下系统支持</li><li>我又将系统升级bigsur</li><li>为了节省功耗，可以关闭mac特效，聚焦spotlight 关闭其他只保留应用,避免索引耗电</li></ol><h3 id="如果需要11以下系统"><a href="#如果需要11以下系统" class="headerlink" title="如果需要11以下系统"></a>如果需要11以下系统</h3><ol><li>可以用mac ports 替换 brew 来作为包管理工具</li><li>降级时候如果出现不兼容的硬盘警告，表示格式化没有彻底，需要重新安装，先用mac journal日志格式化，然后在格式化成APFS</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;家里一台老的mac book pro 由于时间旧发热严重，电池基本持续一个小时，循环次数600多，升级一下配件当做备用机&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/</summary>
      
    
    
    
    <category term="mac" scheme="http://devhc.com/categories/mac/"/>
    
    
    <category term="mac" scheme="http://devhc.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>i3</title>
    <link href="http://devhc.com/linux/i3/tools-i3/"/>
    <id>http://devhc.com/linux/i3/tools-i3/</id>
    <published>2023-05-11T11:45:00.000Z</published>
    <updated>2024-06-24T03:58:21.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I3-WM-使用"><a href="#I3-WM-使用" class="headerlink" title="I3 WM 使用"></a>I3 WM 使用</h1><p>I3 WM是一个非常轻量平铺式linux桌面管理器，可自由定制<br>可以几乎不需要鼠标在workspace,terminal 之间来回切换</p><p>OS: Ubuntu 22.04</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install i3</span><br></pre></td></tr></table></figure><p>注销退出，在登录界面选择桌面 I3</p><p>进入提示生成默认配置，绑定Key 比如Win，配置生成 ~&#x2F;.config&#x2F;i3&#x2F;config<br>大部分key binding 没有动<br>注意 移动相关 默认 是 jkl;  不是hjkl</p><ol><li>mod 设置win</li><li>启动器dmenu改成rofi,dmenu 只能搜索path 不能执行desktop</li><li>设置picom 透明合成器</li><li>scrot 截图 </li><li>分配特定软件Workspace</li><li>可选安装FontAwesome</li></ol><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><ol><li>$mod 模式</li></ol><img src="/linux/i3/tools-i3/keyboard-layer1.webp" class=""><ol start="2"><li>Shift+$mod 模式</li></ol><img src="/linux/i3/tools-i3/keyboard-layer2.webp" class=""><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">set $alt Mod1</span><br><span class="line">set $mod Mod4</span><br><span class="line"># Font for window titles. Will also be used by the bar unless a different font</span><br><span class="line"># is used in the bar &#123;&#125; block below.</span><br><span class="line">font pango:monospace 8</span><br><span class="line"></span><br><span class="line">tiling_drag modifier titlebar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># This font is widely installed, provides lots of unicode glyphs, right-to-left</span><br><span class="line"># text rendering and scalability on retina/hidpi displays (thanks to pango).</span><br><span class="line">#font pango:DejaVu Sans Mono 8</span><br><span class="line"></span><br><span class="line"># Start XDG autostart .desktop files using dex. See also</span><br><span class="line"># https://wiki.archlinux.org/index.php/XDG_Autostart</span><br><span class="line">exec --no-startup-id dex --autostart --environment i3</span><br><span class="line"></span><br><span class="line"># The combination of xss-lock, nm-applet and pactl is a popular choice, so</span><br><span class="line"># they are included here as an example. Modify as you see fit.</span><br><span class="line"></span><br><span class="line"># xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the</span><br><span class="line"># screen before suspend. Use loginctl lock-session to lock your screen.</span><br><span class="line">exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork</span><br><span class="line"></span><br><span class="line"># NetworkManager is the most popular way to manage wireless networks on Linux,</span><br><span class="line"># and nm-applet is a desktop environment-independent system tray GUI for it.</span><br><span class="line">exec --no-startup-id nm-applet</span><br><span class="line"></span><br><span class="line"># Use pactl to adjust volume in PulseAudio.</span><br><span class="line">set $refresh_i3status killall -SIGUSR1 i3status</span><br><span class="line">bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle &amp;&amp; $refresh_i3status</span><br><span class="line">bindsym $mod+$alt+l exec i3lock-fancy</span><br><span class="line"></span><br><span class="line"># Use Mouse+$mod to drag floating windows to their wanted position</span><br><span class="line">floating_modifier $mod</span><br><span class="line">#tiling_drag $mod titlebar</span><br><span class="line"></span><br><span class="line">#bindsym $mod+e exec --no-startup-id pcmanfm &amp;&amp; $refresh_i3status</span><br><span class="line"># start a terminal</span><br><span class="line">bindsym $mod+Return exec i3-sensible-terminal</span><br><span class="line">#bindsym $mod+Return exec alacritty</span><br><span class="line"></span><br><span class="line"># kill focused window</span><br><span class="line">bindsym $mod+Shift+q kill</span><br><span class="line"></span><br><span class="line">#bindsym $mod+d exec --no-startup-id dmenu_run</span><br><span class="line">bindsym $mod+d exec &quot;rofi -modi drun,run -show drun&quot;</span><br><span class="line"></span><br><span class="line"># change focus</span><br><span class="line">bindsym $mod+j focus left</span><br><span class="line">bindsym $mod+k focus down</span><br><span class="line">bindsym $mod+l focus up</span><br><span class="line">bindsym $mod+semicolon focus right</span><br><span class="line"></span><br><span class="line"># move focused window</span><br><span class="line">bindsym $mod+Shift+j move left</span><br><span class="line">bindsym $mod+Shift+k move down</span><br><span class="line">bindsym $mod+Shift+l move up</span><br><span class="line">bindsym $mod+Shift+semicolon move right</span><br><span class="line"></span><br><span class="line"># alternatively, you can use the cursor keys:</span><br><span class="line">bindsym $mod+Shift+Left move left</span><br><span class="line">bindsym $mod+Shift+Down move down</span><br><span class="line">bindsym $mod+Shift+Up move up</span><br><span class="line">bindsym $mod+Shift+Right move right</span><br><span class="line"></span><br><span class="line"># split in horizontal orientation</span><br><span class="line">bindsym $mod+h split h</span><br><span class="line"></span><br><span class="line"># split in vertical orientation</span><br><span class="line">bindsym $mod+v split v</span><br><span class="line"></span><br><span class="line"># enter fullscreen mode for the focused container</span><br><span class="line">bindsym $mod+f fullscreen toggle</span><br><span class="line"></span><br><span class="line"># change container layout (stacked, tabbed, toggle split)</span><br><span class="line">bindsym $mod+s layout stacking</span><br><span class="line">bindsym $mod+t layout tabbed</span><br><span class="line">bindsym $mod+w layout toggle split</span><br><span class="line"></span><br><span class="line"># toggle tiling / floating</span><br><span class="line">bindsym $mod+Shift+space floating toggle</span><br><span class="line"></span><br><span class="line"># change focus between tiling / floating windows</span><br><span class="line">bindsym $mod+space focus mode_toggle</span><br><span class="line"></span><br><span class="line"># focus the parent container</span><br><span class="line">bindsym $mod+a focus parent</span><br><span class="line"></span><br><span class="line"># focus the child container</span><br><span class="line">#bindsym $mod+d focus child</span><br><span class="line"></span><br><span class="line"># Define names for default workspaces for which we configure key bindings later on.</span><br><span class="line"># We use variables to avoid repeating the names in multiple places.</span><br><span class="line">set $ws1 &quot;1:&quot;</span><br><span class="line">set $ws2 &quot;2:&quot;</span><br><span class="line">set $ws3 &quot;3:&quot;</span><br><span class="line">set $ws4 &quot;4&quot;</span><br><span class="line">set $ws5 &quot;5&quot;</span><br><span class="line">set $ws6 &quot;6&quot;</span><br><span class="line">set $ws7 &quot;7&quot;</span><br><span class="line">set $ws8 &quot;8&quot;</span><br><span class="line">set $ws9 &quot;9&quot;</span><br><span class="line">set $ws10 &quot;10&quot;</span><br><span class="line"></span><br><span class="line"># switch to workspace</span><br><span class="line">bindsym $mod+1 workspace number $ws1</span><br><span class="line">bindsym $mod+2 workspace number $ws2</span><br><span class="line">bindsym $mod+3 workspace number $ws3</span><br><span class="line">bindsym $mod+4 workspace number $ws4</span><br><span class="line">bindsym $mod+5 workspace number $ws5</span><br><span class="line">bindsym $mod+6 workspace number $ws6</span><br><span class="line">bindsym $mod+7 workspace number $ws7</span><br><span class="line">bindsym $mod+8 workspace number $ws8</span><br><span class="line">bindsym $mod+9 workspace number $ws9</span><br><span class="line">bindsym $mod+0 workspace number $ws10</span><br><span class="line"></span><br><span class="line"># move focused container to workspace</span><br><span class="line">bindsym $mod+Shift+1 move container to workspace number $ws1</span><br><span class="line">bindsym $mod+Shift+2 move container to workspace number $ws2</span><br><span class="line">bindsym $mod+Shift+3 move container to workspace number $ws3</span><br><span class="line">bindsym $mod+Shift+4 move container to workspace number $ws4</span><br><span class="line">bindsym $mod+Shift+5 move container to workspace number $ws5</span><br><span class="line">bindsym $mod+Shift+6 move container to workspace number $ws6</span><br><span class="line">bindsym $mod+Shift+7 move container to workspace number $ws7</span><br><span class="line">bindsym $mod+Shift+8 move container to workspace number $ws8</span><br><span class="line">bindsym $mod+Shift+9 move container to workspace number $ws9</span><br><span class="line">bindsym $mod+Shift+0 move container to workspace number $ws10</span><br><span class="line"></span><br><span class="line"># reload the configuration file</span><br><span class="line">bindsym $mod+Shift+c reload</span><br><span class="line"># restart i3 inplace (preserves your layout/session, can be used to upgrade i3)</span><br><span class="line">bindsym $mod+Shift+r restart</span><br><span class="line"># exit i3 (logs you out of your X session)</span><br><span class="line">bindsym $mod+Shift+e exec &quot;i3-nagbar -t warning -m &#x27;You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.&#x27; -B &#x27;Yes, exit i3&#x27; &#x27;i3-msg exit&#x27;&quot;</span><br><span class="line"></span><br><span class="line">mode &quot;resize&quot; &#123;</span><br><span class="line">        bindsym h resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym j resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym k resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym l resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        bindsym Left resize shrink width 10 px or 10 ppt</span><br><span class="line">        bindsym Down resize grow height 10 px or 10 ppt</span><br><span class="line">        bindsym Up resize shrink height 10 px or 10 ppt</span><br><span class="line">        bindsym Right resize grow width 10 px or 10 ppt</span><br><span class="line"></span><br><span class="line">        bindsym Return mode &quot;default&quot;</span><br><span class="line">        bindsym Escape mode &quot;default&quot;</span><br><span class="line">        bindsym $mod+r mode &quot;default&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bindsym $mod+r mode &quot;resize&quot;</span><br><span class="line">bindsym $mod+e exec --no-startup-id nautilus</span><br><span class="line">bindsym $mod+c exec --no-startup-id google-chrome</span><br><span class="line">bindsym $mod+shift+z exec --no-startup-id ~/bin/ranger-run</span><br><span class="line"></span><br><span class="line">bar &#123;</span><br><span class="line">    id my_bar</span><br><span class="line">    status_command i3status --config ~/.config/i3/i3status --transparency</span><br><span class="line">    position top</span><br><span class="line">    font pango:FontAwesome</span><br><span class="line">    colors &#123;</span><br><span class="line">        background #000000</span><br><span class="line">        statusline #00FF00</span><br><span class="line">        separator #B8F788</span><br><span class="line">        separator #00FFFF</span><br><span class="line">        focused_workspace #B8F788 #000000AA</span><br><span class="line">        active_workspace #FFFFFF #FFFFFFAA</span><br><span class="line">        inactive_workspace #AAAAAA #000000AA #AAAAAA</span><br><span class="line">        urgent_workspace #E57B85 #000000AA</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assign [class=&quot;i3-sensible-terminal&quot;] $ws1</span><br><span class="line">assign [class=&quot;Firefox&quot;] $ws2</span><br><span class="line">assign [class=&quot;google-chrome&quot;] $ws2</span><br><span class="line">assign [class=&quot;google-chrome-stable&quot;] $ws2</span><br><span class="line">assign [class=&quot;chrome&quot;] $ws2</span><br><span class="line">assign [class=&quot;jetbrains-idea&quot;] $ws3</span><br><span class="line">assign [class=&quot;code&quot;] $ws3</span><br><span class="line"></span><br><span class="line">exec_always --no-startup-id picom -b</span><br><span class="line">exec --no-startup-id &quot;bash $HOME/Pictures/backgrounds/wallpaper.sh -d &gt; $HOME/logs/wallpaper.log 2&gt;&amp;1&quot;</span><br><span class="line">bindsym --release $mod+z exec scrot -s &quot;$HOME/Pictures/screenshots/%F_%T_$wx$h.png&quot; -e &#x27;xclip -selection clipboard -target image/png -i $f&#x27;</span><br></pre></td></tr></table></figure><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><ol><li>如何获取应用class, 命令行执行xprop, 点击程序界面即可看到命令行输出</li><li>某个键的code:   xev</li><li>获取code map映射: xmodmap -pk</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;I3-WM-使用&quot;&gt;&lt;a href=&quot;#I3-WM-使用&quot; class=&quot;headerlink&quot; title=&quot;I3 WM 使用&quot;&gt;&lt;/a&gt;I3 WM 使用&lt;/h1&gt;&lt;p&gt;I3 WM是一个非常轻量平铺式linux桌面管理器，可自由定制&lt;br&gt;可以几乎不需要鼠标在w</summary>
      
    
    
    
    <category term="linux" scheme="http://devhc.com/categories/linux/"/>
    
    <category term="i3" scheme="http://devhc.com/categories/linux/i3/"/>
    
    
    <category term="linux" scheme="http://devhc.com/tags/linux/"/>
    
    <category term="tools" scheme="http://devhc.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>pycharm 支持tensorflow提示</title>
    <link href="http://devhc.com/tensorflow/pycharm/tools-pycharm/"/>
    <id>http://devhc.com/tensorflow/pycharm/tools-pycharm/</id>
    <published>2019-12-15T06:10:11.000Z</published>
    <updated>2024-07-09T08:45:58.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pycharm-支持tensorflow提示"><a href="#pycharm-支持tensorflow提示" class="headerlink" title="pycharm 支持tensorflow提示"></a>pycharm 支持tensorflow提示</h2><p>默认tensorflow package keras是通过_LazyLoader 方式延迟加载 导致pycharm 不能正常提示<br>可以通过_typing.TYPE_CHECKING 判断是否类型检查直接import keras</p><p>site-packages&#x2F;tensorflow&#x2F;<strong>init</strong>.py near line 387 左右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_keras_module = <span class="string">&quot;keras.api._v2.keras&quot;</span></span><br><span class="line">keras = _LazyLoader(<span class="string">&quot;keras&quot;</span>, <span class="built_in">globals</span>(), _keras_module)</span><br><span class="line">_module_dir = _module_util.get_parent_dir_for_name(_keras_module)</span><br><span class="line"><span class="keyword">if</span> _module_dir:</span><br><span class="line">  _current_module.__path__ = [_module_dir] + _current_module.__path__</span><br><span class="line"><span class="built_in">setattr</span>(_current_module, <span class="string">&quot;keras&quot;</span>, keras)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> _typing</span><br><span class="line"><span class="keyword">if</span> _typing.TYPE_CHECKING:</span><br><span class="line">  <span class="keyword">from</span> keras.api._v2 <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  _keras_module = <span class="string">&quot;keras.api._v2.keras&quot;</span></span><br><span class="line">  keras = _LazyLoader(<span class="string">&quot;keras&quot;</span>, <span class="built_in">globals</span>(), _keras_module)</span><br><span class="line">  _module_dir = _module_util.get_parent_dir_for_name(_keras_module)</span><br><span class="line">  <span class="keyword">if</span> _module_dir:</span><br><span class="line">    _current_module.__path__ = [_module_dir] + _current_module.__path__</span><br><span class="line">  <span class="built_in">setattr</span>(_current_module, <span class="string">&quot;keras&quot;</span>, keras)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pycharm-支持tensorflow提示&quot;&gt;&lt;a href=&quot;#pycharm-支持tensorflow提示&quot; class=&quot;headerlink&quot; title=&quot;pycharm 支持tensorflow提示&quot;&gt;&lt;/a&gt;pycharm 支持tensorflow</summary>
      
    
    
    
    <category term="tensorflow" scheme="http://devhc.com/categories/tensorflow/"/>
    
    <category term="pycharm" scheme="http://devhc.com/categories/tensorflow/pycharm/"/>
    
    
    <category term="tensorflow" scheme="http://devhc.com/tags/tensorflow/"/>
    
    <category term="pycharm" scheme="http://devhc.com/tags/pycharm/"/>
    
  </entry>
  
  <entry>
    <title>JsonCpp Guide</title>
    <link href="http://devhc.com/cpp/libs/cpp-libs-jsoncpp/"/>
    <id>http://devhc.com/cpp/libs/cpp-libs-jsoncpp/</id>
    <published>2019-10-11T02:06:12.000Z</published>
    <updated>2024-06-24T03:58:21.684Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/open-source-parsers/jsoncpp">Github</a></p><h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><ul><li><a href="http://open-source-parsers.github.io/jsoncpp-docs/doxygen/index.html">Official ApiDoc</a> 新版用法</li><li><a href="https://en.wikibooks.org/wiki/JsonCpp">jsoncpp WikiBook</a> 该文档是老版本写法</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><ol><li>Build From Source<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=/opt/cpplibs ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li>使用包管理工具 缺点不能灵活控制版本<br>apt-get install libjsoncpp-dev</li></ol><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><figure class="highlight cpp"><figcaption><span>json_v1.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;json/json.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string jsonStr = <span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;xxx\&quot;, \&quot;array\&quot;: [\&quot;a\&quot;, \&quot;b\&quot;, \&quot;c\&quot;], \&quot;obj\&quot;: &#123;\&quot;k\&quot; : \&quot;v\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">    Json::Reader reader;</span><br><span class="line">    Json::Value value;</span><br><span class="line">    <span class="keyword">if</span> (reader.<span class="built_in">parse</span>(jsonStr, value)) &#123;</span><br><span class="line">        <span class="comment">// read str field</span></span><br><span class="line">        cout&lt;&lt;value[<span class="string">&quot;name&quot;</span>].<span class="built_in">asString</span>()&lt;&lt;endl;</span><br><span class="line">        <span class="comment">// read array field</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; value[<span class="string">&quot;array&quot;</span>].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;value[<span class="string">&quot;array&quot;</span>][i].<span class="built_in">asString</span>()&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// read obj field</span></span><br><span class="line">        cout&lt;&lt;value[<span class="string">&quot;obj&quot;</span>][<span class="string">&quot;k&quot;</span>].<span class="built_in">asString</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compile:<br>g++ -I&#x2F;opt&#x2F;cpplibs&#x2F;include&#x2F; -o json_v1 json_v1.cpp &#x2F;opt&#x2F;cpplibs&#x2F;lib&#x2F;libjsoncpp.a &amp;&amp; .&#x2F;json_v1</p><p>output</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">json_v1.cpp: In function ‘int main(int, char**)’:</span><br><span class="line">json_v1.cpp:20:18: warning: ‘Reader’ is deprecated: Use CharReader and CharReaderBuilder instead [-Wdeprecated-declarations]</span><br><span class="line">     Json::Reader reader;</span><br><span class="line">                  ^~~~~~</span><br><span class="line">In file included from /data/cpplibs/include/jsoncpp/json/json.h:11:0,</span><br><span class="line">                 from json_v1.cpp:10:</span><br><span class="line">/data/cpplibs/include/jsoncpp/json/reader.h:35:83: note: declared here</span><br><span class="line"> class JSONCPP_DEPRECATED(&quot;Use CharReader and CharReaderBuilder instead&quot;) JSON_API Reader &#123;</span><br><span class="line">                                                                                   ^~~~~~</span><br><span class="line">xxx</span><br><span class="line">0:a</span><br><span class="line">1:b</span><br><span class="line">2:c</span><br><span class="line">v</span><br></pre></td></tr></table></figure><p>注意这里使用老版本reader api会引起警告</p><h2 id="Example-New-Api"><a href="#Example-New-Api" class="headerlink" title="Example New Api"></a>Example New Api</h2><figure class="highlight cpp"><figcaption><span>json_v2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;json/json.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string jsonStr = <span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;xxx\&quot;, \&quot;array\&quot;: [\&quot;a\&quot;, \&quot;b\&quot;, \&quot;c\&quot;], \&quot;obj\&quot;: &#123;\&quot;k\&quot; : \&quot;v\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Json::Value value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parse</span></span><br><span class="line">    JSONCPP_STRING errs;</span><br><span class="line">    Json::CharReaderBuilder readerBuilder;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;Json::CharReader&gt; <span class="type">const</span> <span class="title">reader</span><span class="params">(readerBuilder.newCharReader())</span></span>;</span><br><span class="line">    <span class="type">bool</span> res = reader-&gt;<span class="built_in">parse</span>(jsonStr.<span class="built_in">c_str</span>(), jsonStr.<span class="built_in">c_str</span>() + jsonStr.<span class="built_in">length</span>(), &amp;value, &amp;errs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (res &amp;&amp; errs.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// read str field</span></span><br><span class="line">        cout&lt;&lt;value[<span class="string">&quot;name&quot;</span>].<span class="built_in">asString</span>()&lt;&lt;endl;</span><br><span class="line">        <span class="comment">// read array field</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; value[<span class="string">&quot;array&quot;</span>].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;value[<span class="string">&quot;array&quot;</span>][i].<span class="built_in">asString</span>()&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// read obj field</span></span><br><span class="line">        cout&lt;&lt;value[<span class="string">&quot;obj&quot;</span>][<span class="string">&quot;k&quot;</span>].<span class="built_in">asString</span>()&lt;&lt;endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;json parse fail:&quot;</span>&lt;&lt;errs&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码方式<br>g++ -I&#x2F;opt&#x2F;cpplibs&#x2F;include&#x2F; -o json_v2 json_v2.cpp &#x2F;opt&#x2F;cpplibs&#x2F;lib&#x2F;libjsoncpp.a &amp;&amp; .&#x2F;json_v2</p><p>如果使用包管理<br>共享库方式编译<br>g++ -I&#x2F;usr&#x2F;include&#x2F;jsoncpp -ljsoncpp -o json_v2 json_v2.cpp<br>静态库方式编译<br>g++ -I&#x2F;usr&#x2F;include&#x2F;jsoncpp -ljsoncpp -o json_v2 json_v2.cpp &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libjsoncpp.a</p><p>output 已经没有警告了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xxx</span><br><span class="line">0:a</span><br><span class="line">1:b</span><br><span class="line">2:c</span><br><span class="line">v</span><br></pre></td></tr></table></figure><h2 id="Json-Value"><a href="#Json-Value" class="headerlink" title="Json::Value"></a><a href="https://github.com/open-source-parsers/jsoncpp/blob/1.9.1/include/json/value.h#L176">Json::Value</a></h2><ol><li>判断类型 bool isXxx()<ul><li>isNull</li><li>isBool</li><li>isInt</li><li>isInt64</li><li>isNumbeic</li><li>isString</li><li>isObject</li><li>isArray</li></ul></li><li>转换原生类型 asXxx()<ul><li>asInt</li><li>asInt64</li><li>asBool</li><li>asDouble</li></ul></li><li>访问字段<ul><li>[] 方式访问 val[“field”]</li><li>key是否存在 isMember(“field”)</li></ul></li><li>转成格式化字符串<ul><li>String toStyledString()</li></ul></li></ol><h2 id="流操作"><a href="#流操作" class="headerlink" title="流操作"></a>流操作</h2><ul><li>读取: <a href="http://open-source-parsers.github.io/jsoncpp-docs/doxygen/namespace_json.html#acfebeaf759a841173ddce34c4da22486">Json::parseFromStream</a></li><li>输出: <a href="http://open-source-parsers.github.io/jsoncpp-docs/doxygen/namespace_json.html#afd767fe4c7e962d0ff3d1a6d1622619f">writeString</a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Json::StreamWriterBuilder wbuilder; </span><br><span class="line">wbuilder[<span class="string">&quot;indentation&quot;</span>] = <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">std::string document = Json::<span class="built_in">writeString</span>(wbuilder, root);</span><br><span class="line">Json::CharReaderBuilder rbuilder;</span><br><span class="line">rbuilder[<span class="string">&quot;collectComments&quot;</span>] = <span class="literal">false</span>;</span><br><span class="line">std::string errs;</span><br><span class="line"><span class="type">bool</span> ok = Json::<span class="built_in">parseFromStream</span>(rbuilder, std::cin, &amp;root, &amp;errs);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/open-source-parsers/jsoncpp&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Documentation&quot;&gt;&lt;a href=&quot;#Documentation&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="cpp" scheme="http://devhc.com/categories/cpp/"/>
    
    <category term="libs" scheme="http://devhc.com/categories/cpp/libs/"/>
    
    
    <category term="cpp" scheme="http://devhc.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow print</title>
    <link href="http://devhc.com/tensorflow/framework/tensorflow-tf-print/"/>
    <id>http://devhc.com/tensorflow/framework/tensorflow-tf-print/</id>
    <published>2019-09-27T11:39:10.000Z</published>
    <updated>2024-06-24T03:58:21.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tf-Print"><a href="#tf-Print" class="headerlink" title="tf.Print"></a><a href="https://www.tensorflow.org/api_docs/python/tf/Print?hl=en">tf.Print</a></h2><p> 该op已经deprecated,目前已经不建议使用<br> 以前大部分使用tf.Print 打印变量类似一下代码<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">some_op = ...</span><br><span class="line">some_op = tf.Print(some_op, [tf.shape(some_op), <span class="string">&quot;some_op:&quot;</span>])</span><br><span class="line">...</span><br><span class="line">sess.run(some_op)</span><br></pre></td></tr></table></figure><br> 这个API已经在新的里面被移除了,使用小写tf.print代替,但是操作方式有点差异</p><h2 id="tf-print"><a href="#tf-print" class="headerlink" title="tf.print"></a><a href="https://www.tensorflow.org/api_docs/python/tf/print?hl=en">tf.print</a></h2><p>tf.print<br>没有是一个print operation</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print_ops = []</span><br><span class="line"></span><br><span class="line">def print_op(*inputs , **kwargs):</span><br><span class="line">    print_ops.append(tf.print(*inputs, **kwargs))</span><br><span class="line"></span><br><span class="line">x = tf.range(10)</span><br><span class="line"></span><br><span class="line">print_op(&quot;x&quot;, x)</span><br><span class="line">print_op(&quot;x_no_summarize&quot;, x, summarize = -1)</span><br><span class="line">print_op(&quot;x_output_stream&quot;, x, output_stream = sys.stdout)</span><br><span class="line"></span><br><span class="line"># tf1.13开始支持 文件 file:// 开头</span><br><span class="line">print_op(&quot;x_file&quot;, x, output_stream = &quot;file:///tmp/debug.log&quot;)</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">    with tf.control_dependencies(print_ops):</span><br><span class="line">        b = x * 3</span><br><span class="line">    print(sess.run(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>x [0 1 2 … 7 8 9]<br>x_no_summarize [0 1 2 3 4 5 6 7 8 9]<br>x_output_stream [0 1 2 … 7 8 9]<br>[ 0  3  6  9 12 15 18 21 24 27]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /tmp/debug.log                                                              </span><br><span class="line">x_file [0 1 2 ... 7 8 9]</span><br></pre></td></tr></table></figure><h2 id="tf-print-eager-模式"><a href="#tf-print-eager-模式" class="headerlink" title="tf.print eager 模式"></a>tf.print eager 模式</h2><ol><li><p>单个tensor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.compat.v1.enable_eager_execution()</span><br><span class="line">tensor = tf.range(10)</span><br><span class="line">tf.print(tensor, output_stream=sys.stderr)</span><br></pre></td></tr></table></figure></li><li><p>多个tensor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf.compat.v1.enable_eager_execution()</span><br><span class="line">tensor = tf.range(10)</span><br><span class="line">tf.print(&quot;tensors:&quot;, tensor, &#123;2: tensor * 2&#125;, output_stream=sys.stdout)</span><br></pre></td></tr></table></figure></li><li><p>函数内</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import sys</span><br><span class="line">tf.enable_eager_execution()</span><br><span class="line"></span><br><span class="line">@tf.contrib.eager.defun</span><br><span class="line">def f():</span><br><span class="line">    tensor = tf.range(10)</span><br><span class="line">    tf.print(&quot;debug:&quot;, tensor, output_stream=sys.stderr)</span><br><span class="line">    return tensor</span><br><span class="line"></span><br><span class="line">range_tensor = f()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tf-Print&quot;&gt;&lt;a href=&quot;#tf-Print&quot; class=&quot;headerlink&quot; title=&quot;tf.Print&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.tensorflow.org/api_docs/python/tf/Print?h</summary>
      
    
    
    
    <category term="tensorflow" scheme="http://devhc.com/categories/tensorflow/"/>
    
    <category term="framework" scheme="http://devhc.com/categories/tensorflow/framework/"/>
    
    
    <category term="tensorflow" scheme="http://devhc.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>微积分</title>
    <link href="http://devhc.com/math/math-2019-09-26-calculas/"/>
    <id>http://devhc.com/math/math-2019-09-26-calculas/</id>
    <published>2019-09-26T15:14:54.000Z</published>
    <updated>2024-06-24T03:58:21.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a><a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%AD%A6">微积分</a></h1><h3 id="3Blue1Brown-微积分的本质"><a href="#3Blue1Brown-微积分的本质" class="headerlink" title="3Blue1Brown 微积分的本质"></a>3Blue1Brown 微积分的本质</h3><p><a href="https://www.bilibili.com/video/av24325548/">bilibili</a></p><h2 id="极限和无穷小"><a href="#极限和无穷小" class="headerlink" title="极限和无穷小"></a><a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%AA%AE%E5%B0%8F%E9%87%8F">极限和无穷小</a></h2><h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a><a href="https://zh.wikipedia.org/wiki/%E5%AF%BC%E6%95%B0">导数</a></h2><p>一个函数在某一点的导数描述了这个函数在这一点附近的<strong>变化率</strong><br>导数的本质是通过极限的概念对函数进行局部的线性逼近。当函数 ${\displaystyle f}$ 的自变量在一点 ${\displaystyle x_{0}} $上产生一个增量 ${\displaystyle h}$ 时，函数输出值的增量与自变量增量 ${\displaystyle h}$的比值在 ${\displaystyle h}$趋于0时的极限如果存在，即为 ${\displaystyle f}$在 ${\displaystyle x_{0}}$处的导数，记作 ${\displaystyle f’(x_{0})}$、 ${\displaystyle {\frac {\mathrm {d} f}{\mathrm {d} x}}(x_{0})}$或 $\left.{\frac {d f}{d x}}\right|{x&#x3D;x_{0}}$</p><p>导数的定义：f在x0点的导数<br>$$ f’(x_0)&#x3D;\lim_{x \to x_0}\frac{f(x)-f(x_0)}{x - x_0} $$</p><p>几何意义：相当于曲线该点切线斜率</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/de/Derivative_-_geometric_meaning.svg/600px-Derivative_-_geometric_meaning.svg.png" alt="几何意义" title="">                </div>                <div class="image-caption">几何意义</div>            </figure><p>P0点斜率为$\alpha$,在微分中让x变化一个很小的一个值$\Delta x$,y变化了$\Delta y$, 当$\Delta x$变的无穷小时候,$\frac{\Delta y}{\Delta x}$就逼近该点的真实斜率<br>$\tan \alpha&#x3D;\lim_{\Delta x \to 0} \tan \varphi&#x3D;\lim_{\Delta x \to 0} \frac{f(x_0 + \Delta x)-f(x_0)}{\Delta x}$<br>$$  \Delta x\to 0，  \varphi \to \alpha $$</p><h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><p>微分学主要研究的是在函数自变量变化时如何确定函数值的瞬时变化率（导数或微商）。换言之，计算 <em>导数</em> 的方法就叫 <em>微分</em></p><h2 id="积分"><a href="#积分" class="headerlink" title="积分"></a><a href="https://zh.wikipedia.org/wiki/%E7%A7%AF%E5%88%86">积分</a></h2><p>积分是微分的逆运算，即从导数推算出原函数，又分为定积分与不定积分。</p><ol><li>定积分:<ol><li>几何意义等价函数下方面积 $\int_a^b f(x),\mathrm{d}x$</li></ol></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86">不定积分</a><ol><li>原函数</li></ol></li><li>第一基本定理<br>设 $ a,b\in {\mathbb  {R}}$， $ {\displaystyle f:[a,b]\mapsto \mathbb {R} }$为连续函数，对所有的 $ x\in [a,b]$，定义函数 F 如下：</li></ol><p>${\displaystyle F(x)&#x3D;\int _{a}^{x}f(t)dt}$<br>则 F 在闭区间 [a,b] 连续，并在开区间 (a, b)可微， 且对所有在开区间 (a, b) 中的 x，有</p><p>$ F’(x)&#x3D;f(x)$</p><ol start="4"><li>第二基本定理：如果函数 x f是闭区间  [a,b] 上的连续函数，F  是 f 在 [a,b] 上的一个反导函数，那么有<br>${\displaystyle \int _{a}^{b}f(x),\mathrm {d} x&#x3D;F(b)-F(a)} $</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload.wikimedia.org/wikipedia/commons/2/2f/Fundamental_theorem_of_calculus_%28animation%29.gif" alt="Fundamental_theorem_of_calculus_(animation)" title="">                </div>                <div class="image-caption">Fundamental_theorem_of_calculus_(animation)</div>            </figure><h2 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a><a href="https://zh.wikipedia.org/wiki/%E5%81%8F%E5%AF%BC%E6%95%B0">偏导数</a></h2><p>一个多变量的函数的偏导数（英语：partial derivative）是它关于其中一个变量的导数，而保持其他变量恒定（相对于全导数，在其中所有变量都允许变化）<br>∂代表偏导符号,是一个弯曲的d，称为偏导数符号。为了把它与字母d区分，∂有时读作“der”、“del”、“dah”或“偏”，而不是“dee”<br>函数f可以解释为y为自变量而x为常数的函数：</p><p>$f(x,y) &#x3D; f_x(y) &#x3D; x^2 + xy + y^2$<br>f在y方向上的变化：</p><p>$\frac {\partial f}{\partial y}(x,y)&#x3D;x+2y$</p><h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h2><ul><li>d: 微分学中的符号dx,dy等,是由莱布尼茨首先使用.d源自拉丁语中“差”(Differentia)的第一个字母</li><li>$\int$: 积分符号亦由莱布尼茨所创,它是拉丁语”总和”(Summa)的第一个字母s的伸长(和Σ有相同的意义)</li></ul><h2 id="常见导数"><a href="#常见导数" class="headerlink" title="常见导数"></a>常见导数</h2><ol><li>幂函数的导数：</li></ol><ul><li>$\frac{d}{dx}x^{r}&#x3D;rx^{r-1}$</li></ul><ol start="2"><li>指数函数导数 是它自</li></ol><ul><li>指数函数:$e^{x}$: $\frac{d}{dx}e^x&#x3D;e^{x}$</li><li>一般的指数函数:$\frac{d}{dx}a^x &#x3D; \ln(a)a^x$</li></ul><ol><li>三角函数的导数:仍然是三角函数,或者由三角函数构成</li></ol><ul><li>$ \frac {d}{dx}\sin(x)&#x3D;\cos(x) $</li><li>$ \frac {d}{dx}\cos(x)&#x3D;-\sin(x)$</li><li>$ \frac {d}{dx}\tan(x)&#x3D;\sec ^{2}(x)&#x3D;{\frac {1}{\cos ^{2}(x)}}&#x3D;1+\tan ^{2}(x)$</li><li>$ \frac {d }{d x}\cot(x)&#x3D;-\csc ^{2}(x)&#x3D;-{\frac {1}{\sin ^{2}(x)}} $</li></ul><h2 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a><a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99">链式法则</a></h2><ul><li>$(f\circ g)’(x)&#x3D;f’(g(x))g’(x).$</li><li>考虑函数z &#x3D; f(x, y)，其中x &#x3D; g(t)，y &#x3D; h(t)，g(t)和h(t)是可微函数，那么：</li><li>${\ dz \over dt}&#x3D;{\partial z \over \partial x}{dx \over dt}+{\partial z \over \partial y}{dy \over dt}.$</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%B3%B0%E5%8B%92%E7%BA%A7%E6%95%B0">泰勒级数</a><br>$f(x)&#x3D;f(a)+{\frac  {f’(a)}{1!}}(x-a)+{\frac  {f^2(a)}{2!}}(x-a)^{2}+\cdots +{\frac  {f^(a)}{n!}}(x-a)^{n}+R_{n}(x)$<br>一般在机器学习中用到的是</p><ul><li>一阶展开:(梯度下降)<ul><li>$f(x)&#x3D;f(a)+f’(a)(x-a)$</li></ul></li><li>二阶展开:(牛顿法)<ul><li>$f(x)&#x3D;f(a)+f’(a)(x-a)+{\frac  {f^2(a)}{2}}(x-a)^{2}$</li></ul></li></ul><p>泰勒公式的目的是为了用一个多项式逼近一个函数<br>让多项式每一阶导数和函数的导数相同<br>拉格朗日型余项:<br>$R_{n}(x)&#x3D;{\frac  {f^NaN(\theta )}{(n+1)!}}(x-a)^NaN$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微积分&quot;&gt;&lt;a href=&quot;#微积分&quot; class=&quot;headerlink&quot; title=&quot;微积分&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%AD%A6&quot;&gt;</summary>
      
    
    
    
    <category term="math" scheme="http://devhc.com/categories/math/"/>
    
    
    <category term="math" scheme="http://devhc.com/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>install kubernetes in china</title>
    <link href="http://devhc.com/container/kubernetes/k8s-install-k8s/"/>
    <id>http://devhc.com/container/kubernetes/k8s-install-k8s/</id>
    <published>2019-09-09T02:41:21.000Z</published>
    <updated>2024-06-24T03:58:21.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="install-kubernets-in-china"><a href="#install-kubernets-in-china" class="headerlink" title="install kubernets in china"></a>install kubernets in china</h1><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">官方文档</a></p><h2 id="1-环境相关设置"><a href="#1-环境相关设置" class="headerlink" title="1. 环境相关设置"></a>1. 环境相关设置</h2><ol><li>关闭swap<br>然后需要禁用swap文件，这是Kubernetes的强制步骤。实现它很简单，编辑&#x2F;etc&#x2F;fstab文件，注释掉引用swap的行 去掉开机挂载swap<br>如果不重启 可以sudo swapoff -a 可以直接关掉<br>对于禁用swap内存，主要是为了性能考虑，具体原因可以查看Github上的Issue：Kubelet&#x2F;Kubernetes should work with Swap Enabled。</li><li>关闭SELinux，修改SELINUX属性</li></ol><p>#setenforce 0<br>#vi &#x2F;etc&#x2F;sysconfig&#x2F;selinux<br>SELINUX&#x3D;disabled</p><ol start="3"><li>设置iptables</li></ol><p>#vi &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf<br>net.bridge.bridge-nf-call-ip6tables &#x3D; 1<br>net.bridge.bridge-nf-call-iptables &#x3D; 1<br>vm.swappiness&#x3D;0</p><p>同iptables<br>sysctl –system</p><h2 id="2-install-docker"><a href="#2-install-docker" class="headerlink" title="2. install docker"></a>2. install docker</h2><p><a href="https://yq.aliyun.com/articles/110806">use aliyun docker repo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h2 id="3-install-kubelets-kubeadm-kubectl"><a href="#3-install-kubelets-kubeadm-kubectl" class="headerlink" title="3. install kubelets kubeadm kubectl"></a>3. install kubelets kubeadm kubectl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">install_dep</span></span>()&#123;</span><br><span class="line">    <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    setenforce 0</span><br><span class="line">    yum install -y kubelet kubeadm kubectl</span><br><span class="line">    systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-初始化master节点"><a href="#4-初始化master节点" class="headerlink" title="4. 初始化master节点"></a>4. 初始化master节点</h2><p>首选 配置pod network </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt; /etc/cni/net.d/10-flannel.conf</span><br><span class="line">&#123;&quot;name&quot;:&quot;cbr0&quot;,&quot;type&quot;:&quot;flannel&quot;,&quot;delegate&quot;: &#123;&quot;isDefaultGateway&quot;: true&#125;&#125;</span><br><span class="line">EOF</span><br><span class="line">mkdir /usr/share/oci-umount/oci-umount.d -p</span><br><span class="line">mkdir /run/flannel/</span><br><span class="line">cat &lt;&lt;EOF&gt; /run/flannel/subnet.env</span><br><span class="line">FLANNEL_NETWORK=10.244.0.0/16</span><br><span class="line">FLANNEL_SUBNET=10.244.0.1/24</span><br><span class="line">FLANNEL_MTU=1450</span><br><span class="line">FLANNEL_IPMASQ=true</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>初始化master集群<br>注意在国内一定要设置  –image-repository 不然默认gcr.io 拉不下来<br>推荐azure (支持gcr.io,quay.io)</p><h3 id="k8s-gcr-io"><a href="#k8s-gcr-io" class="headerlink" title="k8s.gcr.io"></a>k8s.gcr.io</h3><p><a href="http://mirror.azure.cn/help/gcr-proxy-cache.html">微软azure镜像</a><br>&#x3D; gcr.azk8s.cn&#x2F;google_containers<br>&#x3D; registry.aliyuncs.com&#x2F;google_containers </p><h3 id="quay-io"><a href="#quay-io" class="headerlink" title="quay.io"></a>quay.io</h3><p>quay.azk8s.cn</p><p>gcr.io  镜像有几个 一个是阿里云，还有一个是微软azure(推荐azure)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --image-repository gcr.azk8s.cn/google_containers --kubernetes-version v1.15.3 </span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo <span class="built_in">cp</span> -i -f /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#pod-network">安装网络pods 插件</a> 有多种选择 这里使用是flannel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/62e44c867a2846fefb68bd5f178daf4da3095ccb/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kubernetes/dashboard/">安装dashboard</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p>执行完会有一个join的命令用于新node加入集群 可以记下来<br>如果之后忘记可以在master节点<br>执行 kubeadm token create –print-join-command 获得</p><p>执行<br>kubectl get nodes  查看节点是否正常<br>查看日志<br>journalctl -f -u kubelet</p><h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><p>在子节点安装kubeadm,kubectl,kubelet后执行<br>master安装时候出现的join 命令<br>kubeadm join ip:port –token YOU_TOKEN –discovery-token-ca-cert-hash sha256:YOU_TOKEN_HASH</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;install-kubernets-in-china&quot;&gt;&lt;a href=&quot;#install-kubernets-in-china&quot; class=&quot;headerlink&quot; title=&quot;install kubernets in china&quot;&gt;&lt;/a&gt;install </summary>
      
    
    
    
    <category term="container" scheme="http://devhc.com/categories/container/"/>
    
    <category term="kubernetes" scheme="http://devhc.com/categories/container/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="http://devhc.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://devhc.com/linux/tools/git/tools-git/"/>
    <id>http://devhc.com/linux/tools/git/tools-git/</id>
    <published>2019-03-20T08:31:22.000Z</published>
    <updated>2024-06-24T03:58:21.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-技巧"><a href="#Git-技巧" class="headerlink" title="Git 技巧"></a>Git 技巧</h1><h2 id="不同域名使用不同秘钥"><a href="#不同域名使用不同秘钥" class="headerlink" title="不同域名使用不同秘钥"></a>不同域名使用不同秘钥</h2><p>修改~&#x2F;.ssh&#x2F;config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host example.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_example</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><h2 id="git-多commit-支持"><a href="#git-多commit-支持" class="headerlink" title="git 多commit 支持"></a>git 多commit 支持</h2><p>区分公司commit信息和个人commit信息<br>单独每次用git config 改很麻烦<br>可以用git Include 条件引入小技巧达到<br>比如公司git有强制commit信息要求</p><p>修改<br>~&#x2F;.gitconfig</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[include]</span><br><span class="line">        path = /home/your_name/.gitconfig-default</span><br><span class="line"></span><br><span class="line">[includeIf &quot;gitdir:/home/your_name/workspaces/**&quot;]</span><br><span class="line">        path = /home/your_name/.gitconfig-corp</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>~&#x2F;.gitconfig-default 保留默认commit配置<br>~&#x2F;.gitconfig-corp workspaces 目录下面使用公司commit配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.gitconfig-default</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">        email = custom-email@xxxxx.com</span><br><span class="line">        name =  xxxx</span><br><span class="line"></span><br><span class="line">cat ~/.gitconfig-corp</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">        email = xxxx@corp-xxx.com</span><br><span class="line">        name = xxxx</span><br></pre></td></tr></table></figure><h2 id="给github单独设置代理"><a href="#给github单独设置代理" class="headerlink" title="给github单独设置代理"></a>给github单独设置代理</h2><ol><li>http&#x2F;https 代理 (自己有单独代理或公司代理)<br>比如我自己已经有了科学上网代理 本地监听1080 socks5 代理<br>修改~&#x2F;.gitconfig<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[github &quot;com.http&quot;]</span><br><span class="line">        proxy = socks5://127.0.0.1:1080</span><br><span class="line">[github &quot;com.https&quot;]</span><br><span class="line">        proxy = socks5://127.0.0.1:1080</span><br><span class="line">[</span><br></pre></td></tr></table></figure></li></ol><p>如果是http代理 换成<br>proxy &#x3D; <a href="http://host:port">http://host:port</a> 即可</p><h2 id="命令行git神器-lazygit"><a href="#命令行git神器-lazygit" class="headerlink" title="命令行git神器 lazygit"></a>命令行git神器 <a href="https://github.com/jesseduffield/lazygit">lazygit</a></h2><h2 id="使用-stash"><a href="#使用-stash" class="headerlink" title="使用 stash"></a>使用 stash</h2><p>如果您需要在切换分支之前保存未提交的更改，可以使用 <code>git stash</code> 命令。这将把未提交的更改保存在一个堆栈中，以便稍后恢复。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 保存未提交的更改</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># 恢复未提交的更改</span><br><span class="line">git stash apply</span><br><span class="line"></span><br><span class="line"># 从stash堆栈弹出(remove from stash list)</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="使用-rebase"><a href="#使用-rebase" class="headerlink" title="使用 rebase"></a>使用 rebase</h2><p>使用 <code>git rebase</code> 命令可以将当前分支的更改应用到另一个分支上。这可以帮助您保持分支历史记录的整洁和有序。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 将当前分支的更改应用到另一个分支上</span><br><span class="line">git checkout another-branch</span><br><span class="line">git rebase current-branch</span><br></pre></td></tr></table></figure><h2 id="使用-amend"><a href="#使用-amend" class="headerlink" title="使用 amend"></a>使用 amend</h2><p>如果您需要修改最近一次提交的提交信息或者添加一些遗漏的文件，可以使用 <code>git commit --amend</code> 命令。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 修改最近一次提交的提交信息</span><br><span class="line">git commit --amend -m &quot;New commit message&quot;</span><br><span class="line"></span><br><span class="line"># 添加遗漏的文件</span><br><span class="line">git add missed-file</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="使用-reflog"><a href="#使用-reflog" class="headerlink" title="使用 reflog"></a>使用 reflog</h2><p>如果您不小心删除了一个分支或者提交，可以使用 <code>git reflog</code> 命令来查找并恢复它们。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查找删除的分支</span><br><span class="line">git reflog | grep deleted-branch</span><br><span class="line"></span><br><span class="line"># 恢复删除的分支</span><br><span class="line">git checkout -b recovered-branch HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-tag"><a href="#使用-tag" class="headerlink" title="使用 tag"></a>使用 tag</h2><p>使用 <code>git tag</code> 命令可以给特定的提交打上标签，以便稍后更容易地找到。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 给特定的提交打上标签</span><br><span class="line">git tag v1.0.0</span><br></pre></td></tr></table></figure><h2 id="使用-submodule"><a href="#使用-submodule" class="headerlink" title="使用 submodule"></a>使用 submodule</h2><p>如果您需要将一个 Git 仓库作为另一个 Git 仓库的一部分使用，可以使用 <code>git submodule</code> 命令。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 添加一个子模块</span><br><span class="line">git submodule add https://github.com/user/repo.git</span><br><span class="line"></span><br><span class="line"># 更新子模块</span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><h2 id="使用-bisect"><a href="#使用-bisect" class="headerlink" title="使用 bisect"></a>使用 bisect</h2><p>如果您需要找到导致代码出现问题的提交，可以使用 <code>git bisect</code> 命令。这将帮助您快速缩小问题所在的提交范围。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 开始二分查找</span><br><span class="line">git bisect start</span><br><span class="line"></span><br><span class="line"># 标记当前提交为有问题的提交</span><br><span class="line">git bisect bad</span><br><span class="line"></span><br><span class="line"># 标记一个已知没有问题的提交</span><br><span class="line">git bisect good v1.0.0</span><br><span class="line"></span><br><span class="line"># 继续二分查找</span><br><span class="line">git bisect run test.sh</span><br></pre></td></tr></table></figure><h2 id="使用-cherry-pick"><a href="#使用-cherry-pick" class="headerlink" title="使用 cherry-pick"></a>使用 cherry-pick</h2><p>如果您需要将一个提交应用到一个不同的分支上，可以使用 <code>git cherry-pick</code> 命令。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将一个提交应用到当前分支上</span><br><span class="line">git cherry-pick abc123</span><br></pre></td></tr></table></figure><h2 id="使用-gitignore"><a href="#使用-gitignore" class="headerlink" title="使用 gitignore"></a>使用 gitignore</h2><p>创建一个 <code>.gitignore</code> 文件，可以在提交时忽略特定的文件或目录，以保持代码库的整洁。<br><a href="https://www.toptal.com/developers/gitignore/">gitignore.io</a> 是一个在线生成ignore模板网站</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略所有 .log 文件</span><br><span class="line">*.log</span><br></pre></td></tr></table></figure><h2 id="neovim-git-plugins"><a href="#neovim-git-plugins" class="headerlink" title="neovim git plugins"></a>neovim git plugins</h2><ol><li><a href="https://github.com/lewis6991/gitsigns.nvim">gitsigns</a> </li><li>show file git status (in nvim-tree)</li><li>toggle line blame</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git-技巧&quot;&gt;&lt;a href=&quot;#Git-技巧&quot; class=&quot;headerlink&quot; title=&quot;Git 技巧&quot;&gt;&lt;/a&gt;Git 技巧&lt;/h1&gt;&lt;h2 id=&quot;不同域名使用不同秘钥&quot;&gt;&lt;a href=&quot;#不同域名使用不同秘钥&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="linux" scheme="http://devhc.com/categories/linux/"/>
    
    <category term="tools" scheme="http://devhc.com/categories/linux/tools/"/>
    
    <category term="git" scheme="http://devhc.com/categories/linux/tools/git/"/>
    
    
    <category term="linux" scheme="http://devhc.com/tags/linux/"/>
    
    <category term="tools" scheme="http://devhc.com/tags/tools/"/>
    
    <category term="git" scheme="http://devhc.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JPA JOIN</title>
    <link href="http://devhc.com/spring/spring-jpa/"/>
    <id>http://devhc.com/spring/spring-jpa/</id>
    <published>2019-03-08T10:10:00.000Z</published>
    <updated>2024-06-24T03:58:21.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JPA中的Join操作"><a href="#JPA中的Join操作" class="headerlink" title="JPA中的Join操作"></a>JPA中的Join操作</h1><p>在使用JPA进行数据查询时，经常需要使用到Join操作，以获取相关联的数据。JPA中提供了三种Join类型：<code>INNER JOIN</code>、<code>LEFT JOIN</code>和<code>RIGHT JOIN</code>。本文将介绍这三种Join类型的语法，以及在Spring中如何使用JPA进行Join操作。</p><h2 id="Join类型"><a href="#Join类型" class="headerlink" title="Join类型"></a>Join类型</h2><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><p>INNER JOIN是最常用的Join类型，它只返回两个表中都存在的数据。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column <span class="operator">=</span> table2.column;</span><br></pre></td></tr></table></figure><p>在JPA中，INNER JOIN可以使用<code>JOIN</code>或<code>INNER JOIN</code>关键字进行表示。例如，假设我们有两个实体类<code>Department</code>和<code>Employee</code>，它们之间的关系是一对多，即一个部门拥有多个员工。我们可以使用以下代码进行INNER JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Department, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT d, e FROM Department d JOIN d.employees e&quot;)</span></span><br><span class="line">    List&lt;Object[]&gt; findDepartmentAndEmployee();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了<code>JOIN</code>关键字将<code>Department</code>和<code>Employee</code>进行关联，查询结果是一个<code>Object[]</code>数组，其中第一个元素是<code>Department</code>对象，第二个元素是<code>Employee</code>对象。</p><h3 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h3><p>LEFT JOIN返回左表中所有的数据，以及右表中与左表匹配的数据。如果右表中没有匹配的数据，则返回NULL。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column <span class="operator">=</span> table2.column;</span><br></pre></td></tr></table></figure><p>在JPA中，LEFT JOIN可以使用<code>LEFT JOIN</code>或<code>LEFT OUTER JOIN</code>关键字进行表示。例如，假设我们有两个实体类<code>Customer</code>和<code>Order</code>，它们之间的关系是一对多，即一个顾客可以下多个订单。我们可以使用以下代码进行LEFT JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Customer, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT c, o FROM Customer c LEFT JOIN c.orders o&quot;)</span></span><br><span class="line">    List&lt;Object[]&gt; findCustomerAndOrder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了<code>LEFT JOIN</code>关键字将<code>Customer</code>和<code>Order</code>进行关联，查询结果是一个<code>Object[]</code>数组，其中第一个元素是<code>Customer</code>对象，第二个元素是<code>Order</code>对象。</p><h3 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h3><p>RIGHT JOIN返回右表中所有的数据，以及左表中与右表匹配的数据。如果左表中没有匹配的数据，则返回NULL。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.column <span class="operator">=</span> table2.column;</span><br></pre></td></tr></table></figure><p>在JPA中，RIGHT JOIN可以使用<code>RIGHT JOIN</code>或<code>RIGHT OUTER JOIN</code>关键字进行表示。例如，假设我们有两个实体类<code>Order</code>和<code>Product</code>，它们之间的关系是多对一，即多个订单对应一个产品。我们可以使用以下代码进行RIGHT JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Order, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT o, p FROM Order o RIGHT JOIN o.product p&quot;)</span></span><br><span class="line">    List&lt;Object[]&gt; findOrderAndProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了<code>RIGHT JOIN</code>关键字将<code>Order</code>和<code>Product</code>进行关联，查询结果是一个<code>Object[]</code>数组，其中第一个元素是<code>Order</code>对象，第二个元素是<code>Product</code>对象。</p><h2 id="在Spring中使用JPA进行Join操作"><a href="#在Spring中使用JPA进行Join操作" class="headerlink" title="在Spring中使用JPA进行Join操作"></a>在Spring中使用JPA进行Join操作</h2><p>在Spring中使用JPA进行Join操作非常容易，只需要在Repository中定义一个带有<code>@Query</code>注解的方法即可。例如，假设我们有两个实体类<code>Department</code>和<code>Employee</code>，它们之间的关系是一对多，即一个部门拥有多个员工。我们可以使用以下代码进行INNER JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Department, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT d, e FROM Department d JOIN d.employees e&quot;)</span></span><br><span class="line">    List&lt;Object[]&gt; findDepartmentAndEmployee();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了<code>@Query</code>注解定义了一个查询方法，其中的查询语句是一个使用<code>JOIN</code>关键字进行关联的语句。查询结果是一个<code>Object[]</code>数组，其中第一个元素是<code>Department</code>对象，第二个元素是<code>Employee</code>对象。</p><p>除了使用<code>JOIN</code>关键字进行关联外，我们还可以使用<code>LEFT JOIN</code>和<code>RIGHT JOIN</code>关键字进行关联。例如，假设我们有两个实体类<code>Customer</code>和<code>Order</code>，它们之间的关系是一对多，即一个顾客可以下多个订单。我们可以使用以下代码进行LEFT JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Customer, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT c, o FROM Customer c LEFT JOIN c.orders o&quot;)</span></span><br><span class="line">    List&lt;Object[]&gt; findCustomerAndOrder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了<code>@Query</code>注解定义了一个查询方法，其中的查询语句是一个使用<code>LEFT JOIN</code>关键字进行关联的语句。查询结果是一个<code>Object[]</code>数组，其中第一个元素是<code>Customer</code>对象，第二个元素是<code>Order</code>对象。</p><p>类似地，我们还可以使用<code>RIGHT JOIN</code>关键字进行关联。例如，假设我们有两个实体类<code>Order</code>和<code>Product</code>，它们之间的关系是多对一，即多个订单对应一个产品。我们可以使用以下代码进行RIGHT JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Order, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(&quot;SELECT o, p FROM Order o RIGHT JOIN o.product p&quot;)</span></span><br><span class="line">    List&lt;Object[]&gt; findOrderAndProduct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了<code>@Query</code>注解定义了一个查询方法，其中的查询语句是一个使用<code>RIGHT JOIN</code>关键字进行关联的语句。查询结果是一个<code>Object[]</code>数组，其中第一个元素是<code>Order</code>对象，第二个元素是<code>Product</code>对象。</p><h2 id="使用Criteria-Query进行Join操作"><a href="#使用Criteria-Query进行Join操作" class="headerlink" title="使用Criteria Query进行Join操作"></a>使用Criteria Query进行Join操作</h2><p>除了使用JPQL语句进行Join操作外，我们还可以使用Criteria Query进行Join操作。Criteria Query是JPA提供的一种类型安全的查询API，它可以在不使用字符串的情况下构建查询语句。例如，假设我们有两个实体类<code>Department</code>和<code>Employee</code>，它们之间的关系是一对多，即一个部门拥有多个员工。我们可以使用以下代码进行INNER JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DepartmentRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Department, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object[]&gt; findDepartmentAndEmployee() &#123;</span><br><span class="line">        <span class="type">CriteriaBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getEntityManager().getCriteriaBuilder();</span><br><span class="line">        CriteriaQuery&lt;Object[]&gt; query = builder.createQuery(Object[].class);</span><br><span class="line">        Root&lt;Department&gt; department = query.from(Department.class);</span><br><span class="line">        Join&lt;Department, Employee&gt; employee = department.join(<span class="string">&quot;employees&quot;</span>);</span><br><span class="line">        query.select(builder.array(department, employee));</span><br><span class="line">        <span class="keyword">return</span> getEntityManager().createQuery(query).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了Criteria Query API构建了一个INNER JOIN操作，其中的<code>join</code>方法表示进行关联操作，<code>select</code>方法表示查询结果的类型为一个<code>Object[]</code>数组。</p><p>类似地，我们还可以使用Criteria Query API进行LEFT JOIN和RIGHT JOIN操作。例如，假设我们有两个实体类<code>Customer</code>和<code>Order</code>，它们之间的关系是一对多，即一个顾客可以下多个订单。我们可以使用以下代码进行LEFT JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Customer, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object[]&gt; findCustomerAndOrder() &#123;</span><br><span class="line">        <span class="type">CriteriaBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getEntityManager().getCriteriaBuilder();</span><br><span class="line">        CriteriaQuery&lt;Object[]&gt; query = builder.createQuery(Object[].class);</span><br><span class="line">        Root&lt;Customer&gt; customer = query.from(Customer.class);</span><br><span class="line">        Join&lt;Customer, Order&gt; order = customer.join(<span class="string">&quot;orders&quot;</span>, JoinType.LEFT);</span><br><span class="line">        query.select(builder.array(customer, order));</span><br><span class="line">        <span class="keyword">return</span> getEntityManager().createQuery(query).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了Criteria Query API构建了一个LEFT JOIN操作，其中的<code>JoinType.LEFT</code>表示进行左连接操作。</p><p>类似地，我们还可以使用Criteria Query API进行RIGHT JOIN操作。例如，假设我们有两个实体类<code>Order</code>和<code>Product</code>，它们之间的关系是多对一，即多个订单对应一个产品。我们可以使用以下代码进行RIGHT JOIN操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Order, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> List&lt;Object[]&gt; findOrderAndProduct() &#123;</span><br><span class="line">        <span class="type">CriteriaBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> getEntityManager().getCriteriaBuilder();</span><br><span class="line">        CriteriaQuery&lt;Object[]&gt; query = builder.createQuery(Object[].class);</span><br><span class="line">        Root&lt;Order&gt; order = query.from(Order.class);</span><br><span class="line">        Join&lt;Order, Product&gt; product = order.join(<span class="string">&quot;product&quot;</span>, JoinType.RIGHT);</span><br><span class="line">        query.select(builder.array(order, product));</span><br><span class="line">        <span class="keyword">return</span> getEntityManager().createQuery(query).getResultList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了Criteria Query API构建了一个RIGHT JOIN操作，其中的<code>JoinType.RIGHT</code>表示进行右连接操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JPA中提供了三种Join类型：INNER JOIN、LEFT JOIN和RIGHT JOIN。在Spring中，我们可以使用JPQL语句或Criteria Query API进行Join操作。无论是哪种方式，都可以轻松地进行多表查询，以获取相关联的数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JPA中的Join操作&quot;&gt;&lt;a href=&quot;#JPA中的Join操作&quot; class=&quot;headerlink&quot; title=&quot;JPA中的Join操作&quot;&gt;&lt;/a&gt;JPA中的Join操作&lt;/h1&gt;&lt;p&gt;在使用JPA进行数据查询时，经常需要使用到Join操作，以获取相关联</summary>
      
    
    
    
    <category term="spring" scheme="http://devhc.com/categories/spring/"/>
    
    
    <category term="jpa" scheme="http://devhc.com/tags/jpa/"/>
    
    <category term="spring" scheme="http://devhc.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow Hdfs 支持</title>
    <link href="http://devhc.com/tensorflow/framework/tensorflow-tf-hdfs/"/>
    <id>http://devhc.com/tensorflow/framework/tensorflow-tf-hdfs/</id>
    <published>2019-03-07T10:19:10.000Z</published>
    <updated>2024-07-09T08:45:11.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tensorflow-支持hdfs"><a href="#tensorflow-支持hdfs" class="headerlink" title="tensorflow 支持hdfs"></a>tensorflow 支持hdfs</h2><p>2.6 开始需要引入 tensorflow io</p><p> 才能支持viewfs</p><p>从 2.6.0 版本开始，您需要将 tensorflow_io 与 tensorflow 一起导入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装方式：</span><br><span class="line"> pip install tensorflow-io</span><br></pre></td></tr></table></figure><p><strong>复制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"> import tensorflow_io as tfio</span><br></pre></td></tr></table></figure><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><p>环境变量支持</p><p>LD_LIBRARY_PATH必须支持检索到libjvm.so,libhdfs.so</p><p>CLASSPATH 必须是glob方式才可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export CLASSPATH=$(hadoop classpath --glob)</span><br><span class="line">export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/amd64/server/:$HADOOP_HOME/native</span><br></pre></td></tr></table></figure><h2 id="libhdfs-编译"><a href="#libhdfs-编译" class="headerlink" title="libhdfs 编译"></a>libhdfs 编译</h2><p>以hadoop-2.6.0-src 为例</p><p>vim hadoop-common-project&#x2F;hadoop-annotations&#x2F;pom.xml</p><p>修改 1.7 改成1.8</p><p>mvn -Pdist,native clean package -DskipTests -Dmaven.javadoc.skip&#x3D;true </p><p>hadoop-2.6.0-src&#x2F;hadoop-common-project&#x2F;hadoop-common&#x2F;pom.xml</p><p>找到javahClassName 写入a.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.zlib.ZlibCompressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.zlib.ZlibDecompressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.bzip2.Bzip2Compressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.security.JniBasedUnixGroupsMapping&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.nativeio.NativeIO&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.snappy.SnappyCompressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.snappy.SnappyDecompressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.lz4.Lz4Compressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.io.compress.lz4.Lz4Decompressor&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.crypto.OpensslCipher&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.crypto.random.OpensslSecureRandom&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.util.NativeCrc32&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.net.unix.DomainSocket&lt;/javahClassName&gt;</span><br><span class="line">&lt;javahClassName&gt;org.apache.hadoop.net.unix.DomainSocketWatcher&lt;/javahClassName&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cat a.txt|grep -E -o &quot;org.[^&lt;]+&quot; &gt; class.txt</span><br></pre></td></tr></table></figure><p>class.txt 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">org.apache.hadoop.io.compress.zlib.ZlibCompressor</span><br><span class="line">org.apache.hadoop.io.compress.zlib.ZlibDecompressor</span><br><span class="line">org.apache.hadoop.io.compress.bzip2.Bzip2Compressor</span><br><span class="line">org.apache.hadoop.io.compress.bzip2.Bzip2Decompressor</span><br><span class="line">org.apache.hadoop.security.JniBasedUnixGroupsMapping</span><br><span class="line">org.apache.hadoop.io.nativeio.NativeIO</span><br><span class="line">org.apache.hadoop.io.nativeio.SharedFileDescriptorFactory</span><br><span class="line">org.apache.hadoop.security.JniBasedUnixGroupsNetgroupMapping</span><br><span class="line">org.apache.hadoop.io.compress.snappy.SnappyCompressor</span><br><span class="line">org.apache.hadoop.io.compress.snappy.SnappyDecompressor</span><br><span class="line">org.apache.hadoop.io.compress.lz4.Lz4Compressor</span><br><span class="line">org.apache.hadoop.io.compress.lz4.Lz4Decompressor</span><br><span class="line">org.apache.hadoop.crypto.OpensslCipher</span><br><span class="line">org.apache.hadoop.crypto.random.OpensslSecureRandom</span><br><span class="line">org.apache.hadoop.util.NativeCrc32</span><br><span class="line">org.apache.hadoop.net.unix.DomainSocket</span><br><span class="line">org.apache.hadoop.net.unix.DomainSocketWatcher</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat class.txt |xargs javah -d javah -classpath $(hadoop classpath)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd hadoop-hdfs-project/hadoop-hdfs/src/</span><br><span class="line">mkdir build </span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=$HOME/hdfs-native -DGENERATED_JAVAH=../javah -DJVM_ARCH_DATA_MODEL=64 -DREQUIRE_LIBWEBHDFS=OFF -DREQUIRE_FUSE=OFF ..</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">libhdfs.so</span><br><span class="line">target/usr/local/lib/libhdfs.so</span><br><span class="line">header:</span><br><span class="line">main/native/libhdfs/hdfs.h</span><br></pre></td></tr></table></figure><p>libhdfs.so api说明：</p><p><a href="https://archive.cloudera.com/cdh4/cdh/4/hadoop-2.0.0-cdh4.6.0/hadoop-project-dist/hadoop-hdfs/LibHdfs.html">https://archive.cloudera.com/cdh4/cdh/4/hadoop-2.0.0-cdh4.6.0/hadoop-project-dist/hadoop-hdfs/LibHdfs.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hdfs.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">   hdfsFS fs = <span class="built_in">hdfsConnect</span>(<span class="string">&quot;default&quot;</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span>* writePath = <span class="string">&quot;/tmp/testfile.txt&quot;</span>;</span><br><span class="line">   hdfsFile writeFile = <span class="built_in">hdfsOpenFile</span>(fs, writePath, O_WRONLY|O_CREAT, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">   <span class="keyword">if</span>(!writeFile) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to open %s for writing!\n&quot;</span>, writePath);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">char</span>* buffer = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">   tSize num_written_bytes = <span class="built_in">hdfsWrite</span>(fs, writeFile, (<span class="type">void</span>*)buffer, <span class="built_in">strlen</span>(buffer)+<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">hdfsFlush</span>(fs, writeFile)) &#123;</span><br><span class="line">          <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to &#x27;flush&#x27; %s\n&quot;</span>, writePath);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">hdfsCloseFile</span>(fs, writeFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main -Wl,-rpath=&#x27;$ORIGIN/lib&#x27; -Iinclude -Llib main.c -lhdfs</span><br><span class="line">CLASSPATH=$(hadoop classpath --glob) ./main</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tensorflow-支持hdfs&quot;&gt;&lt;a href=&quot;#tensorflow-支持hdfs&quot; class=&quot;headerlink&quot; title=&quot;tensorflow 支持hdfs&quot;&gt;&lt;/a&gt;tensorflow 支持hdfs&lt;/h2&gt;&lt;p&gt;2.6 开始需要引入</summary>
      
    
    
    
    <category term="tensorflow" scheme="http://devhc.com/categories/tensorflow/"/>
    
    <category term="framework" scheme="http://devhc.com/categories/tensorflow/framework/"/>
    
    
    <category term="tensorflow" scheme="http://devhc.com/tags/tensorflow/"/>
    
    <category term="hdfs" scheme="http://devhc.com/tags/hdfs/"/>
    
  </entry>
  
  <entry>
    <title>ssh 跳板机,Socket 代理</title>
    <link href="http://devhc.com/linux/ssh/tools-ssh-proxy/"/>
    <id>http://devhc.com/linux/ssh/tools-ssh-proxy/</id>
    <published>2018-07-15T07:11:55.000Z</published>
    <updated>2024-06-24T03:58:21.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH-Agent-forwarding"><a href="#SSH-Agent-forwarding" class="headerlink" title="SSH Agent forwarding"></a>SSH Agent forwarding</h2><p>ssh -A user@host<br>需要先<br>ssh-add ~&#x2F;.ssh&#x2F;id_rsa</p><p>或者修改 ~&#x2F;.ssh&#x2F;config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    ForwardX11 yes</span><br></pre></td></tr></table></figure><p>登录之后目标服务器 env<br>会有SSH_AUTH_SOCK 变量记录与本地key通信的socket</p><span id="more"></span><h2 id="SSH-ProxyCommand-跳板机"><a href="#SSH-ProxyCommand-跳板机" class="headerlink" title="SSH ProxyCommand 跳板机"></a>SSH ProxyCommand 跳板机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.ssh/sockets/</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-copy-id 跳板机用户@跳板机服务器</span><br></pre></td></tr></table></figure><p>配置~&#x2F;.ssh&#x2F;config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host *.xxx.com</span><br><span class="line">  user YOU_SSH_USER</span><br><span class="line">  ForwardAgent yes</span><br><span class="line">  ControlMaster auto</span><br><span class="line">  ControlPath ~/.ssh/sockets/%r@%h-%p</span><br><span class="line">  ControlPersist 600</span><br><span class="line">  ProxyCommand ssh -q -W %h:%p 跳板机用户@跳板机地址</span><br></pre></td></tr></table></figure><h2 id="SSH-Tunnel-Socket5-代理-网页代理"><a href="#SSH-Tunnel-Socket5-代理-网页代理" class="headerlink" title="SSH Tunnel Socket5 代理 网页代理"></a>SSH Tunnel Socket5 代理 网页代理</h2><p>ssh -fTND LOCAL_PROXY_PORT 代理服务器用户@代理服务器地址</p><p>然后 SwitchyOmega 配置 LOCAL_PROXY_PORT socket5 代理服务</p><p>就可以将web 流量通过socket5 转向代理服务器</p><h2 id="SSH-跳板访问mysql等其他服务"><a href="#SSH-跳板访问mysql等其他服务" class="headerlink" title="SSH 跳板访问mysql等其他服务"></a>SSH 跳板访问mysql等其他服务</h2><p>比如mysql 服务器是 1.2.3.4:3306 本地不能 访问<br>但是代理服务器可以访问</p><p>ssh -fN -L3306:1.2.3.4:3306  代理服务器用户@代理服务器地址</p><p>查看端口情况: lsof -i:3306</p><p>host 要写127.0.0.1<br>mysql -P3306 -h127.0.0.1 -uusername -ppassword</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SSH-Agent-forwarding&quot;&gt;&lt;a href=&quot;#SSH-Agent-forwarding&quot; class=&quot;headerlink&quot; title=&quot;SSH Agent forwarding&quot;&gt;&lt;/a&gt;SSH Agent forwarding&lt;/h2&gt;&lt;p&gt;ssh -A user@host&lt;br&gt;需要先&lt;br&gt;ssh-add ~&amp;#x2F;.ssh&amp;#x2F;id_rsa&lt;/p&gt;
&lt;p&gt;或者修改 ~&amp;#x2F;.ssh&amp;#x2F;config&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Host *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ForwardAgent yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ForwardX11 yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;登录之后目标服务器 env&lt;br&gt;会有SSH_AUTH_SOCK 变量记录与本地key通信的socket&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://devhc.com/categories/linux/"/>
    
    <category term="ssh" scheme="http://devhc.com/categories/linux/ssh/"/>
    
    
    <category term="linux" scheme="http://devhc.com/tags/linux/"/>
    
    <category term="ssh" scheme="http://devhc.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>socket http</title>
    <link href="http://devhc.com/cpp/socket/cpp-socket/"/>
    <id>http://devhc.com/cpp/socket/cpp-socket/</id>
    <published>2018-06-25T10:00:11.000Z</published>
    <updated>2024-06-24T03:58:21.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h1><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a><a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_socket.h.html">socket</a></h2><ol><li>server &#x3D; <a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html">socket</a>(PF_INET, SOCK_STREAM, 0)<ol><li>memset</li><li>struct sockaddr_in name;<ol start="3"><li>name.sin_family  &#x3D; AF_INET;</li><li>name.sin_port &#x3D; htons(port);</li><li>name.sin_addr.s_addr &#x3D; htonl(INADDR_ANY);</li></ol></li><li>setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on))) &lt; 0<span id="more"></span></li></ol></li><li>bind(server,(struct sockaddr *)&amp;name, &amp; namelen)<ol><li>port 如果为0 会sin_port 设置随机端口</li></ol></li><li>listen(server,backlog)</li><li>while accept client socket<ol><li>pthread_create client socket processs</li></ol></li><li>close(server)</li></ol><h2 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h2><ol><li><a href="https://tools.ietf.org/html/rfc2616">RFC2616</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;httpd&quot;&gt;&lt;a href=&quot;#httpd&quot; class=&quot;headerlink&quot; title=&quot;httpd&quot;&gt;&lt;/a&gt;httpd&lt;/h1&gt;&lt;h2 id=&quot;socket&quot;&gt;&lt;a href=&quot;#socket&quot; class=&quot;headerlink&quot; title=&quot;socket&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_socket.h.html&quot;&gt;socket&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;server &amp;#x3D; &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html&quot;&gt;socket&lt;/a&gt;(PF_INET, SOCK_STREAM, 0)&lt;ol&gt;
&lt;li&gt;memset&lt;/li&gt;
&lt;li&gt;struct sockaddr_in name;&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;name.sin_family  &amp;#x3D; AF_INET;&lt;/li&gt;
&lt;li&gt;name.sin_port &amp;#x3D; htons(port);&lt;/li&gt;
&lt;li&gt;name.sin_addr.s_addr &amp;#x3D; htonl(INADDR_ANY);&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;amp;on, sizeof(on))) &amp;lt; 0</summary>
    
    
    
    <category term="cpp" scheme="http://devhc.com/categories/cpp/"/>
    
    <category term="socket" scheme="http://devhc.com/categories/cpp/socket/"/>
    
    
    <category term="cpp" scheme="http://devhc.com/tags/cpp/"/>
    
    <category term="socket" scheme="http://devhc.com/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>pthread</title>
    <link href="http://devhc.com/cpp/thread/cpp-pthread/"/>
    <id>http://devhc.com/cpp/thread/cpp-pthread/</id>
    <published>2018-06-25T09:12:01.000Z</published>
    <updated>2024-06-24T03:58:21.685Z</updated>
    
    <content type="html"><![CDATA[<p>#pthread</p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>函数声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;pthread.h&gt;</span><br><span class="line">int pthread_create(pthread_t *tidp,const pthread_attr_t *attr,</span><br><span class="line">(void*)(*start_rtn)(void*),void *arg);</span><br></pre></td></tr></table></figure><span id="more"></span><p>##编译链接参数<br>-lpthread</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>若线程创建成功，则返回0。若线程创建失败，则返回出错编号，并且*thread中的内容是未定义的。<br>返回成功时，由tidp指向的内存单元被设置为新创建线程的线程ID。attr参数用于指定各种不同的线程属性。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个万能指针参数arg，如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。<br>linux下用C语言开发多线程程序，Linux系统下的多线程遵循POSIX线程接口，称为pthread。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>第一个参数为指向线程标识符的指针。<br>第二个参数用来设置线程属性。<br>第三个参数是线程运行函数的起始地址。<br>最后一个参数是运行函数的参数。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>因为pthread并非Linux系统的默认库，而是POSIX线程库。在Linux中将其作为一个库来使用，因此加上 -lpthread（或-pthread）以显式链接该库。函数在执行错误时的错误信息将作为返回值返回，并不修改系统全局变量errno，当然也无法使用perror()打印错误信息。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;#pthread&lt;/p&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#include&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int pthread_create(pthread_t *tidp,const pthread_attr_t *attr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(void*)(*start_rtn)(void*),void *arg);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="cpp" scheme="http://devhc.com/categories/cpp/"/>
    
    <category term="thread" scheme="http://devhc.com/categories/cpp/thread/"/>
    
    
    <category term="cpp" scheme="http://devhc.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>cpp Compile Issues</title>
    <link href="http://devhc.com/uncategorized/cpp-cpp-compile-issues/"/>
    <id>http://devhc.com/uncategorized/cpp-cpp-compile-issues/</id>
    <published>2018-06-25T08:11:01.000Z</published>
    <updated>2024-06-24T03:58:21.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cpp-compile-issues"><a href="#cpp-compile-issues" class="headerlink" title="cpp compile issues"></a>cpp compile issues</h1><h2 id="undefined-reference-to-clock-gettime’"><a href="#undefined-reference-to-clock-gettime’" class="headerlink" title="undefined reference to &#96;clock_gettime’"></a>undefined reference to &#96;clock_gettime’</h2><pre><code>1. add -lrt (glibc &lt; 2.17 ldd --version 查看)1. 如果glibc &gt; 2.17 可以省略</code></pre><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;cpp-compile-issues&quot;&gt;&lt;a href=&quot;#cpp-compile-issues&quot; class=&quot;headerlink&quot; title=&quot;cpp compile issues&quot;&gt;&lt;/a&gt;cpp compile issues&lt;/h1&gt;&lt;h2 id=&quot;undefined-reference-to-clock-gettime’&quot;&gt;&lt;a href=&quot;#undefined-reference-to-clock-gettime’&quot; class=&quot;headerlink&quot; title=&quot;undefined reference to &amp;#96;clock_gettime’&quot;&gt;&lt;/a&gt;undefined reference to &amp;#96;clock_gettime’&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. add -lrt (glibc &amp;lt; 2.17 ldd --version 查看)
1. 如果glibc &amp;gt; 2.17 可以省略
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="http://devhc.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>AutoKey 实现自动化输入</title>
    <link href="http://devhc.com/linux/autokey/linux-autokey/"/>
    <id>http://devhc.com/linux/autokey/linux-autokey/</id>
    <published>2018-06-16T10:32:00.000Z</published>
    <updated>2024-06-24T03:58:21.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AutoKey-实现自动化输入-操作"><a href="#AutoKey-实现自动化输入-操作" class="headerlink" title="AutoKey 实现自动化输入,操作"></a>AutoKey 实现自动化输入,操作</h1><ol><li>在linux经常需要按快捷键自动化输入密码或者执行某个命令,可以使用<a href="https://github.com/autokey/autokey">AutoKey</a>这个工具，非常好用</li><li>从release 页面下载deb安装 我选择是autokey-gtk_xxxx.all.deb</li><li>安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VERSION=&quot;0.x.x&quot;</span><br><span class="line">sudo dpkg --install autokey-common_$&#123;VERSION&#125;_all.deb autokey-gtk_$&#123;VERSION&#125;_all.deb</span><br><span class="line">sudo apt --fix-broken install</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用autokey自动生成动态码"><a href="#使用autokey自动生成动态码" class="headerlink" title="使用autokey自动生成动态码"></a>使用autokey自动生成动态码</h2><p>比如更具钥匙串 SECRETS 中 all3n 记录的 oath 秘钥生成动态码发送到输入中<br>比如自动输入谷歌动态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">先keyring 设置SECRETS</span><br><span class="line">keyring set [service] [username]</span><br><span class="line">例如</span><br><span class="line">keyring set SECRETS all3n</span><br></pre></td></tr></table></figure><p>新建script 比如 vpn_code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import keyring</span><br><span class="line">import oathtool</span><br><span class="line">secret = keyring.get_password(&quot;SECRETS&quot;, &quot;all3n&quot;)</span><br><span class="line">code = oathtool.generate_otp(secret)</span><br><span class="line">keyboard.send_keys(code)</span><br></pre></td></tr></table></figure><p>右边设置HotKey 比如 alt-shift-]</p><p>这样我按快捷键自动输入动态码,其他密码都可以类似操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AutoKey-实现自动化输入-操作&quot;&gt;&lt;a href=&quot;#AutoKey-实现自动化输入-操作&quot; class=&quot;headerlink&quot; title=&quot;AutoKey 实现自动化输入,操作&quot;&gt;&lt;/a&gt;AutoKey 实现自动化输入,操作&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="linux" scheme="http://devhc.com/categories/linux/"/>
    
    <category term="autokey" scheme="http://devhc.com/categories/linux/autokey/"/>
    
    
    <category term="shell" scheme="http://devhc.com/tags/shell/"/>
    
    <category term="autokey" scheme="http://devhc.com/tags/autokey/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow Variable 变量</title>
    <link href="http://devhc.com/tensorflow/framework/tensorflow-tf-val/"/>
    <id>http://devhc.com/tensorflow/framework/tensorflow-tf-val/</id>
    <published>2018-06-14T11:14:13.000Z</published>
    <updated>2024-06-24T03:58:21.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><ol><li>tf.get_variable  提供名称 和 shape<ol><li>my_variable &#x3D; tf.get_variable(“my_variable”, [1, 2, 3])</li><li>指定初始化方法<ol><li>my_int_variable &#x3D; tf.get_variable(“my_int_variable”, [1, 2, 3], dtype&#x3D;tf.int32,</li></ol></li></ol></li></ol><p>  initializer&#x3D;tf.zeros_initializer)<br>    1. 通过tensor 初始化，不要指定形状<br>        1. other_variable &#x3D; tf.get_variable(“other_variable”, dtype&#x3D;tf.int32,<br>  initializer&#x3D;tf.constant([23, 42]))</p><span id="more"></span><h2 id="变量集合"><a href="#变量集合" class="headerlink" title="变量集合"></a>变量集合</h2><pre><code>1. 程序未链接时候创建 tf.Variable1. collections    1. tf.GraphKeys.GLOBAL_VARIABLES 多个设备共享    1. tf.GraphKeys.TRAINABLE_VARIABLES 将计算梯度的变量    1. 如果不想参加训练 可以以下两种方式        1. my_local = tf.get_variable(&quot;my_local&quot;, shape=(),</code></pre><p>collections&#x3D;[tf.GraphKeys.LOCAL_VARIABLES])<br>            1. my_non_trainable &#x3D; tf.get_variable(“my_non_trainable”,<br>                                   shape&#x3D;(),<br>                                   trainable&#x3D;False)<br>    1. 添加 不需要显示创建<br>        1. tf.add_to_collection(“my_collection_name”, my_local)<br>    1. 获取集合变量<br>        1. tf.get_collection(“my_collection_name”)</p><h2 id="指定变量放置设备"><a href="#指定变量放置设备" class="headerlink" title="指定变量放置设备"></a>指定变量放置设备</h2><pre><code>1. 放在第2快GPU上<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with tf.device(&quot;/device:GPU:1&quot;):</span><br><span class="line">    v = tf.get_variable(&quot;v&quot;, [1])</span><br></pre></td></tr></table></figure>1. 分布式<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cluster_spec = &#123;</span><br><span class="line">    &quot;ps&quot;: [&quot;ps0:2222&quot;, &quot;ps1:2222&quot;],</span><br><span class="line">    &quot;worker&quot;: [&quot;worker0:2222&quot;, &quot;worker1:2222&quot;, &quot;worker2:2222&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">with tf.device(tf.train.replica_device_setter(cluster=cluster_spec)):</span><br><span class="line">    v = tf.get_variable(&quot;v&quot;, shape=[20, 20]) </span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h2 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h2><ol><li>变量必须初始化才能使用<ol><li>显式初始化(自己创建图和会话)<ol><li>session.run(tf.global_variables_initializer()) 初始化 tf.GraphKeys.GLOBAL_VARIABLES</li></ol></li><li>tf.contrib.slim,tf.estimator.Estimator,Keras 等高级框架会自动初始化</li></ol></li><li>初始化指定变量<ol><li>session.run(my_variable.initializer)</li></ol></li><li>查询未初始化<ol><li>print(session.run(tf.report_uninitialized_variables()))</li></ol></li></ol><h2 id="Variable-get-variable"><a href="#Variable-get-variable" class="headerlink" title="Variable &amp;&amp; get_variable"></a>Variable &amp;&amp; get_variable</h2><ol><li>Variable 会处理冲突，get_variable 不会<br>1 .Variable 每次会重新创建对象 reuse 无关，get_variable 会之前对象返回</li></ol><h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><ol><li>tf.variable_scope<ol><li>可以让变量有相同的命名，包括tf.get_variable得到的变量，还有tf.Variable的变量</li></ol></li><li>tf.name_scope<ol><li>为了管理变量</li><li>可以让变量有相同的命名，只是限于tf.Variable的变量</li><li>get_variable 会忽略name_scope</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Create&quot;&gt;&lt;a href=&quot;#Create&quot; class=&quot;headerlink&quot; title=&quot;Create&quot;&gt;&lt;/a&gt;Create&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;tf.get_variable  提供名称 和 shape&lt;ol&gt;
&lt;li&gt;my_variable &amp;#x3D; tf.get_variable(“my_variable”, [1, 2, 3])&lt;/li&gt;
&lt;li&gt;指定初始化方法&lt;ol&gt;
&lt;li&gt;my_int_variable &amp;#x3D; tf.get_variable(“my_int_variable”, [1, 2, 3], dtype&amp;#x3D;tf.int32,&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  initializer&amp;#x3D;tf.zeros_initializer)&lt;br&gt;    1. 通过tensor 初始化，不要指定形状&lt;br&gt;        1. other_variable &amp;#x3D; tf.get_variable(“other_variable”, dtype&amp;#x3D;tf.int32,&lt;br&gt;  initializer&amp;#x3D;tf.constant([23, 42]))&lt;/p&gt;</summary>
    
    
    
    <category term="tensorflow" scheme="http://devhc.com/categories/tensorflow/"/>
    
    <category term="framework" scheme="http://devhc.com/categories/tensorflow/framework/"/>
    
    
    <category term="tensorflow" scheme="http://devhc.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Maven 使用技巧</title>
    <link href="http://devhc.com/java/tools/java-maven-tips/"/>
    <id>http://devhc.com/java/tools/java-maven-tips/</id>
    <published>2018-05-30T06:13:55.000Z</published>
    <updated>2024-06-24T03:58:21.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Maven-使用技巧"><a href="#Maven-使用技巧" class="headerlink" title="Maven 使用技巧"></a>Maven 使用技巧</h1><ol><li>多module,分stage 分开打包<ol><li>目录结构 (a,b 依赖common)<ol><li>assembly</li><li>commont</li><li>a</li><li>b</li><li>pom.xml</li></ol></li><li>assembly&#x2F;pom.xml 通过参数-Ddeploy.app&#x3D;a 控制哪个模块<span id="more"></span></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  &lt;properties&gt;</span><br><span class="line">      &lt;deploy.app&gt;a&lt;/deploy.app&gt;</span><br><span class="line">      &lt;deploy.stage&gt;test&lt;/deploy.stage&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.xxx&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;xxxx-$&#123;deploy.app&#125;&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;descriptors&gt;</span><br><span class="line">          &lt;descriptor&gt;src/main/assembly/$&#123;deploy.app&#125;.xml&lt;/descriptor&gt;</span><br><span class="line">        &lt;/descriptors&gt;</span><br><span class="line">        &lt;outputDirectory&gt;$&#123;project.parent.basedir&#125;/target&lt;/outputDirectory&gt;</span><br><span class="line">        &lt;finalName&gt;xxxx-$&#123;deploy.app&#125;-assembly-$&#123;project.parent.version&#125;&lt;/finalName&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">      &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">          &lt;id&gt;assembly-deploy-package&lt;/id&gt;</span><br><span class="line">          &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">          &lt;goals&gt;</span><br><span class="line">            &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">          &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">      &lt;/executions&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure><pre><code>1. src/main/assembly/xx.xml</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;assembly&gt;</span><br><span class="line">  &lt;id&gt;deploy&lt;/id&gt;</span><br><span class="line">  &lt;formats&gt;</span><br><span class="line">    &lt;format&gt;tar.gz&lt;/format&gt;</span><br><span class="line">  &lt;/formats&gt;</span><br><span class="line">  &lt;includeBaseDirectory&gt;false&lt;/includeBaseDirectory&gt;</span><br><span class="line">  &lt;dependencySets&gt;</span><br><span class="line">    &lt;dependencySet&gt;</span><br><span class="line">      &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;</span><br><span class="line">      &lt;includes&gt;</span><br><span class="line">        &lt;include&gt;com.xxxx:xxx-$&#123;deploy.app&#125;&lt;/include&gt;</span><br><span class="line">      &lt;/includes&gt;</span><br><span class="line">    &lt;/dependencySet&gt;</span><br><span class="line">  &lt;/dependencySets&gt;</span><br><span class="line">  &lt;fileSets&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">      &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/common&lt;/directory&gt;</span><br><span class="line">    &lt;/fileSet&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">      &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/$&#123;deploy.app&#125;/common&lt;/directory&gt;</span><br><span class="line">    &lt;/fileSet&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">      &lt;outputDirectory&gt;conf&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;project.parent.basedir&#125;/config/$&#123;deploy.app&#125;/$&#123;deploy.stage&#125;&lt;/directory&gt;</span><br><span class="line">    &lt;/fileSet&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">      &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;fileMode&gt;0755&lt;/fileMode&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;project.parent.basedir&#125;/$&#123;deploy.app&#125;/src/main/scripts&lt;/directory&gt;</span><br><span class="line">    &lt;/fileSet&gt;</span><br><span class="line">    &lt;fileSet&gt;</span><br><span class="line">      &lt;outputDirectory&gt;/libs&lt;/outputDirectory&gt;</span><br><span class="line">      &lt;directory&gt;$&#123;project.parent.basedir&#125;/$&#123;deploy.app&#125;/target/lib&lt;/directory&gt;</span><br><span class="line">    &lt;/fileSet&gt;</span><br><span class="line">  &lt;/fileSets&gt;</span><br><span class="line">&lt;/assembly&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>1. 需要在module pom.xml plugin 加上</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">              &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;phase&gt;prepare-package&lt;/phase&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">              &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/lib&lt;/outputDirectory&gt;</span><br><span class="line">              &lt;includeScope&gt;runtime&lt;/includeScope&gt;</span><br><span class="line">              &lt;excludeScope&gt;test,provided&lt;/excludeScope&gt;</span><br><span class="line">              &lt;overWriteReleases&gt;false&lt;/overWriteReleases&gt;</span><br><span class="line">              &lt;overWriteSnapshots&gt;false&lt;/overWriteSnapshots&gt;</span><br><span class="line">              &lt;overWriteIfNewer&gt;true&lt;/overWriteIfNewer&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">        &lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><pre><code>1. 编译a test 包:mvn clean package -am -pl assembly -Ddeploy.app=a -Ddeploy.stage=test1. 编译b prod 包:mvn clean package -am -pl assembly -Ddeploy.app=b -Ddeploy.stage=prod</code></pre>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Maven-使用技巧&quot;&gt;&lt;a href=&quot;#Maven-使用技巧&quot; class=&quot;headerlink&quot; title=&quot;Maven 使用技巧&quot;&gt;&lt;/a&gt;Maven 使用技巧&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;多module,分stage 分开打包&lt;ol&gt;
&lt;li&gt;目录结构 (a,b 依赖common)&lt;ol&gt;
&lt;li&gt;assembly&lt;/li&gt;
&lt;li&gt;commont&lt;/li&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;li&gt;pom.xml&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;assembly&amp;#x2F;pom.xml 通过参数-Ddeploy.app&amp;#x3D;a 控制哪个模块</summary>
    
    
    
    <category term="java" scheme="http://devhc.com/categories/java/"/>
    
    <category term="tools" scheme="http://devhc.com/categories/java/tools/"/>
    
    
    <category term="maven" scheme="http://devhc.com/tags/maven/"/>
    
    <category term="compile" scheme="http://devhc.com/tags/compile/"/>
    
  </entry>
  
  <entry>
    <title>Linux 使用davmail thunderbird 连接 outlook exchange</title>
    <link href="http://devhc.com/linux/tools/tools-davmail-setup/"/>
    <id>http://devhc.com/linux/tools/tools-davmail-setup/</id>
    <published>2018-05-30T06:01:12.000Z</published>
    <updated>2024-06-24T03:58:21.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="davmail-配置"><a href="#davmail-配置" class="headerlink" title="davmail 配置"></a>davmail 配置</h2><p><a href="http://davmail.sourceforge.net/">官网</a><br>DavMail 是一个Java 编写Exchange 的代理gateway软件,让一般smtp+imap&#x2F;pop3 客户端可以通过这个代理收发邮件</p><span id="more"></span><h2 id="davmail-安装"><a href="#davmail-安装" class="headerlink" title="davmail 安装"></a>davmail 安装</h2><p><a href="https://sourceforge.net/projects/davmail/files/davmail/4.8.6/davmail-4.8.6-2600.zip/download">davmail download</a></p><ol><li>unzip -d davmailxxx.zip -d &#x2F;opt&#x2F;davmail</li></ol><h2 id="davmail-配置-1"><a href="#davmail-配置-1" class="headerlink" title="davmail 配置"></a>davmail 配置</h2><ol><li>创建&#x2F;opt&#x2F;davmail&#x2F;davmail.properties 拷贝官方实例配置 <a href="http://davmail.sourceforge.net/serversetup.html">Official Config</a></li><li>如果是服务器注意修改davmail.url 为内部服务器地址</li><li>修改davmail.logFilePath&#x3D;&#x2F;opt&#x2F;davmail&#x2F;davmail.log</li><li>将davmail 注册到本地服务<ol><li>useradd davmail</li><li>sudo chown -R davmail:davmail &#x2F;opt&#x2F;davmail</li><li>sudo vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;davmail.service <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=davmail proxy for exchange</span><br><span class="line">[Service]</span><br><span class="line">User=davmail</span><br><span class="line">Group=davmail</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/opt/davmail/davmail.sh /opt/davmail/davmail.properties</span><br><span class="line">PIDFile=/var/run/davmail.pid</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target graphical.target</span><br></pre></td></tr></table></figure></li><li>systemctl enable davmail</li><li>systemctl start davmail</li><li>ps aux|grep davmail 检查服务是否正常 可以通过直接运行 &#x2F;opt&#x2F;davmail&#x2F;davmail.sh &#x2F;opt&#x2F;davmail&#x2F;davmail.properties 查看错误信息</li></ol></li><li>修改&#x2F;opt&#x2F;davmail&#x2F;davmail.sh<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">BASE=`dirname $0`</span><br><span class="line">BASE=/opt/davmail</span><br><span class="line">for i in $BASE/lib/*; do export CLASSPATH=$CLASSPATH:$i; done</span><br><span class="line">JAVA=`which java`</span><br><span class="line">$JAVA -Xmx512M -Dsun.net.inetaddr.ttl=60 -cp $BASE/davmail.jar:$CLASSPATH davmail.DavGateway $1</span><br></pre></td></tr></table></figure></li></ol><h2 id="Thunder-bird-配置"><a href="#Thunder-bird-配置" class="headerlink" title="Thunder bird 配置"></a>Thunder bird 配置</h2><ol><li>STMP <ol><li>Server:localhost Port:1025</li><li>UserName: you namee</li><li>Connection security:Non</li><li>Authentication Method:Password ,transmitted insecureity</li></ol></li><li>IMAP:<ol><li>Server:localhost Port:1143</li><li>UserName: you name</li><li>Connection security:None</li><li>Authentication Method:Password ,transmitted insecureity</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;davmail-配置&quot;&gt;&lt;a href=&quot;#davmail-配置&quot; class=&quot;headerlink&quot; title=&quot;davmail 配置&quot;&gt;&lt;/a&gt;davmail 配置&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://davmail.sourceforge.net/&quot;&gt;官网&lt;/a&gt;&lt;br&gt;DavMail 是一个Java 编写Exchange 的代理gateway软件,让一般smtp+imap&amp;#x2F;pop3 客户端可以通过这个代理收发邮件&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://devhc.com/categories/linux/"/>
    
    <category term="tools" scheme="http://devhc.com/categories/linux/tools/"/>
    
    
    <category term="linux" scheme="http://devhc.com/tags/linux/"/>
    
    <category term="tools" scheme="http://devhc.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用JRebel 对java 应用热部署开发</title>
    <link href="http://devhc.com/java/tools/java-jrebel-hot-deploy/"/>
    <id>http://devhc.com/java/tools/java-jrebel-hot-deploy/</id>
    <published>2018-05-30T04:01:12.000Z</published>
    <updated>2024-06-24T03:58:21.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用JRebel-对java-应用热部署开发"><a href="#使用JRebel-对java-应用热部署开发" class="headerlink" title="使用JRebel 对java 应用热部署开发"></a>使用JRebel 对java 应用热部署开发</h1><ol><li>Java 热更新<br>Java 开发Web Server 相关经常被人吐槽修改代码需要重启服务器，非常不方便,JRebel 是一个非常方便的热更新部署插件.</li></ol><h2 id="JRebel安装"><a href="#JRebel安装" class="headerlink" title="JRebel安装"></a>JRebel安装</h2><ol><li>下载jrebel:<a href="https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij">https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij</a></li><li>unzip -d &#x2F;opt jrebel-xxxx-nosetup.zip (xxxx 替换下载版本)</li><li>java -jar &#x2F;opt&#x2F;jrebel&#x2F;jrebel.jar -set-remote-password 12345678<span id="more"></span></li></ol><h2 id="Jrebel-激活"><a href="#Jrebel-激活" class="headerlink" title="Jrebel 激活"></a>Jrebel 激活</h2><ol><li>Activate Code:<ol><li>通过Facebook 登录 <a href="https://my.jrebel.com/">https://my.jrebel.com/</a> 获取</li></ol></li><li>LisenceServer(By iLanyu) <ol><li>docker run -d -p 8888:8888 ilanyu&#x2F;golang-reverseproxy</li></ol></li></ol><h2 id="IntelJ-Idea"><a href="#IntelJ-Idea" class="headerlink" title="IntelJ Idea"></a>IntelJ Idea</h2><ol><li>安装插件并激活插件<ol><li>jntelj 安装jrebel 插件:File-Setting-Plugins 安装Jrebel(安装慢可以设置代理下载)</li><li>激活Help-&gt;Jrebel-Activation-&gt;LisenceServer</li><li><a href="http://localhost:8888/uuid-your-gen">http://localhost:8888/uuid-your-gen</a> (uuid 可以<a href="https://www.uuidgenerator.net/">https://www.uuidgenerator.net/</a> 生成)</li></ol></li><li>配置JRebel插件<ol><li>添加File-Setting-Jrebel-RemoteServer,添加remote server</li><li>点击+,name:model-server,url:<a href="http://localhost:8000/">http://localhost:8000</a></li><li>Server Auth:填写12345678</li><li>打开Views -&gt; TopWindow -&gt;Jrebel 视图,勾上热部署模块</li><li>在启动脚本加上参数<ol><li>类似 java -agentpath:&#x2F;opt&#x2F;jrebel&#x2F;lib&#x2F;libjrebel64.so -Drebel.remoting_plugin&#x3D;true -Drebel.remoting_port&#x3D;8000 foo.bar.MyApp</li></ol></li><li>启动Server,在项目修改代码，编译后会自动加载</li></ol></li><li>配置保存自动编译加载 Auto Compile<ol><li>默认代码保存不会自动加载需要右键编译或者快捷键(Ctrl&#x2F;Cmd+Shift+F9)</li><li>开启保存编译<a href="https://stackoverflow.com/questions/12744303/intellij-idea-java-classes-not-auto-compiling-on-save">IntelJ Auto Compile</a></li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用JRebel-对java-应用热部署开发&quot;&gt;&lt;a href=&quot;#使用JRebel-对java-应用热部署开发&quot; class=&quot;headerlink&quot; title=&quot;使用JRebel 对java 应用热部署开发&quot;&gt;&lt;/a&gt;使用JRebel 对java 应用热部署开发&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Java 热更新&lt;br&gt;Java 开发Web Server 相关经常被人吐槽修改代码需要重启服务器，非常不方便,JRebel 是一个非常方便的热更新部署插件.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;JRebel安装&quot;&gt;&lt;a href=&quot;#JRebel安装&quot; class=&quot;headerlink&quot; title=&quot;JRebel安装&quot;&gt;&lt;/a&gt;JRebel安装&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载jrebel:&lt;a href=&quot;https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij&quot;&gt;https://zeroturnaround.com/software/jrebel/download/#!/have-license/intellij&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;unzip -d &amp;#x2F;opt jrebel-xxxx-nosetup.zip (xxxx 替换下载版本)&lt;/li&gt;
&lt;li&gt;java -jar &amp;#x2F;opt&amp;#x2F;jrebel&amp;#x2F;jrebel.jar -set-remote-password 12345678</summary>
    
    
    
    <category term="java" scheme="http://devhc.com/categories/java/"/>
    
    <category term="tools" scheme="http://devhc.com/categories/java/tools/"/>
    
    
    <category term="java" scheme="http://devhc.com/tags/java/"/>
    
    <category term="hotdeploy" scheme="http://devhc.com/tags/hotdeploy/"/>
    
  </entry>
  
</feed>
